<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>EntityFramework</name>
  </assembly>
  <members>
    <member name="T:System.Data.Entity.CreateDatabaseIfNotExists`1">
      <summary>Implémentation de <see cref="T:System.Data.Entity.IDatabaseInitializer`1" /> qui recréera et, éventuellement, ré-alimentera la base de données avec les données, uniquement si la base de données n'existe pas. Pour alimenter la base de données, créez une classe dérivée et substituez la méthode Seed. </summary>
      <typeparam name="TContext">Type du contexte.</typeparam>
    </member>
    <member name="M:System.Data.Entity.CreateDatabaseIfNotExists`1.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.CreateDatabaseIfNotExists`1" />.</summary>
    </member>
    <member name="M:System.Data.Entity.CreateDatabaseIfNotExists`1.InitializeDatabase(`0)">
      <summary>Exécute la stratégie pour initialiser la base de données pour le contexte donné. </summary>
      <param name="context">Contexte.</param>
    </member>
    <member name="M:System.Data.Entity.CreateDatabaseIfNotExists`1.Seed(`0)">
      <summary>En cas de substitution, ajoute des données au contexte pour l'alimenter.  L'implémentation par défaut n'exécute aucune opération. </summary>
      <param name="context">Contexte à alimenter.</param>
    </member>
    <member name="T:System.Data.Entity.Database">
      <summary>Une instance de cette classe est obtenue d'un objet <see cref="T:System.Data.Entity.DbContext" /> et peut être utilisée pour gérer la base de données réelle qui soutient un <see cref="T:System.Data.Entity.DbContext" /> ou une connexion. Cela inclut la création, la suppression et la recherche de l'existence d'une base de données. La suppression et la vérification de l'existence d'une base de données peuvent être effectuées à l'aide d'une seule connexion (sans un contexte complet) avec les méthodes statiques de cette classe. </summary>
    </member>
    <member name="M:System.Data.Entity.Database.CompatibleWithModel(System.Boolean)">
      <summary>Cette méthode retourne true si le contexte et la base de données contient chacun un hachage modèle et ces hachages correspondent.  Cela indique que le modèle utilisé pour créer la base de données est le même que le modèle actuel, ainsi, les deux peuvent être utilisés ensemble. </summary>
      <returns>true si le hachage modèle dans le contexte et la base de données correspondent ; sinon, false. </returns>
      <param name="throwIfNoMetadata">Si défini sur true, une exception est levée si aucune métadonnée de modèle n'est trouvée dans le modèle associé au contexte ou dans la base de données elle-même.  Si défini sur false, cette méthode retournera la valeur true si les métadonnées sont introuvables.</param>
    </member>
    <member name="P:System.Data.Entity.Database.Connection">
      <summary>Retourne la connexion qui est utilisée par ce contexte.  Cela peut provoquer l'initialisation du contexte et la création de la connexion si elle n'existe pas déjà. </summary>
      <returns>Connexion utilisée par ce contexte.</returns>
    </member>
    <member name="M:System.Data.Entity.Database.Create">
      <summary>Crée une base de données sur le serveur de bases de données pour le modèle défini dans le contexte de sauvegarde. Notez que l'appel de cette méthode avant que la stratégie d'initialisation de la base de données ne soit exécutée désactivera l'exécution de cette stratégie. </summary>
    </member>
    <member name="M:System.Data.Entity.Database.CreateIfNotExists">
      <summary>Crée une base de données sur le serveur de bases de données pour le modèle défini dans le contexte de sauvegarde, mais uniquement si une base de données avec le même nom n'existe pas déjà sur le serveur. </summary>
      <returns>true si la base de données n'existait pas et a été créée ; sinon, false.</returns>
    </member>
    <member name="P:System.Data.Entity.Database.DefaultConnectionFactory">
      <summary>Fabrique de connexions à utiliser lors de la création d'un <see cref="T:System.Data.Common.DbConnection" /> à partir d'un simple nom de base de données ou d'une simple chaîne de connexion. </summary>
      <returns>Fabrique de connexions à utiliser.</returns>
    </member>
    <member name="M:System.Data.Entity.Database.Delete">
      <summary>Supprime la base de données sur le serveur de bases de données si elle existe, sinon, aucune action n'est effectuée. </summary>
      <returns>true si la base de données existait et a été supprimée ; sinon, false.</returns>
    </member>
    <member name="M:System.Data.Entity.Database.Delete(System.Data.Common.DbConnection)">
      <summary>Supprime la base de données sur le serveur de bases de données si elle existe, sinon, aucune action n'est effectuée. </summary>
      <returns>true si la base de données existait et a été supprimée ; sinon, false.</returns>
      <param name="existingConnection">Connexion existante à la base de données.</param>
    </member>
    <member name="M:System.Data.Entity.Database.Delete(System.String)">
      <summary>Supprime la base de données sur le serveur de bases de données si elle existe, sinon, aucune action n'est effectuée. La connexion à la base de données est créée avec le nom de base de données spécifié ou la chaîne de connexion, comme décrit dans la documentation pour la classe <see cref="T:System.Data.Entity.DbContext" />. </summary>
      <returns>true si la base de données existait et a été supprimée ; sinon, false.</returns>
      <param name="nameOrConnectionString">Nom de la base de données ou chaîne de connexion vers la base de données.</param>
    </member>
    <member name="M:System.Data.Entity.Database.Equals(System.Object)">
      <summary>Indique si la base de données spécifiée est égale à la base de données actuelle.</summary>
      <returns>true si la base de données spécifiée est égale à la base de données actuelle ; sinon, false.</returns>
      <param name="obj">Base de données à comparer à l'objet actuel. </param>
    </member>
    <member name="M:System.Data.Entity.Database.ExecuteSqlCommand(System.String,System.Object[])">
      <summary>Exécute la commande DDL/DML donnée sur la base de données. </summary>
      <returns>Résultat retourné par la base de données après avoir exécuté la commande.</returns>
      <param name="sql">Chaîne de commande.</param>
      <param name="parameters">Paramètres à appliquer à la chaîne de commande.</param>
    </member>
    <member name="M:System.Data.Entity.Database.Exists">
      <summary>Vérifie si la base de données existe ou non sur le serveur. </summary>
      <returns>true si la base de données existe ; sinon, false.</returns>
    </member>
    <member name="M:System.Data.Entity.Database.Exists(System.Data.Common.DbConnection)">
      <summary>Vérifie si la base de données existe ou non sur le serveur. </summary>
      <returns>true si la base de données existe ; sinon, false.</returns>
      <param name="existingConnection">Connexion existante à la base de données.</param>
    </member>
    <member name="M:System.Data.Entity.Database.Exists(System.String)">
      <summary>Vérifie si la base de données existe ou non sur le serveur. La connexion à la base de données est créée avec le nom de base de données spécifié ou la chaîne de connexion, comme décrit dans la documentation pour la classe <see cref="T:System.Data.Entity.DbContext" />. </summary>
      <returns>true si la base de données existe ; sinon, false.</returns>
      <param name="nameOrConnectionString">Nom de la base de données ou chaîne de connexion vers la base de données.</param>
    </member>
    <member name="M:System.Data.Entity.Database.GetHashCode">
      <summary>Retourne la fonction de hachage pour la base de données spécifiée.</summary>
      <returns>Fonction de hachage pour la base de données spécifiée.</returns>
    </member>
    <member name="M:System.Data.Entity.Database.GetType">
      <summary>Obtient le type de la base de données actuelle.</summary>
      <returns>Type de la base de données actuelle.</returns>
    </member>
    <member name="M:System.Data.Entity.Database.Initialize(System.Boolean)">
      <summary>Exécute le <see cref="T:System.Data.Entity.IDatabaseInitializer`1" /> enregistré sur ce contexte.  Si le paramètre <paramref name="force" /> est défini sur true, l'initialiseur est exécuté qu'il ait ou n'ait pas déjà été exécuté.  Cela peut être utile si une base de données est supprimée pendant qu'une application s'exécute et doit être réinitialisée. </summary>
      <param name="force">Si défini sur true, l'initialiseur est exécuté même s'il a déjà été exécuté.</param>
    </member>
    <member name="M:System.Data.Entity.Database.SetInitializer``1(System.Data.Entity.IDatabaseInitializer{``0})">
      <summary>Obtient ou définit la stratégie d'initialisation de la base de données. La stratégie d'initialisation de la base de données est appelée lorsque l'instance <see cref="T:System.Data.Entity.DbContext" /> est initialisée à partir d'un <see cref="T:System.Data.Entity.Infrastructure.DbCompiledModel" />.  </summary>
      <param name="strategy">Stratégie.</param>
      <typeparam name="TContext">Type du contexte.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Database.SqlQuery``1(System.String,System.Object[])">
      <summary>Crée une requête SQL brute qui retournera des éléments du type générique donné. Le type peut être tout type possédant des propriétés correspondantes aux noms des colonnes retournées par la requête, ou peut être un type primitif simple. </summary>
      <returns>Objet <see cref="T:System.Collections.Generic.IEnumerable`1" /> qui exécute la requête lorsqu'il est énuméré.</returns>
      <param name="sql">Chaîne de requête SQL.</param>
      <param name="parameters">Paramètres à appliquer à la chaîne de requête SQL.</param>
      <typeparam name="TElement">Type d'objet retourné par la requête.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Database.SqlQuery(System.Type,System.String,System.Object[])">
      <summary>Crée une requête SQL brute qui retournera des éléments du type donné. Le type peut être tout type possédant des propriétés correspondantes aux noms des colonnes retournées par la requête, ou peut être un type primitif simple. </summary>
      <returns>Objet <see cref="T:System.Collections.IEnumerable" /> qui exécute la requête lorsqu'il est énuméré.</returns>
      <param name="elementType">Type d'objet retourné par la requête.</param>
      <param name="sql">Chaîne de requête SQL.</param>
      <param name="parameters">Paramètres à appliquer à la chaîne de requête SQL.</param>
    </member>
    <member name="M:System.Data.Entity.Database.ToString">
      <summary>Retourne une représentation sous forme de chaîne de la base de données.</summary>
      <returns>Représentation sous forme de chaîne de la base de données.</returns>
    </member>
    <member name="T:System.Data.Entity.DbContext">
      <summary>Procure des fonctionnalités permettant d'interroger et d'utiliser des données d'entités en tant qu'objets.</summary>
    </member>
    <member name="M:System.Data.Entity.DbContext.#ctor">
      <summary>Construit une nouvelle instance de contexte à l'aide de conventions pour créer le nom de la base de données sur laquelle une connexion sera établie.  Par convention, le nom est le nom complet (espace de noms + nom de classe) de la classe de contexte dérivée. Pour plus d'informations sur la façon d'utiliser cela pour créer une connexion, consultez la section Remarques pour <see cref="T:System.Data.Entity.DbContext" />. </summary>
    </member>
    <member name="M:System.Data.Entity.DbContext.#ctor(System.Data.Common.DbConnection,System.Boolean)">
      <summary>Construit une nouvelle instance de contexte à l'aide de la connexion existante pour se connecter à une base de données. La connexion ne sera pas supprimée en même temps que le contexte. </summary>
      <param name="existingConnection">Connexion existante à utiliser pour le nouveau contexte.</param>
      <param name="contextOwnsConnection">Si défini sur true, la connexion est supprimée en même temps que le contexte, sinon, l'appelant doit supprimer la connexion.</param>
    </member>
    <member name="M:System.Data.Entity.DbContext.#ctor(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.DbCompiledModel,System.Boolean)">
      <summary>Construit une nouvelle instance de contexte à l'aide de la connexion existante pour la connexion à une base de données, et l'initialise à partir du modèle donné. La connexion ne sera pas supprimée en même temps que le contexte. </summary>
      <param name="existingConnection">Connexion existante à utiliser pour le nouveau contexte.</param>
      <param name="model">Modèle qui soutiendra ce contexte.</param>
      <param name="contextOwnsConnection">Si défini sur true, la connexion est supprimée en même temps que le contexte, sinon, l'appelant doit supprimer la connexion.</param>
    </member>
    <member name="M:System.Data.Entity.DbContext.#ctor(System.Data.Entity.Infrastructure.DbCompiledModel)">
      <summary>Construit une nouvelle instance de contexte à l'aide de conventions pour créer le nom de la base de données sur laquelle une connexion sera établie et l'initialise à partir du modèle donné. Par convention, le nom est le nom complet (espace de noms + nom de classe) de la classe de contexte dérivée. Pour plus d'informations sur la façon d'utiliser cela pour créer une connexion, consultez la section Remarques pour <see cref="T:System.Data.Entity.DbContext" />.</summary>
      <param name="model">Modèle qui soutiendra ce contexte.</param>
    </member>
    <member name="M:System.Data.Entity.DbContext.#ctor(System.Data.Objects.ObjectContext,System.Boolean)">
      <summary>Construit une nouvelle instance de contexte autour d'un <see cref="P:System.Data.Entity.Infrastructure.IObjectContextAdapter.ObjectContext" /> existant.  </summary>
      <param name="objectContext">
        <see cref="P:System.Data.Entity.Infrastructure.IObjectContextAdapter.ObjectContext" /> existant pour encapsuler le nouveau contexte.</param>
      <param name="dbContextOwnsObjectContext">Si défini sur true, le <see cref="P:System.Data.Entity.Infrastructure.IObjectContextAdapter.ObjectContext" /> est supprimé en même temps que le <see cref="T:System.Data.Entity.DbContext" />, sinon, l'appelant doit supprimer la connexion.</param>
    </member>
    <member name="M:System.Data.Entity.DbContext.#ctor(System.String)">
      <summary>Construit une nouvelle instance de contexte à l'aide de la chaîne donnée, comme le nom ou la chaîne de connexion de la base de données sur laquelle une connexion sera établie. Pour plus d'informations sur la façon d'utiliser cela pour créer une connexion, consultez la section Remarques pour <see cref="T:System.Data.Entity.DbContext" />.</summary>
      <param name="nameOrConnectionString">Nom de la base de données ou une chaîne de connexion.</param>
    </member>
    <member name="M:System.Data.Entity.DbContext.#ctor(System.String,System.Data.Entity.Infrastructure.DbCompiledModel)">
      <summary>Construit une nouvelle instance de contexte à l'aide de la chaîne donnée, comme le nom ou la chaîne de connexion de la base de données sur laquelle une connexion sera établie, et l'initialise pour le modèle donné. Pour plus d'informations sur la façon d'utiliser cela pour créer une connexion, consultez la section Remarques pour <see cref="T:System.Data.Entity.DbContext" />. </summary>
      <param name="nameOrConnectionString">Nom de la base de données ou une chaîne de connexion.</param>
      <param name="model">Modèle qui soutiendra ce contexte.</param>
    </member>
    <member name="P:System.Data.Entity.DbContext.ChangeTracker">
      <summary>Fournit l'accès aux fonctionnalités du contexte relatives au suivi des modifications d'entités. </summary>
      <returns>Objet utilisé pour accéder aux fonctionnalités relatives au suivi des modifications.</returns>
    </member>
    <member name="P:System.Data.Entity.DbContext.Configuration">
      <summary>Fournit l'accès aux options de configuration pour le contexte. </summary>
      <returns>Objet utilisé pour accéder aux options de configuration.</returns>
    </member>
    <member name="P:System.Data.Entity.DbContext.Database">
      <summary>Crée une instance de base de données pour ce contexte et vous permet de créer, supprimer ou vérifier l'existence de la base de données sous-jacente. </summary>
      <returns>Base de données créée.</returns>
    </member>
    <member name="M:System.Data.Entity.DbContext.Dispose">
      <summary>Appelle la méthode Dispose protégée. </summary>
    </member>
    <member name="M:System.Data.Entity.DbContext.Dispose(System.Boolean)">
      <summary>Supprime le contexte. Le <see cref="T:System.Data.Objects.ObjectContext" /> sous-jacent est également supprimé s'il a été créé par ce contexte ou si la propriété a été passée à ce contexte lorsque ce contexte a été créé. La connexion à la base de données (objet <see cref="T:System.Data.Common.DbConnection" /> ) est également supprimée si elle a été créé par ce contexte ou si la propriété a été passée à ce contexte lorsque ce contexte a été créé. </summary>
      <param name="disposing">true pour libérer les ressources managées et non managées ; false pour libérer uniquement les ressources non managées.</param>
    </member>
    <member name="M:System.Data.Entity.DbContext.Entry(System.Object)">
      <summary>Obtient un objet <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" /> pour l'entité spécifique, qui fournit l'accès aux informations sur l'entité et la capacité d'effectuer des actions sur l'entité. </summary>
      <returns>Entrée de l'entité.</returns>
      <param name="entity">Entité.</param>
    </member>
    <member name="M:System.Data.Entity.DbContext.Entry``1(``0)">
      <summary>Obtient un objet <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" /> pour l'entité spécifique, qui fournit l'accès aux informations sur l'entité et la capacité d'effectuer des actions sur l'entité. </summary>
      <returns>Entrée de l'entité.</returns>
      <param name="entity">Entité.</param>
      <typeparam name="TEntity">Type de l'entité.</typeparam>
    </member>
    <member name="M:System.Data.Entity.DbContext.Equals(System.Object)">
      <summary>Détermine si le contexte spécifié est égal au contexte actuel.</summary>
      <returns>true si le contexte spécifié est égal au contexte actuel ; sinon, false.</returns>
      <param name="obj">Contexte à comparer à l'objet actuel. </param>
    </member>
    <member name="M:System.Data.Entity.DbContext.GetHashCode">
      <summary>Retourne la fonction de hachage pour le contexte spécifié.</summary>
      <returns>Fonction de hachage pour le contexte spécifié.</returns>
    </member>
    <member name="M:System.Data.Entity.DbContext.GetType">
      <summary>Obtient le type du contexte actuel.</summary>
      <returns>Type du contexte actuel.</returns>
    </member>
    <member name="M:System.Data.Entity.DbContext.GetValidationErrors">
      <summary>Valide des entités suivies et retourne une collection de <see cref="T:System.Data.Entity.Validation.DbEntityValidationResult" /> qui contient les résultats de la validation. </summary>
      <returns>Collection de résultats de la validation pour les entités non valides. La collection n'est jamais null et ne doit pas contenir de valeurs null ou de résultats pour les entités valides. </returns>
    </member>
    <member name="M:System.Data.Entity.DbContext.OnModelCreating(System.Data.Entity.DbModelBuilder)">
      <summary>Cette méthode est appelée lorsque le modèle d'un contexte dérivé a été initialisé, mais avant que le modèle ne soit verrouillé et utilisé pour initialiser le contexte.  L'implémentation par défaut de cette méthode n'a aucun effet, mais elle peut être substituée dans une classe dérivée afin que le modèle puisse être configuré ultérieurement avant qu'il ne soit verrouillé. </summary>
      <param name="modelBuilder">Générateur qui définit le modèle pour le contexte créé.</param>
    </member>
    <member name="M:System.Data.Entity.DbContext.SaveChanges">
      <summary>Enregistre toutes les modifications effectuées dans ce contexte dans la base de données sous-jacente. </summary>
      <returns>Nombre d'objets écrit dans la base de données sous-jacente.</returns>
    </member>
    <member name="M:System.Data.Entity.DbContext.Set``1">
      <summary>Retourne <see cref="T:System.Data.Entity.DbSet" /> pour le type spécifié. Cela permet aux opérations de création, de lecture, de mise à jour et de suppression d'être effectuées pour l'entité spécifique dans le contexte. </summary>
      <returns>Instance <see cref="T:System.Data.Entity.DbSet" /> pour le type d'entité donné.</returns>
      <typeparam name="TEntity">Type d'entité pour lequel un ensemble doit être retourné.</typeparam>
    </member>
    <member name="M:System.Data.Entity.DbContext.Set(System.Type)">
      <summary>Retourne <see cref="T:System.Data.Entity.DbSet" /> pour le type spécifié. Cela permet aux opérations de création, de lecture, de mise à jour et de suppression d'être effectuées pour l'entité spécifique dans le contexte. </summary>
      <returns>Un <see cref="T:System.Data.Entity.DbSet" /> pour le type d'entité donné.</returns>
      <param name="entityType">Type d'entité pour lequel un ensemble doit être retourné.</param>
    </member>
    <member name="M:System.Data.Entity.DbContext.ShouldValidateEntity(System.Data.Entity.Infrastructure.DbEntityEntry)">
      <summary>Point d'extension qui autorise l'utilisateur à substituer le comportement par défaut de la validation des entités ajoutées ou modifiées uniquement. </summary>
      <returns>true pour poursuivre la validation, sinon false.</returns>
      <param name="entityEntry">Instance <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" /> supposée être validée.</param>
    </member>
    <member name="P:System.Data.Entity.DbContext.System#Data#Entity#Infrastructure#IObjectContextAdapter#ObjectContext">
      <summary>Retourne l'Entity Framework <see cref="T:System.Data.Objects.ObjectContext" /> qui est sous ce contexte.</summary>
      <returns>retourne <see cref="T:System.Data.Objects.ObjectContext" />.</returns>
    </member>
    <member name="M:System.Data.Entity.DbContext.ToString">
      <summary>Retourne une représentation sous forme du contexte.</summary>
      <returns>Représentation sous forme de chaîne du contexte.</returns>
    </member>
    <member name="M:System.Data.Entity.DbContext.ValidateEntity(System.Data.Entity.Infrastructure.DbEntityEntry,System.Collections.Generic.IDictionary{System.Object,System.Object})">
      <summary>Point d'extension qui permet à l'utilisateur de personnaliser la validation d'une entité ou de filtrer les résultats de la validation. Appelée par <see cref="M:System.Data.Entity.DbContext.GetValidationErrors" />. </summary>
      <returns>Résultat de la validation d'entité. Peut être null en cas de substitution.</returns>
      <param name="entityEntry">Instance DbEntityEntry à valider.</param>
      <param name="items">Dictionnaire défini par l'utilisateur qui contient des informations supplémentaires sur la validation personnalisée. Il sera passé à <see cref="T:System.ComponentModel.DataAnnotations.ValidationContext" /> et sera exposé en tant que <see cref="P:System.ComponentModel.DataAnnotations.ValidationContext.Items" />. Ce paramètre est facultatif et peut avoir la valeur null.</param>
    </member>
    <member name="T:System.Data.Entity.DbExtensions">
      <summary>Contient un ensemble de méthodes d'extension qui vous assistent lors des tâches courantes.</summary>
    </member>
    <member name="M:System.Data.Entity.DbExtensions.AsNoTracking(System.Linq.IQueryable)">
      <summary>Retourne une nouvelle requête où les entités retournées ne seront pas mises en cache dans le <see cref="T:System.Data.Entity.DbContext" /> ou <see cref="T:System.Data.Objects.ObjectContext" />. </summary>
      <returns>Une nouvelle requête avec NoTracking est appliquée, ou la source lance une requête si NoTracking n'est pas pris en charge.</returns>
      <param name="source">Requête source.</param>
    </member>
    <member name="M:System.Data.Entity.DbExtensions.AsNoTracking``1(System.Linq.IQueryable{``0})">
      <summary>Retourne une nouvelle requête où les entités retournées ne seront pas mises en cache dans le <see cref="T:System.Data.Entity.DbContext" /> ou <see cref="T:System.Data.Objects.ObjectContext" />. </summary>
      <returns>Une nouvelle requête avec NoTracking est appliquée, ou la source lance une requête si NoTracking n'est pas pris en charge.</returns>
      <param name="source">Requête source.</param>
      <typeparam name="T">Type de l'élément.</typeparam>
    </member>
    <member name="M:System.Data.Entity.DbExtensions.Include(System.Linq.IQueryable,System.String)">
      <summary>Spécifie les objets connexes à inclure dans les résultats de la requête.</summary>
      <returns>Nouvel objet IQueryable avec le chemin d'accès de requête défini.</returns>
      <param name="source">IQueryable source sur lequel appeler Include.</param>
      <param name="path">Liste d'objets connexes, séparés par des points, à retourner dans les résultats de la requête.</param>
    </member>
    <member name="M:System.Data.Entity.DbExtensions.Include``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>Spécifie les objets connexes à inclure dans les résultats de la requête.</summary>
      <returns>Nouveau IQueryable de T avec le chemin d'accès de la requête défini.</returns>
      <param name="source">IQueryable source sur lequel appeler Include.</param>
      <param name="path">Expression lambda qui représente le chemin d'accès à inclure.</param>
      <typeparam name="T">Type de l'entité demandée.</typeparam>
      <typeparam name="TProperty">Type de la propriété de navigation incluse.</typeparam>
    </member>
    <member name="M:System.Data.Entity.DbExtensions.Include``1(System.Linq.IQueryable{``0},System.String)">
      <summary>Spécifie les objets connexes à inclure dans les résultats de la requête.</summary>
      <returns>Nouveau IQueryable de T avec le chemin d'accès de la requête défini.</returns>
      <param name="source">IQueryable source sur lequel appeler Include.</param>
      <param name="path">Liste d'objets connexes, séparés par des points, à retourner dans les résultats de la requête.</param>
      <typeparam name="T">Type de l'entité demandée.</typeparam>
    </member>
    <member name="M:System.Data.Entity.DbExtensions.Load(System.Linq.IQueryable)">
      <summary>Méthode d'extension sur IQueryable qui énumère les résultats de la requête. C'est équivalent à l'appel de ToList sans création de liste réelle. </summary>
      <param name="source">Requête source.</param>
    </member>
    <member name="M:System.Data.Entity.DbExtensions.ToBindingList``1(System.Collections.ObjectModel.ObservableCollection{``0})">
      <summary> Retourne une implémentation <see cref="T:System.ComponentModel.BindingList`1" /> qui reste synchronisée avec le <see cref="T:System.Collections.ObjectModel.ObservableCollection`1" /> donné. </summary>
      <returns>Liste de liaison.</returns>
      <param name="source">Collection avec laquelle la liste de liaison restera synchronisée.</param>
      <typeparam name="T">Type de l'élément.</typeparam>
    </member>
    <member name="T:System.Data.Entity.DbModelBuilder">
      <summary>
        <see cref="T:System.Data.Entity.DbModelBuilder" /> est utilisé pour mapper des classes CLR à un schéma de base de données. Cette approche centrée sur le code pour générer un modèle EDM (Entity Data Model) est appelée Code First. </summary>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.DbModelBuilder" />. Le processus de découverte du modèle initial utilise l'ensemble de conventions inclus dans la dernière version de l'Entity Framework installée sur votre ordinateur.  </summary>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.#ctor(System.Data.Entity.DbModelBuilderVersion)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.DbModelBuilder" /> qui utilisera un ensemble spécifique de conventions pour découvrir le modèle initial. </summary>
      <param name="modelBuilderVersion">Version des conventions à utiliser.</param>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.Build(System.Data.Common.DbConnection)">
      <summary>Crée un <see cref="T:System.Data.Entity.Infrastructure.DbModel" /> selon la configuration créée à l'aide de ce générateur. La connexion est utilisée pour déterminer le fournisseur de bases de données utilisé, car cela affecte la couche de base de données du modèle généré. </summary>
      <returns>Modèle construit.</returns>
      <param name="providerConnection">Connexion à utiliser pour déterminer les informations sur le fournisseur de services.</param>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.Build(System.Data.Entity.Infrastructure.DbProviderInfo)">
      <summary>Crée un <see cref="T:System.Data.Entity.Infrastructure.DbModel" /> selon la configuration créée à l'aide de ce générateur. Les informations sur le fournisseur de services doivent être spécifiées parce que cela affecte la couche de base de données du modèle généré. Pour SqlClient le nom invariant est « System.Data.SqlClient » et le jeton de manifeste est l'année de version (par exemple, « 2005 » ou « 2008 ».) </summary>
      <returns>Modèle construit.</returns>
      <param name="providerInfo">Fournisseur de bases de données avec lequel le modèle est utilisé.</param>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.ComplexType``1">
      <summary>Enregistre un type en tant que type complexe dans le modèle et retourne un objet qui peut être utilisé pour configurer le type complexe. Cette méthode peut être appelée plusieurs fois pour le même type pour créer plusieurs lignes de configuration. </summary>
      <returns>Objet de configuration pour le type complexe spécifié.</returns>
      <typeparam name="TComplexType">Type à enregistrer ou configurer.</typeparam>
    </member>
    <member name="P:System.Data.Entity.DbModelBuilder.Configurations">
      <summary>Obtient le <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConfigurationRegistrar" /> pour ce <see cref="T:System.Data.Entity.DbModelBuilder" />.  Le registre autorise l'enregistrement d'une entité dérivée et de configurations de type complexe avec ce générateur. </summary>
      <returns>Options de configuration du <see cref="T:System.Data.Entity.DbModelBuilder" />.</returns>
    </member>
    <member name="P:System.Data.Entity.DbModelBuilder.Conventions">
      <summary>Fournit l'accès aux paramètres de ce <see cref="T:System.Data.Entity.DbModelBuilder" /> relatif aux conventions. </summary>
      <returns>accès au paramètre</returns>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.Entity``1">
      <summary>Enregistre un type d'entité dans le cadre du modèle et retourne un objet qui peut être utilisé pour configurer l'entité. Cette méthode peut être appelée plusieurs fois pour la même entité, pour créer plusieurs lignes de configuration. </summary>
      <returns>Objet de configuration pour le type d'entité spécifié.</returns>
      <typeparam name="TEntityType">Type à enregistrer ou configurer.</typeparam>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.Equals(System.Object)">
      <summary>Indique si le générateur de modèles spécifié est égal au générateur de modèles actuel.</summary>
      <returns>true si le générateur de modèles spécifié est égal au générateur de modèles actuel ; sinon, false.</returns>
      <param name="obj">Générateur de modèles à comparer à l'objet actuel. </param>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.GetHashCode">
      <summary>Retourne la fonction de hachage pour le générateur de modèles spécifié.</summary>
      <returns>Fonction de hachage pour le générateur de modèles spécifié.</returns>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.GetType">
      <summary>Obtient le type de générateur de modèles actuel.</summary>
      <returns>Type de générateur de modèles actuel.</returns>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.Ignore``1">
      <summary>Exclut un type du modèle. Cela est utilisé pour supprimer des types du modèle, ajoutés par convention pendant la découverte initiale du modèle. </summary>
      <returns>Même instance <see cref="T:System.Data.Entity.DbModelBuilder" /> qui permet de chaîner plusieurs appels.</returns>
      <typeparam name="T">Type à exclure.</typeparam>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.Ignore(System.Collections.Generic.IEnumerable{System.Type})">
      <summary>Exclut un type ou des types du modèle. Cela est utilisé pour supprimer des types du modèle, ajoutés par convention pendant la découverte initiale du modèle. </summary>
      <returns>Même instance <see cref="T:System.Data.Entity.DbModelBuilder" /> qui permet de chaîner plusieurs appels.</returns>
      <param name="types">Types à exclure du modèle.</param>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.ToString">
      <summary>Retourne une chaîne représentant le générateur de modèles.</summary>
      <returns>Représentation sous forme de chaîne du générateur de modèles.</returns>
    </member>
    <member name="T:System.Data.Entity.DbModelBuilderVersion">
      <summary>Une valeur de cette énumération peut être fournie directement à la classe <see cref="T:System.Data.Entity.DbModelBuilder" /> ou peut être utilisée dans le <see cref="T:System.Data.Entity.DbModelBuilderVersionAttribute" /> appliqué à une classe dérivée de <see cref="T:System.Data.Entity.DbContext" />. La valeur utilisée définit quelle version des conventions <see cref="T:System.Data.Entity.DbModelBuilder" /> et <see cref="T:System.Data.Entity.DbContext" /> doit être utilisée lors de la génération d'un modèle de code. </summary>
    </member>
    <member name="F:System.Data.Entity.DbModelBuilderVersion.Latest">
      <summary>Indique que la version la plus récente des conventions <see cref="T:System.Data.Entity.DbContext" /> et <see cref="T:System.Data.Entity.DbModelBuilder" /> doit être utilisée. </summary>
    </member>
    <member name="F:System.Data.Entity.DbModelBuilderVersion.V4_1">
      <summary>Indique que la version des conventions <see cref="T:System.Data.Entity.DbContext" /> et <see cref="T:System.Data.Entity.DbModelBuilder" /> fournie avec Entity Framework v4.1 doit être utilisée. </summary>
    </member>
    <member name="F:System.Data.Entity.DbModelBuilderVersion.V5_0_Net4">
      <summary>Indique que la version des conventions <see cref="T:System.Data.Entity.DbContext" /> et <see cref="T:System.Data.Entity.DbModelBuilder" /> fournie avec Entity Framework v5.0 lorsque vous cibles .NET Framework 4 doit être utilisée. </summary>
    </member>
    <member name="F:System.Data.Entity.DbModelBuilderVersion.V5_0">
      <summary>Indique que la version des conventions <see cref="T:System.Data.Entity.DbContext" /> et <see cref="T:System.Data.Entity.DbModelBuilder" /> fournie avec Entity Framework v5.0 doit être utilisée. </summary>
    </member>
    <member name="T:System.Data.Entity.DbModelBuilderVersionAttribute">
      <summary>Cet attribut peut être appliqué à une classe dérivée de <see cref="T:System.Data.Entity.DbContext" /> pour définir quelle version des conventions <see cref="T:System.Data.Entity.DbModelBuilder" /> et <see cref="T:System.Data.Entity.DbContext" /> doit être utilisée lors de la génération d'un modèle de code. Voyez l'énumération <see cref="T:System.Data.Entity.DbModelBuilderVersion" /> pour plus d'informations sur les versions <see cref="T:System.Data.Entity.DbModelBuilder" />. </summary>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilderVersionAttribute.#ctor(System.Data.Entity.DbModelBuilderVersion)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.DbModelBuilderVersionAttribute" />. </summary>
      <param name="version">Version des conventions <see cref="T:System.Data.Entity.DbModelBuilder" /> à utiliser.</param>
    </member>
    <member name="P:System.Data.Entity.DbModelBuilderVersionAttribute.Version">
      <summary>Obtient la version des conventions <see cref="T:System.Data.Entity.DbModelBuilder" />. </summary>
      <returns>Version des conventions <see cref="T:System.Data.Entity.DbModelBuilder" />.</returns>
    </member>
    <member name="T:System.Data.Entity.DbSet">
      <summary>Représente un jeu d'entités utilisé pour exécuter des opérations de création, de lecture, de mise à jour et de suppression. Version non générique de <see cref="T:System.Data.Entity.DbSet`1" /> qui peut être utilisée lorsque le type d'entité n'est pas connu au moment de la génération. </summary>
    </member>
    <member name="M:System.Data.Entity.DbSet.Add(System.Object)">
      <summary>Ajoute l'entité donnée au contexte à l'état <see cref="F:System.Data.EntityState.Added" />. Lors de l'enregistrement des modifications, les entités à l'état Added sont insérées dans la base de données. Une fois les modifications enregistrées, l'état de l'objet passe à <see cref="F:System.Data.EntityState.Unchanged" />.</summary>
      <returns>Entité.</returns>
      <param name="entity">Entité à ajouter.</param>
    </member>
    <member name="M:System.Data.Entity.DbSet.Attach(System.Object)">
      <summary>Joint l'entité spécifique au contexte à l'état <see cref="F:System.Data.EntityState.Unchanged" /></summary>
      <returns>Entité.</returns>
      <param name="entity">Entité à joindre.</param>
    </member>
    <member name="M:System.Data.Entity.DbSet.Cast``1">
      <summary>Retourne l'objet <see cref="T:System.Data.Entity.DbSet`1" /> générique équivalent. </summary>
      <returns>Objet défini générique.</returns>
      <typeparam name="TEntity">Type de base de l'objet à transtyper à l'objet défini générique.</typeparam>
    </member>
    <member name="M:System.Data.Entity.DbSet.Create">
      <summary>Crée une nouvelle instance d'une entité pour le type de ce jeu. Cette instance n'est pas ajoutée ou jointe au jeu. L'instance retournée sera un proxy si le contexte sous-jacent est configuré pour créer des proxys et si le type d'entité satisfait les spécifications pour la création d'un proxy. </summary>
      <returns>Instance d'entité, qui peut être un proxy.</returns>
    </member>
    <member name="M:System.Data.Entity.DbSet.Create(System.Type)">
      <summary>Crée une nouvelle instance d'une entité pour le type de ce jeu ou pour un type dérivé du type de ce jeu. Cette instance n'est pas ajoutée ou jointe au jeu. L'instance retournée sera un proxy si le contexte sous-jacent est configuré pour créer des proxys et si le type d'entité satisfait les spécifications pour la création d'un proxy. </summary>
      <returns>Instance d'entité, qui peut être un proxy. </returns>
      <param name="derivedEntityType">Type d'entité dérivé.</param>
    </member>
    <member name="M:System.Data.Entity.DbSet.Equals(System.Object)">
      <summary>Détermine si le jeu spécifié est égal au jeu actuel.</summary>
      <returns>true si l'objet spécifié est égal au jeu actuel ; sinon, false.</returns>
      <param name="obj">Jeu à comparer à l'objet actuel. </param>
    </member>
    <member name="M:System.Data.Entity.DbSet.Find(System.Object[])">
      <summary>Utilise la valeur de clé primaire pour tenter de trouver une entité faisant l'objet d'un suivi par le contexte. Si l'entité ne se trouve pas dans le contexte, une requête est exécutée et évaluée par rapport aux données de la source de données. La valeur Null est ensuite retournée si l'entité n'est pas trouvée dans le contexte ou dans la source de données. Notez que la méthode Find retourne également des entités qui ont été ajoutées au contexte, mais n'ont pas encore été enregistrées dans la base de données.</summary>
      <returns>Entité trouvée, ou bien une valeur null.</returns>
      <param name="keyValues">Valeurs de la clé primaire de l'entité à rechercher.</param>
    </member>
    <member name="M:System.Data.Entity.DbSet.GetHashCode">
      <summary>Retourne la fonction de hachage pour le jeu spécifié.</summary>
      <returns>Fonction de hachage pour le jeu spécifié.</returns>
    </member>
    <member name="M:System.Data.Entity.DbSet.GetType">
      <summary>Obtient le type de jeu actuel.</summary>
      <returns>Type du jeu actuel.</returns>
    </member>
    <member name="P:System.Data.Entity.DbSet.Local">
      <summary>Retourne <see cref="T:System.Collections.ObjectModel.ObservableCollection`1" /> qui représente les entités de ce jeu faisant actuellement l'objet d'un suivi par le contexte et n'étant pas marquées comme supprimées. L'accès à la propriété locale n'entraîne jamais l'envoi d'une requête à la base de données. Cette propriété est généralement utilisée après l'exécution d'une requête.</summary>
      <returns>Vue locale.</returns>
    </member>
    <member name="M:System.Data.Entity.DbSet.Remove(System.Object)">
      <summary>Marque l'entité donnée comme <see cref="F:System.Data.EntityState.Deleted" />. Lorsque les modifications sont enregistrées, l'entité est supprimée de la base de données. L'entité doit exister dans le contexte dans un autre état avant que cette méthode ne soit appelée. </summary>
      <returns>Entité.</returns>
      <param name="entity">Entité à supprimer.</param>
    </member>
    <member name="M:System.Data.Entity.DbSet.SqlQuery(System.String,System.Object[])">
      <summary>Crée une requête SQL brute qui retournera des entités dans ce jeu. Par défaut, les entités retournées sont suivies par le contexte ; cela peut être modifié en appelant AsNoTracking sur le <see cref="T:System.Data.Entity.Infrastructure.DbSqlQuery`1" /> retourné par cette méthode. </summary>
      <returns>Objet <see cref="T:System.Data.Entity.Infrastructure.DbSqlQuery" /> qui exécute la requête lorsqu'il est énuméré.</returns>
      <param name="sql">Chaîne de requête SQL.</param>
      <param name="parameters">Paramètres à appliquer à la chaîne de requête SQL.</param>
    </member>
    <member name="T:System.Data.Entity.DbSet`1">
      <summary>Représente un jeu d'entités typées utilisé pour exécuter des opérations de création, de lecture, de mise à jour et de suppression. DbSet ne peut pas être construit publiquement et peut uniquement être créé à partir d'une instance <see cref="T:System.Data.Entity.DbContext" />. </summary>
      <typeparam name="TEntity">Type qui définit l'ensemble. Le type peut être dérivé ou de base.</typeparam>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.Add(`0)">
      <summary>Ajoute l'entité donnée au contexte à l'état <see cref="F:System.Data.EntityState.Added" />. Lors de l'enregistrement des modifications, les entités à l'état Added sont insérées dans la base de données. Une fois les modifications enregistrées, l'état de l'objet passe à <see cref="F:System.Data.EntityState.Unchanged" />.</summary>
      <returns>Retourne <see cref="{0}" />.</returns>
      <param name="entity">Entité à ajouter.</param>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.Attach(`0)">
      <summary>Joint l'entité spécifique au contexte à l'état <see cref="F:System.Data.EntityState.Unchanged" /></summary>
      <returns>Retourne <see cref="{0}" />.</returns>
      <param name="entity">Entité à joindre.</param>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.Create``1">
      <summary>Crée une nouvelle instance d'une entité pour le type de ce jeu ou pour un type dérivé du type de ce jeu. Cette instance n'est pas ajoutée ou jointe au jeu. L'instance retournée sera un proxy si le contexte sous-jacent est configuré pour créer des proxys et si le type d'entité satisfait les spécifications pour la création d'un proxy. </summary>
      <returns>Retourne <see cref="{0}" />.</returns>
      <typeparam name="TDerivedEntity">Type qui définit l'ensemble.</typeparam>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.Create">
      <summary>Crée une nouvelle instance d'une entité pour le type de ce jeu. Cette instance n'est pas ajoutée ou jointe au jeu. L'instance retournée sera un proxy si le contexte sous-jacent est configuré pour créer des proxys et si le type d'entité satisfait les spécifications pour la création d'un proxy. </summary>
      <returns>Retourne <see cref="{0}" />.</returns>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.Equals(System.Object)">
      <summary>Détermine si l'objet spécifié est égal au jeu actuel.</summary>
      <returns>true si le jeu spécifié est égal à l'objet actuel ; sinon, false.</returns>
      <param name="obj">Jeu à comparer à l'objet actuel. </param>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.Find(System.Object[])">
      <summary>Utilise la valeur de clé primaire pour tenter de trouver une entité faisant l'objet d'un suivi par le contexte. Si l'entité ne se trouve pas dans le contexte, une requête est exécutée et évaluée par rapport aux données de la source de données. La valeur Null est ensuite retournée si l'entité n'est pas trouvée dans le contexte ou dans la source de données. Notez que la méthode Find retourne également des entités qui ont été ajoutées au contexte, mais n'ont pas encore été enregistrées dans la base de données.</summary>
      <returns>Retourne <see cref="T:System.Boolean" />.</returns>
      <param name="keyValues">Valeurs de la clé primaire de l'entité à rechercher.</param>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.GetHashCode">
      <summary>Retourne la fonction de hachage pour le jeu spécifié.</summary>
      <returns>Fonction de hachage pour le jeu spécifié.</returns>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.GetType">
      <summary>Obtient le type de jeu actuel.</summary>
      <returns>Type du jeu actuel.</returns>
    </member>
    <member name="P:System.Data.Entity.DbSet`1.Local">
      <summary>Retourne <see cref="T:System.Collections.ObjectModel.ObservableCollection`1" /> qui représente les entités de ce jeu faisant actuellement l'objet d'un suivi par le contexte et n'étant pas marquées comme supprimées. L'accès à la propriété locale n'entraîne jamais l'envoi d'une requête à la base de données. Cette propriété est généralement utilisée après l'exécution d'une requête.</summary>
      <returns>Vue locale.</returns>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.op_Implicit(System.Data.Entity.DbSet{`0})~System.Data.Entity.DbSet">
      <summary>Retourne le <see cref="T:System.Data.Entity.DbSet" /> non générique équivalent.</summary>
      <returns>Retourne l'objet défini non générique <see cref="T:System.Data.Entity.DbSet" />.</returns>
      <param name="entry">Entrée pour laquelle le <see cref="T:System.Data.Entity.DbSet" /> non générique équivalent sera retourné.</param>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.Remove(`0)">
      <summary>Marque l'entité donnée comme <see cref="F:System.Data.EntityState.Deleted" />. Lorsque les modifications sont enregistrées, l'entité est supprimée de la base de données. L'entité doit exister dans le contexte dans un autre état avant que cette méthode ne soit appelée. </summary>
      <returns>Retourne un <see cref="T:System.Data.Entity.DbSet" />.</returns>
      <param name="entity">Entité à supprimer.</param>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.SqlQuery(System.String,System.Object[])">
      <summary>Crée une requête SQL brute qui retournera des entités dans ce jeu. Par défaut, les entités retournées sont suivies par le contexte ; cela peut être modifié en appelant AsNoTracking sur le <see cref="T:System.Data.Entity.Infrastructure.DbSqlQuery`1" /> retourné par cette méthode. </summary>
      <returns>Objet <see cref="T:System.Data.Entity.Infrastructure.DbSqlQuery`1" /> qui exécute la requête lorsqu'il est énuméré.</returns>
      <param name="sql">Chaîne de requête SQL.</param>
      <param name="parameters">Les entités retournées sont toujours du type de ce jeu et jamais d'un type dérivé. Si la table ou les tables interrogées peuvent contenir des données pour d'autres types d'entités, la requête SQL doit être écrite convenablement pour garantir que seules les entités du type correct sont retournées.Paramètres à appliquer à la chaîne de requête SQL.</param>
    </member>
    <member name="T:System.Data.Entity.DropCreateDatabaseAlways`1">
      <summary>Implémentation de <see cref="T:System.Data.Entity.IDatabaseInitializer`1" /> qui recréera toujours et, éventuellement ré-alimentera, la base de données avec les données la première fois qu'un contexte est utilisé dans le domaine d'application. Pour alimenter la base de données, créez une classe dérivée et substituez la méthode Seed. </summary>
      <typeparam name="TContext">Type du contexte.</typeparam>
    </member>
    <member name="M:System.Data.Entity.DropCreateDatabaseAlways`1.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.DropCreateDatabaseAlways`1" />.</summary>
    </member>
    <member name="M:System.Data.Entity.DropCreateDatabaseAlways`1.InitializeDatabase(`0)">
      <summary>Exécute la stratégie pour initialiser la base de données pour le contexte donné. </summary>
      <param name="context">Contexte.</param>
    </member>
    <member name="M:System.Data.Entity.DropCreateDatabaseAlways`1.Seed(`0)">
      <summary>En cas de substitution, les données seront ajoutées au contexte pour l'alimenter.  L'implémentation par défaut n'exécute aucune opération. </summary>
      <param name="context">Contexte à alimenter.</param>
    </member>
    <member name="T:System.Data.Entity.DropCreateDatabaseIfModelChanges`1">
      <summary>Implémentation de <see cref="T:System.Data.Entity.IDatabaseInitializer`1" /> qui supprime, recrée et, éventuellement, alimente de nouveau en données la base de données uniquement si le modèle a changé depuis la création de la base de données.  Cela est effectué en écrivant un hachage du modèle de magasin dans la base de données lorsqu'il est créé et en comparant ensuite ce hachage avec celui généré à partir du modèle actuel. Pour alimenter la base de données, créez une classe dérivée et substituez la méthode Seed. </summary>
      <typeparam name="TContext">Type du contexte.</typeparam>
    </member>
    <member name="M:System.Data.Entity.DropCreateDatabaseIfModelChanges`1.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.DropCreateDatabaseIfModelChanges`1" />.</summary>
    </member>
    <member name="M:System.Data.Entity.DropCreateDatabaseIfModelChanges`1.InitializeDatabase(`0)">
      <summary>Exécute la stratégie pour initialiser la base de données pour le contexte donné. </summary>
      <param name="context">Contexte.</param>
    </member>
    <member name="M:System.Data.Entity.DropCreateDatabaseIfModelChanges`1.Seed(`0)">
      <summary>Cela doit être substitué pour ajouter réellement des données au contexte à alimenter.  L'implémentation par défaut n'exécute aucune opération. </summary>
      <param name="context">Contexte à alimenter.</param>
    </member>
    <member name="T:System.Data.Entity.IDatabaseInitializer`1">
      <summary>Définit une méthode pour l'initialiseur de base de données.</summary>
      <typeparam name="TContext">Type du contexte.Ce paramètre de type est contravariant. Autrement dit, vous pouvez utiliser le type que vous avez spécifié ou tout type moins dérivé. Pour plus d'informations sur la covariance et la contravariance, consultez .</typeparam>
    </member>
    <member name="M:System.Data.Entity.IDatabaseInitializer`1.InitializeDatabase(`0)">
      <summary>Exécute la stratégie pour initialiser la base de données pour le contexte donné. </summary>
      <param name="context">Contexte.</param>
    </member>
    <member name="T:System.Data.Entity.IDbSet`1">
      <summary>Représente la collection de toutes les entités dans le contexte, ou les entités pouvant être interrogées à partir de la base de données, d'un type donné. <see cref="T:System.Data.Entity.DbSet" /> est une implémentation concrète de <see cref="T:System.Data.Entity.IDbSet`1" />. </summary>
      <typeparam name="TEntity">Type qui définit l'ensemble.</typeparam>
    </member>
    <member name="M:System.Data.Entity.IDbSet`1.Add(`0)">
      <summary>Ajoute l'entité donnée au contexte à l'état <see cref="F:System.Data.EntityState.Added" />. Lors de l'enregistrement des modifications, les entités à l'état Added sont insérées dans la base de données. Une fois les modifications enregistrées, l'état de l'objet passe à <see cref="F:System.Data.EntityState.Unchanged" />.</summary>
      <returns>Retourne l'entité.</returns>
      <param name="entity">Entité à ajouter.</param>
    </member>
    <member name="M:System.Data.Entity.IDbSet`1.Attach(`0)">
      <summary>Joint l'entité spécifique au contexte à l'état <see cref="F:System.Data.EntityState.Unchanged" /></summary>
      <returns>Retourne l'entité.</returns>
      <param name="entity">Entité à joindre.</param>
    </member>
    <member name="M:System.Data.Entity.IDbSet`1.Create">
      <summary>Crée une nouvelle instance d'une entité pour le type de ce jeu. Cette instance n'est pas ajoutée ou jointe au jeu. L'instance retournée sera un proxy si le contexte sous-jacent est configuré pour créer des proxys et si le type d'entité satisfait les spécifications pour la création d'un proxy. </summary>
      <returns>Retourne l'instance d'entité, qui peut être un proxy. </returns>
    </member>
    <member name="M:System.Data.Entity.IDbSet`1.Create``1">
      <summary>Crée une nouvelle instance d'une entité pour le type de ce jeu ou pour un type dérivé du type de ce jeu. Cette instance n'est pas ajoutée ou jointe au jeu. L'instance retournée sera un proxy si le contexte sous-jacent est configuré pour créer des proxys et si le type d'entité satisfait les spécifications pour la création d'un proxy. </summary>
      <returns>Retourne l'instance d'entité, qui peut être un proxy.</returns>
      <typeparam name="TDerivedEntity">Type d'entité à créer.</typeparam>
    </member>
    <member name="M:System.Data.Entity.IDbSet`1.Find(System.Object[])">
      <summary>Utilise la valeur de clé primaire pour tenter de trouver une entité faisant l'objet d'un suivi par le contexte. Si l'entité ne se trouve pas dans le contexte, une requête est exécutée et évaluée par rapport aux données de la source de données. La valeur Null est ensuite retournée si l'entité n'est pas trouvée dans le contexte ou dans la source de données. Notez que la méthode Find retourne également des entités qui ont été ajoutées au contexte, mais n'ont pas encore été enregistrées dans la base de données.</summary>
      <returns>Retourne l'entité trouvé, ou la valeur null.</returns>
      <param name="keyValues">Valeurs de la clé primaire de l'entité à rechercher.</param>
    </member>
    <member name="P:System.Data.Entity.IDbSet`1.Local">
      <summary>Retourne <see cref="T:System.Collections.ObjectModel.ObservableCollection`1" /> qui représente les entités de ce jeu faisant actuellement l'objet d'un suivi par le contexte et n'étant pas marquées comme supprimées. L'accès à la propriété locale n'entraîne jamais l'envoi d'une requête à la base de données. Cette propriété est généralement utilisée après l'exécution d'une requête.</summary>
      <returns>Vue locale.</returns>
    </member>
    <member name="M:System.Data.Entity.IDbSet`1.Remove(`0)">
      <summary>Marque l'entité donnée comme <see cref="F:System.Data.EntityState.Deleted" />. Lorsque les modifications sont enregistrées, l'entité est supprimée de la base de données. L'entité doit exister dans le contexte dans un autre état avant que cette méthode ne soit appelée. </summary>
      <returns>Retourne l'entité.</returns>
      <param name="entity">Entité à supprimer.</param>
    </member>
    <member name="T:System.Data.Entity.MigrateDatabaseToLatestVersion`2">
      <summary>Implémentation d'IDatabaseInitializer qui utilisera Code First Migrations pour mettre à jour la base de données vers la migration la plus récente.</summary>
      <typeparam name="TContext"></typeparam>
      <typeparam name="TMigrationsConfiguration"></typeparam>
    </member>
    <member name="M:System.Data.Entity.MigrateDatabaseToLatestVersion`2.#ctor">
      <summary> Initialise une nouvelle instance de la classe MigrateDatabaseToLatestVersion.  </summary>
    </member>
    <member name="M:System.Data.Entity.MigrateDatabaseToLatestVersion`2.#ctor(System.String)">
      <summary> Initialise une nouvelle instance de la classe MigrateDatabaseToLatestVersion qui utilisera une chaîne de connexion spécifique provenant du fichier de configuration afin d'établir la connexion à la base de données pour effectuer la migration. </summary>
      <param name="connectionStringName">Nom de la chaîne de connexion à utiliser pour la migration.</param>
    </member>
    <member name="M:System.Data.Entity.MigrateDatabaseToLatestVersion`2.InitializeDatabase(`0)">
      <summary>Exécute la stratégie pour initialiser la base de données pour le contexte donné.</summary>
      <param name="context">Contexte.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbChangeTracker">
      <summary>Retourné par la méthode ChangeTracker de <see cref="T:System.Data.Entity.DbContext" /> pour fournir l'accès aux fonctionnalités du contexte mises en rapport avec le suivi des modifications d'entités. </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbChangeTracker.DetectChanges">
      <summary>Détecte les modifications effectuées sur les propriétés et les relations d'entités POCO.  Notez que certains types d'entités (telles que les proxys de suivi des modifications et les entités qui dérivent de <see cref="T:System.Data.Objects.DataClasses.EntityObject" />) consignent automatiquement les modifications, par conséquent, il n'est généralement pas nécessaire d'appeler cette méthode pour ces types d'entités. Par ailleurs, notez que, généralement, cette méthode est appelée automatiquement par beaucoup de méthodes de <see cref="T:System.Data.Entity.DbContext" /> et ses classes connexes, de sorte qu'il est rare qu'elle doive être appelée explicitement. Toutefois, il peut être souhaitable, généralement pour des questions de performances, de désactiver l'appel automatique de cette méthode à l'aide de l'indicateur AutoDetectChangesEnabled à partir de <see cref="P:System.Data.Entity.DbContext.Configuration" />. </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbChangeTracker.Entries">
      <summary>Obtient des objets <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" /> pour toutes les entités suivies par ce contexte. </summary>
      <returns>Entrées.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbChangeTracker.Entries``1">
      <summary>Obtient des objets <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" /> pour toutes les entités du type donné suivies par ce contexte. </summary>
      <returns>Entrées.</returns>
      <typeparam name="TEntity">Type de l'entité.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbChangeTracker.Equals(System.Object)">
      <summary>Détermine si le dispositif de suivi spécifié est égal au dispositif de suivi actuel.</summary>
      <returns>true si le traceur spécifié est égal au traceur actuel ; sinon, false.</returns>
      <param name="obj">Traceur à comparer à l'objet actuel. </param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbChangeTracker.GetHashCode">
      <summary>Retourne la fonction de hachage pour le traceur spécifié.</summary>
      <returns>Fonction de hachage pour le traceur spécifié.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbChangeTracker.GetType">
      <summary>Obtient le type du traceur spécifié.</summary>
      <returns>Type du traceur spécifié.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbChangeTracker.ToString">
      <summary>Retourne une représentation sous forme de chaîne du traceur.</summary>
      <returns>Représentation sous forme de chaîne du traceur.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbCollectionEntry">
      <summary>Version non générique de la classe <see cref="T:System.Data.Entity.Infrastructure.DbCollectionEntry`2" />. </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbCollectionEntry.Cast``2">
      <summary>Retourne l'objet <see cref="T:System.Data.Entity.Infrastructure.DbCollectionEntry`2" /> générique équivalent. </summary>
      <returns>Objet générique équivalent.</returns>
      <typeparam name="TEntity">Type de l'entité sur laquelle le membre est déclaré.</typeparam>
      <typeparam name="TElement">Type de l'élément de la collection.</typeparam>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbCollectionEntry.CurrentValue">
      <summary>Obtient ou définit la valeur actuelle de la propriété de navigation.  La valeur actuelle est l'entité que la propriété de navigation référence. </summary>
      <returns>Valeur en cours.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbCollectionEntry.EntityEntry">
      <summary>
        <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" /> auquel cette propriété de navigation appartient. </summary>
      <returns>Entrée pour l'entité qui possède cette propriété de navigation.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbCollectionEntry.IsLoaded">
      <summary>Obtient une valeur qui indique si la collection d'entités a été chargée à partir de la base de données. </summary>
      <returns>true si la collection est chargée ; sinon false.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbCollectionEntry.Load">
      <summary>Charge la collection d'entités à partir de la base de données. Notez que les entités qui existent déjà dans le contexte ne sont pas remplacées par les valeurs de la base de données. </summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbCollectionEntry.Name">
      <summary>Obtient le nom de la propriété. </summary>
      <returns>Nom de la propriété.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbCollectionEntry.Query">
      <summary>Retourne la requête qui serait utilisée pour charger cette collection à partir de la base de données. La requête retournée peut être modifiée à l'aide de LINQ pour effectuer un filtrage ou des opérations dans la base de données, comme compter le nombre d'entités dans la collection de la base de données sans les charger réellement. </summary>
      <returns>Requête pour la collection.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbCollectionEntry`2">
      <summary>Les instances de cette classe sont retournées à partir de la méthode <see cref="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Collection(System.String)" /> de <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" /> et autorisent des opérations telles que le chargement sur les propriétés de navigation de collection de l'entité. </summary>
      <typeparam name="TEntity">Type de l'entité à laquelle cette propriété appartient.</typeparam>
      <typeparam name="TElement">Type de l'élément de la collection d'entités.</typeparam>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbCollectionEntry`2.CurrentValue">
      <summary>Obtient ou définit la valeur actuelle de la propriété de navigation.  La valeur actuelle est l'entité que la propriété de navigation référence. </summary>
      <returns>Valeur en cours.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbCollectionEntry`2.EntityEntry">
      <summary>
        <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" /> auquel cette propriété de navigation appartient. </summary>
      <returns>Entrée pour l'entité qui possède cette propriété de navigation.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbCollectionEntry`2.IsLoaded">
      <summary>Obtient une valeur qui indique si la collection d'entités a été chargée à partir de la base de données. </summary>
      <returns>true si la collection est chargée ; sinon false.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbCollectionEntry`2.Load">
      <summary>Charge la collection d'entités à partir de la base de données. Notez que les entités qui existent déjà dans le contexte ne sont pas remplacées par les valeurs de la base de données. </summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbCollectionEntry`2.Name">
      <summary>Obtient le nom de la propriété. </summary>
      <returns>Nom de la propriété.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbCollectionEntry`2.op_Implicit(System.Data.Entity.Infrastructure.DbCollectionEntry{`0,`1})~System.Data.Entity.Infrastructure.DbCollectionEntry">
      <summary>Retourne une nouvelle instance de la classe <see cref="T:System.Data.Entity.Infrastructure.DbCollectionEntry" /> non générique pour la propriété de navigation représentée par cet objet. </summary>
      <returns>Retourne <see cref="T:System.Data.Entity.Infrastructure.DbCollectionEntry" />.</returns>
      <param name="entry">Entrée.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbCollectionEntry`2.Query">
      <summary>Retourne la requête qui serait utilisée pour charger cette collection à partir de la base de données. La requête retournée peut être modifiée à l'aide de LINQ pour effectuer un filtrage ou des opérations dans la base de données, comme compter le nombre d'entités dans la collection de la base de données sans les charger réellement. </summary>
      <returns>Requête pour la collection.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbCompiledModel">
      <summary>Représentation immuable d'un modèle Entity Data Model (EDM) qui peut être utilisé pour créer un <see cref="T:System.Data.Objects.ObjectContext" /> ou peut être passé au constructeur d'un <see cref="T:System.Data.Entity.DbContext" />.  Pour de meilleures performances, les instances de ce type doivent être mises en cache et réutilisées pour construire des contextes.  </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbCompiledModel.CreateObjectContext``1(System.Data.Common.DbConnection)">
      <summary>Crée une instance de <see cref="T:System.Data.Objects.ObjectContext" /> ou une classe dérivée d'ObjectContext. Notez qu'une instance de DbContext peut être créée à la place à l'aide du constructeur DbContext approprié. Si un ObjectContext dérivé est utilisé, il doit avoir un constructeur public avec un paramètre EntityConnection unique. La connexion passée est utilisée par l'ObjectContext créé, mais n'est pas possédée par le contexte.  L'appelant doit supprimer la connexion une fois le contexte supprimé. </summary>
      <returns>Retourne le contexte.</returns>
      <param name="existingConnection">Connexion existante à une base de données à utiliser par le contexte.</param>
      <typeparam name="TContext">Type de contexte à créer.</typeparam>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbComplexPropertyEntry">
      <summary>Version non générique de la classe <see cref="T:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2" />. </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry.Cast``2">
      <summary>Retourne l'objet <see cref="T:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2" /> générique équivalent. </summary>
      <returns>Objet générique équivalent.</returns>
      <typeparam name="TEntity">Type de l'entité sur laquelle le membre est déclaré.</typeparam>
      <typeparam name="TComplexProperty">Type de la propriété complexe.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry.ComplexProperty(System.String)">
      <summary>Obtient un objet qui représente une propriété imbriquée de cette propriété. </summary>
      <returns>Objet qui représente la propriété imbriquée.</returns>
      <param name="propertyName">Nom de la propriété imbriquée.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry.Property(System.String)">
      <summary>Obtient un objet qui représente une propriété imbriquée de cette propriété. Cette méthode peut être utilisée à la fois pour les propriétés scalaires ou complexes. </summary>
      <returns>Objet qui représente la propriété imbriquée.</returns>
      <param name="propertyName">Nom de la propriété imbriquée.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2">
      <summary>Les instances de cette classe sont retournées à partir de la méthode ComplexProperty de <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" /> et autorisent l'accès à l'état d'une propriété complexe. </summary>
      <typeparam name="TEntity">Type de l'entité à laquelle cette propriété appartient.</typeparam>
      <typeparam name="TComplexProperty">Type de l'entité à laquelle cette propriété appartient.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2.ComplexProperty``1(System.Linq.Expressions.Expression{System.Func{`1,``0}})">
      <summary>Obtient un objet qui représente une propriété imbriquée de cette propriété. </summary>
      <returns>Objet qui représente la propriété imbriquée.</returns>
      <param name="property">Expression qui représente la propriété imbriquée.</param>
      <typeparam name="TNestedComplexProperty">Type de la propriété imbriquée.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2.ComplexProperty(System.String)">
      <summary>Obtient un objet qui représente une propriété imbriquée de cette propriété. </summary>
      <returns>Objet qui représente la propriété imbriquée.</returns>
      <param name="propertyName">Nom de la propriété imbriquée.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2.ComplexProperty``1(System.String)">
      <summary>Obtient un objet qui représente une propriété imbriquée de cette propriété. </summary>
      <returns>Objet qui représente la propriété imbriquée.</returns>
      <param name="propertyName">Nom de la propriété imbriquée.</param>
      <typeparam name="TNestedComplexProperty">Type de la propriété imbriquée.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2.op_Implicit(System.Data.Entity.Infrastructure.DbComplexPropertyEntry{`0,`1})~System.Data.Entity.Infrastructure.DbComplexPropertyEntry">
      <summary>Retourne une nouvelle instance de la classe <see cref="T:System.Data.Entity.Infrastructure.DbComplexPropertyEntry" /> non générique pour la propriété représentée par cet objet.</summary>
      <returns>Retourne <see cref="T:System.Data.Entity.Infrastructure.DbComplexPropertyEntry" />.</returns>
      <param name="entry">Entrée.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2.Property``1(System.Linq.Expressions.Expression{System.Func{`1,``0}})">
      <summary>Obtient un objet qui représente une propriété imbriquée de cette propriété. Cette méthode peut être utilisée à la fois pour les propriétés scalaires ou complexes. </summary>
      <returns>Objet qui représente la propriété imbriquée.</returns>
      <param name="property">Expression qui représente la propriété imbriquée.</param>
      <typeparam name="TNestedProperty">Type de la propriété imbriquée.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2.Property``1(System.String)">
      <summary>Obtient un objet qui représente une propriété imbriquée de cette propriété. Cette méthode peut être utilisée à la fois pour les propriétés scalaires ou complexes. </summary>
      <returns>Objet qui représente la propriété imbriquée.</returns>
      <param name="propertyName">Nom de la propriété imbriquée.</param>
      <typeparam name="TNestedProperty">Type de la propriété imbriquée.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2.Property(System.String)">
      <summary>Obtient un objet qui représente une propriété imbriquée de cette propriété. Cette méthode peut être utilisée à la fois pour les propriétés scalaires ou complexes. </summary>
      <returns>Objet qui représente la propriété imbriquée.</returns>
      <param name="propertyName">Nom de la propriété imbriquée.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbConnectionInfo">
      <summary>Représente les informations relatives à une connexion de base de données.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbConnectionInfo.#ctor(System.String)">
      <summary>Crée une instance de la classe <see cref="T:System.Data.Entity.Infrastructure.DbConnectionInfo" /> représentant une connexion qui est spécifiée dans le fichier de configuration de l'application.</summary>
      <param name="connectionName">Nom de la chaîne de connexion dans la configuration de l'application.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbConnectionInfo.#ctor(System.String,System.String)">
      <summary>Crée une instance de la classe <see cref="T:System.Data.Entity.Infrastructure.DbConnectionInfo" /> en fonction d'une chaîne de connexion.</summary>
      <param name="connectionString">Chaîne de connexion à utiliser pour la connexion.</param>
      <param name="providerInvariantName">Nom du fournisseur à utiliser pour la connexion. Utilisez System.Data.SqlClient pour SQL Server.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbConnectionInfo.Equals(System.Object)">
      <summary>Indique si l'objet spécifié est identique à l'objet actuel.</summary>
      <returns>true si l'objet spécifié est égal à l'objet actuel ; sinon, false.</returns>
      <param name="obj">Objet à comparer à l'objet actuel.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbConnectionInfo.GetHashCode">
      <summary>Retourne le code de hachage de cette instance.</summary>
      <returns>Code de hachage de cette instance.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbConnectionInfo.GetType">
      <summary>Obtient le type de l'instance actuelle.</summary>
      <returns>Type de l'instance actuelle.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbConnectionInfo.ToString">
      <summary>Retourne une chaîne qui représente l'objet actuel.</summary>
      <returns>Chaîne qui représente l'objet actuel.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbConnectionStringOrigin">
      <summary>Décrit l'origine de la chaîne de connexion de base de données associée à un objet <see cref="T:System.Data.Entity.DbContext" />.</summary>
    </member>
    <member name="F:System.Data.Entity.Infrastructure.DbConnectionStringOrigin.Convention">
      <summary>La chaîne de connexion a été créée par convention.</summary>
    </member>
    <member name="F:System.Data.Entity.Infrastructure.DbConnectionStringOrigin.Configuration">
      <summary>La chaîne de connexion a été lue à partir de la configuration externe.</summary>
    </member>
    <member name="F:System.Data.Entity.Infrastructure.DbConnectionStringOrigin.UserCode">
      <summary>La chaîne de connexion a été spécifiée explicitement au moment de l'exécution.</summary>
    </member>
    <member name="F:System.Data.Entity.Infrastructure.DbConnectionStringOrigin.DbContextInfo">
      <summary>     La chaîne de connexion a été remplacée par les informations de connexion fournies à DbContextInfo.  </summary>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbContextConfiguration">
      <summary>Retourné par la méthode de configuration de <see cref="T:System.Data.Entity.DbContext" /> pour fournir l'accès aux options de configuration pour le contexte. </summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbContextConfiguration.AutoDetectChangesEnabled">
      <summary>Détermine ou définit si la détection automatique des modifications apportées à la configuration est activée.</summary>
      <returns>true si la détection automatique des modifications apportées à la configuration est activée ; sinon, false.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbContextConfiguration.Equals(System.Object)">
      <summary>Détermine si la configuration spécifiée est égale à la configuration actuelle.</summary>
      <returns>true si la configuration spécifiée est égale à la configuration actuelle ; sinon, false.</returns>
      <param name="obj">Configuration à comparer à l'objet actuel. </param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbContextConfiguration.GetHashCode">
      <summary>Retourne la fonction de hachage pour le configuration spécifiée.</summary>
      <returns>Fonction de hachage pour la configuration spécifiée.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbContextConfiguration.GetType">
      <summary>Obtient le type de la configuration actuelle.</summary>
      <returns>Type de la configuration actuelle.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbContextConfiguration.LazyLoadingEnabled">
      <summary>Obtient ou définit une valeur qui indique si le chargement différé des relations exposées comme propriétés de navigation est activé.  Le chargement différé est activé par défaut. </summary>
      <returns>true si le chargement différé est activé ; sinon, false.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbContextConfiguration.ProxyCreationEnabled">
      <summary>Obtient ou définit une valeur qui indique si l'infrastructure créera des instances de classes proxy générées dynamiquement lors de la création d'une instance d'un type d'entité. Notez que même si la création de proxy est permise par cet indicateur, les instances de proxy seront créées seulement pour les types d'entité qui satisfont les spécifications proxy. La création de proxy est autorisée par défaut. </summary>
      <returns>true si la création de proxy est activée ; sinon, false.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbContextConfiguration.ToString">
      <summary>Retourne une représentation sous forme de chaîne de la configuration.</summary>
      <returns>Représentation sous forme de chaîne de la configuration.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbContextConfiguration.ValidateOnSaveEnabled">
      <summary>Obtient ou définit une valeur qui indique si les entités suivies doivent être validées automatiquement lorsque <see cref="M:System.Data.Entity.DbContext.SaveChanges" /> est appelé. La valeur par défaut est true. </summary>
      <returns>true si les entités suivies doivent être validées automatiquement ; sinon, false.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbContextInfo">
      <summary>Fournit les informations d'exécution concernant un type de <see cref="T:System.Data.Entity.DbContext" /> spécifique.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbContextInfo.#ctor(System.Type)">
      <summary>Initialise une nouvelle instance représentant un type de <see cref="T:System.Data.Entity.DbContext" /> spécifique.</summary>
      <param name="contextType">Type dérivant de <see cref="T:System.Data.Entity.DbContext" />.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbContextInfo.#ctor(System.Type,System.Configuration.Configuration)">
      <summary>Initialise une nouvelle instance représentant un type de <see cref="T:System.Data.Entity.DbContext" /> spécifique. Un objet de configuration externe (par exemple, app.config ou web.config) peut être fourni et sera alors utilisée pendant la résolution des chaînes de connexion, y compris pour la recherche de chaînes de connexion et d'entrées DefaultConnectionFactory. </summary>
      <param name="contextType">Type dérivant de <see cref="T:System.Data.Entity.DbContext" />.</param>
      <param name="config">Objet représentant le fichier de configuration.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbContextInfo.#ctor(System.Type,System.Configuration.Configuration,System.Data.Entity.Infrastructure.DbConnectionInfo)">
      <summary>Initialise une nouvelle instance représentant un <see cref="T:System.Data.Entity.DbContext" /> spécifique, ciblant une base de données spécifique.     Un objet de configuration externe (par exemple, app.config ou web.config) peut être fourni et sera alors utilisée pendant la résolution des chaînes de connexion, y compris pour la recherche de chaînes de connexion et d'entrées DefaultConnectionFactory. </summary>
      <param name="contextType">Type dérivant de <see cref="T:System.Data.Entity.DbContext" />.</param>
      <param name="config">Objet représentant le fichier de configuration.</param>
      <param name="connectionInfo">Informations de connexion pour la base de données à utiliser.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbContextInfo.#ctor(System.Type,System.Configuration.ConnectionStringSettingsCollection)">
      <summary>Initialise une nouvelle instance représentant un type de <see cref="T:System.Data.Entity.DbContext" /> spécifique. Une liste externe de chaînes de connexion peut être fournie et sera alors utilisée pendant la résolution des chaînes de connexion à la place des chaînes de connexion spécifiées dans les fichiers de configuration externes.</summary>
      <param name="contextType">Type dérivant de <see cref="T:System.Data.Entity.DbContext" />.</param>
      <param name="connectionStringSettings">Collection de chaînes de connexion.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbContextInfo.#ctor(System.Type,System.Data.Entity.Infrastructure.DbConnectionInfo)">
      <summary>Initialise une nouvelle instance représentant un <see cref="T:System.Data.Entity.DbContext" /> spécifique ciblant une base de données spécifique. </summary>
      <param name="contextType">Type dérivant de <see cref="T:System.Data.Entity.DbContext" />.</param>
      <param name="connectionInfo">Informations de connexion pour la base de données à utiliser.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbContextInfo.#ctor(System.Type,System.Data.Entity.Infrastructure.DbProviderInfo)">
      <summary>Initialise une nouvelle instance représentant un type de <see cref="T:System.Data.Entity.DbContext" /> spécifique. Un objet <see cref="T:System.Data.Entity.Infrastructure.DbProviderInfo" /> peut être fourni afin de remplacer le fournisseur déterminé par défaut utilisé lors de la construction du modèle EDM sous-jacent.</summary>
      <param name="contextType">Type dérivant de <see cref="T:System.Data.Entity.DbContext" />.</param>
      <param name="modelProviderInfo">Objet <see cref="T:System.Data.Entity.Infrastructure.DbProviderInfo" /> spécifiant le fournisseur ADO.NET sous-jacent à cibler.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbContextInfo.ConnectionProviderName">
      <summary>Obtient ou définit le nom du fournisseur ADO.NET de la connexion utilisée par le type de <see cref="T:System.Data.Entity.DbContext" /> sous-jacent.</summary>
      <returns>Nom du fournisseur ADO.NET de la connexion utilisée par le type sous-jacent.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbContextInfo.ConnectionString">
      <summary>Obtient ou définit la chaîne de connexion utilisée par le type de <see cref="T:System.Data.Entity.DbContext" /> sous-jacent.</summary>
      <returns>Chaîne de connexion utilisée par le type de <see cref="T:System.Data.Entity.DbContext" /> sous-jacent.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbContextInfo.ConnectionStringName">
      <summary>Obtient ou définit le nom de chaîne de connexion utilisé par le type de <see cref="T:System.Data.Entity.DbContext" /> sous-jacent.</summary>
      <returns>Nom de chaîne de connexion utilisé par le type de <see cref="T:System.Data.Entity.DbContext" /> sous-jacent.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbContextInfo.ConnectionStringOrigin">
      <summary>Obtient ou définit l'origine de la chaîne de connexion utilisée par le type de <see cref="T:System.Data.Entity.DbContext" /> sous-jacent.</summary>
      <returns>Origine de la chaîne de connexion utilisée par le type de <see cref="T:System.Data.Entity.DbContext" /> sous-jacent.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbContextInfo.ContextType">
      <summary>Obtient ou définit le type de <see cref="T:System.Data.Entity.DbContext" /> concret.</summary>
      <returns>Type de <see cref="T:System.Data.Entity.DbContext" /> concret.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbContextInfo.CreateInstance">
      <summary>Crée une instance représentant un type de <see cref="T:System.Data.Entity.DbContext" /> spécifique.</summary>
      <returns>S'il est possible de créer des instances du type de <see cref="T:System.Data.Entity.DbContext" /> sous-jacent, retourne une nouvelle instance ; sinon, retourne la valeur Null.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbContextInfo.IsConstructible">
      <summary>Obtient ou définit une valeur qui indique si le type de <see cref="T:System.Data.Entity.DbContext" /> sous-jacent peut être créé.</summary>
      <returns>true si le type de <see cref="T:System.Data.Entity.DbContext" /> sous-jacent peut être créé ; sinon, false.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbContextInfo.OnModelCreating">
      <summary>Obtient ou définit le modèle d'un contexte dérivé qui a été initialisé.</summary>
      <returns>Modèle d'un contexte dérivé qui a été initialisé.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbEntityEntry">
      <summary>Version non générique de la classe <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" />. </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.Cast``1">
      <summary>Retourne une nouvelle instance de la classe <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" /> générique du type générique donné pour l'entité suivie représentée par cet objet. Le type de l'entité suivie doit être compatible avec le type générique ou une exception sera levée. </summary>
      <returns>Version générique.</returns>
      <typeparam name="TEntity">Type de l'entité.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.Collection(System.String)">
      <summary>Obtient un objet qui représente la propriété de navigation de collection de cette entité à une collection d'entités associées. </summary>
      <returns>Objet qui représente la propriété de navigation.</returns>
      <param name="navigationProperty">Nom de la propriété de navigation.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.ComplexProperty(System.String)">
      <summary>Obtient un objet qui représente une propriété complexe de cette entité. </summary>
      <returns>Objet qui représente la propriété complexe.</returns>
      <param name="propertyName">Nom de la propriété complexe.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbEntityEntry.CurrentValues">
      <summary>Obtient les valeurs de propriétés actuelles de l'entité suivie représentée par cet objet. </summary>
      <returns>Valeurs actuelles.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbEntityEntry.Entity">
      <summary>Obtient l'entité. </summary>
      <returns>Entité.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.Equals(System.Data.Entity.Infrastructure.DbEntityEntry)">
      <summary>Détermine si le <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" /> spécifié est égal à cette instance. Deux instances <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" /> sont considérées comme égales s'il s'agit de deux entrées de la même entité sur le même <see cref="T:System.Data.Entity.DbContext" />. </summary>
      <returns>true si le <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" /> spécifié est égal à cette instance ; sinon, false. </returns>
      <param name="other">
        <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" /> à comparer à cette instance.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.Equals(System.Object)">
      <summary>Détermine si le <see cref="T:System.Object" /> spécifié est égal à cette instance. Deux instances <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" /> sont considérées comme égales s'il s'agit de deux entrées de la même entité sur le même <see cref="T:System.Data.Entity.DbContext" />. </summary>
      <returns>true si l'objet spécifié est égal à cette instance ; sinon, false. </returns>
      <param name="obj">
        <see cref="T:System.Object" /> à comparer à cette instance.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.GetDatabaseValues">
      <summary>Interroge la base de données pour obtenir les copies des valeurs de l'entité suivie telles qu'elles existent actuellement dans la base de données. La modification des valeurs dans le dictionnaire retourné ne mettra pas à jour les valeurs dans la base de données. Si l'entité est introuvable dans la base de données, la valeur null est retournée. </summary>
      <returns>Valeurs de magasin.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.GetHashCode">
      <summary>Retourne un code de hachage pour cette instance. </summary>
      <returns>Code de hachage pour cette instance, convient à une utilisation dans des algorithmes de hachage et des structures de données telles qu'une table de hachage.  </returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.GetType">
      <summary>Obtient le type d'entrée d'entité de base de données actuelle.</summary>
      <returns>Type d'entrée d'entité de base de données actuelle.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.GetValidationResult">
      <summary>Valide cette instance de <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" /> et retourne le résultat de la validation. </summary>
      <returns>Résultat de la validation d'entité. Peut-être null si la méthode <see cref="M:System.Data.Entity.DbContext.ValidateEntity(System.Data.Entity.Infrastructure.DbEntityEntry,System.Collections.Generic.IDictionary{System.Object,System.Object})" /> est substituée. </returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.Member(System.String)">
      <summary>Obtient un objet qui représente un membre de l'entité.  Le type d'exécution de l'objet retourné variera selon le membre qui est demandé.  Les types de membre actuellement pris en charge et leurs types de retour sont la propriété de navigation Reference (<see cref="T:System.Data.Entity.Infrastructure.DbReferenceEntry" />), la propriété de navigation Collection (<see cref="T:System.Data.Entity.Infrastructure.DbCollectionEntry" />), propriété De base/scalaire (<see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry" />) et la propriété Complex ( <see cref="T:System.Data.Entity.Infrastructure.DbComplexPropertyEntry" />). </summary>
      <returns>Objet représentant le membre.</returns>
      <param name="propertyName">Nom du membre.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbEntityEntry.OriginalValues">
      <summary>Obtient les valeurs de propriétés d'origine de l'entité suivie représentée par cet objet. Les valeurs d'origine sont habituellement les valeurs de propriétés de l'entité telles qu'elles étaient lors de la dernière requête à partir de la base de données. </summary>
      <returns>Valeurs d'origine.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.Property(System.String)">
      <summary>Obtient un objet qui représente une propriété scalaire ou complexe de cette entité. </summary>
      <returns>Objet représentant la propriété.</returns>
      <param name="propertyName">Nom de la propriété.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.Reference(System.String)">
      <summary>Obtient un objet qui représente la propriété de navigation de référence, (par exemple, autre qu'une collection) de cette entité à une autre entité. </summary>
      <returns>Objet qui représente la propriété de navigation.</returns>
      <param name="navigationProperty">Nom de la propriété de navigation.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.Reload">
      <summary>Recharge l'entité de la base de données en remplaçant toutes les valeurs de propriétés avec les valeurs de la base de données. L'entité aura un état non modifié après l'appel de cette méthode. </summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbEntityEntry.State">
      <summary>Obtient ou définit l'état de l'entité. </summary>
      <returns>État.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.ToString">
      <summary>Retourne une chaîne représentant l'entrée d'entité de la base de données.</summary>
      <returns>Représentation sous forme de chaîne de l'entrée d'entité de la base de données.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbEntityEntry`1">
      <summary>Les instances de cette classe donnent accès aux informations relatives aux entités suivies par le <see cref="T:System.Data.Entity.DbContext" /> et au contrôle de celles-ci.  Utilisez les méthodes Entity ou Entities du contexte pour obtenir des objets de ce type. </summary>
      <typeparam name="TEntity">Type de l'entité.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Collection``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.ICollection{``0}}})">
      <summary>Obtient un objet qui représente la propriété de navigation de collection de cette entité à une collection d'entités associées. </summary>
      <returns>Objet qui représente la propriété de navigation.</returns>
      <param name="navigationProperty">Expression qui représente la propriété de navigation.</param>
      <typeparam name="TElement">Type des éléments de la collection.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Collection``1(System.String)">
      <summary>Obtient un objet qui représente la propriété de navigation de collection de cette entité à une collection d'entités associées. </summary>
      <returns>Objet qui représente la propriété de navigation.</returns>
      <param name="navigationProperty">Nom de la propriété de navigation.</param>
      <typeparam name="TElement">Type des éléments de la collection.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Collection(System.String)">
      <summary>Obtient un objet qui représente la propriété de navigation de collection de cette entité à une collection d'entités associées. </summary>
      <returns>Objet qui représente la propriété de navigation.</returns>
      <param name="navigationProperty">Nom de la propriété de navigation.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.ComplexProperty``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary>Obtient un objet qui représente une propriété complexe de cette entité. </summary>
      <returns>Objet qui représente la propriété complexe.</returns>
      <param name="property">Propriété.</param>
      <typeparam name="TComplexProperty">Type de la propriété complexe.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.ComplexProperty``1(System.String)">
      <summary>Obtient un objet qui représente une propriété complexe de cette entité. </summary>
      <returns>Objet qui représente la propriété complexe.</returns>
      <param name="propertyName">Nom de la propriété complexe.</param>
      <typeparam name="TComplexProperty">Type de la propriété complexe.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.ComplexProperty(System.String)">
      <summary>Obtient un objet qui représente une propriété complexe de cette entité. </summary>
      <returns>Objet qui représente la propriété complexe.</returns>
      <param name="propertyName">Nom de la propriété complexe.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbEntityEntry`1.CurrentValues">
      <summary>Obtient les valeurs de propriétés actuelles de l'entité suivie représentée par cet objet. </summary>
      <returns>Valeurs actuelles.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbEntityEntry`1.Entity">
      <summary>Obtient l'entité. </summary>
      <returns>Retourne <see cref="T:System.Data.Entity.Infrastructure.DbPropertyValues" />.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Equals(System.Data.Entity.Infrastructure.DbEntityEntry{`0})">
      <summary>Détermine si le <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" /> spécifié est égal à cette instance. Deux instances <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" /> sont considérées comme égales s'il s'agit de deux entrées de la même entité sur le même <see cref="T:System.Data.Entity.DbContext" />. </summary>
      <returns>true si le <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" /> spécifié est égal à cette instance ; sinon, false. </returns>
      <param name="other">
        <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" /> à comparer à cette instance.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Equals(System.Object)">
      <summary>Détermine si le <see cref="T:System.Object" /> spécifié est égal à cette instance. Deux instances <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" /> sont considérées comme égales s'il s'agit de deux entrées de la même entité sur le même <see cref="T:System.Data.Entity.DbContext" />. </summary>
      <returns>true si l'objet spécifié est égal à cette instance ; sinon, False. </returns>
      <param name="obj">
        <see cref="T:System.Object" /> à comparer à cette instance.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.GetDatabaseValues">
      <summary>Interroge la base de données pour obtenir les copies des valeurs de l'entité suivie telles qu'elles existent actuellement dans la base de données. La modification des valeurs dans le dictionnaire retourné ne mettra pas à jour les valeurs dans la base de données. Si l'entité est introuvable dans la base de données, null est retourné. </summary>
      <returns>Valeurs de magasin.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.GetHashCode">
      <summary>Retourne un code de hachage pour cette instance.</summary>
      <returns>Code de hachage pour cette instance, convient à une utilisation dans des algorithmes de hachage et des structures de données telles qu'une table de hachage.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.GetType">
      <summary>Obtient le type d'entité de base de données actuelle.</summary>
      <returns>Type de l'entité de base de données actuelle.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.GetValidationResult">
      <summary>Valide cette instance de <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" /> et retourne le résultat de la validation. </summary>
      <returns>Résultat de la validation d'entité. Peut-être null si la méthode <see cref="M:System.Data.Entity.DbContext.ValidateEntity(System.Data.Entity.Infrastructure.DbEntityEntry,System.Collections.Generic.IDictionary{System.Object,System.Object})" /> est substituée. </returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Member(System.String)">
      <summary>Obtient un objet qui représente un membre de l'entité.  Le type d'exécution de l'objet retourné variera selon le membre qui est demandé.  Les types de membres actuellement pris en charge et leurs types de retours sont : la propriété de navigation de référence : <see cref="T:System.Data.Entity.Infrastructure.DbReferenceEntry" /> ; la propriété de navigation de collection : <see cref="T:System.Data.Entity.Infrastructure.DbCollectionEntry" /> ; la propriété de base/scalaire : <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry" /> ; la propriété complexe : <see cref="T:System.Data.Entity.Infrastructure.DbComplexPropertyEntry" />. </summary>
      <returns>Membre de l'entité. </returns>
      <param name="propertyName">Nom du membre.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Member``1(System.String)">
      <summary>Obtient un objet qui représente un membre de l'entité.  Le type d'exécution de l'objet retourné variera selon le membre qui est demandé.  Les types de membres actuellement pris en charge et leurs types de retours sont : la propriété de navigation de référence : <see cref="T:System.Data.Entity.Infrastructure.DbReferenceEntry`2" /> ; la propriété de navigation de collection : <see cref="T:System.Data.Entity.Infrastructure.DbCollectionEntry`2" /> ; la propriété de base/scalaire : <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry`2" /> ; la propriété complexe : <see cref="T:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2" />. </summary>
      <returns>Objet représentant le membre.</returns>
      <param name="propertyName">Nom du membre.</param>
      <typeparam name="TMember">Type du membre.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.op_Implicit(System.Data.Entity.Infrastructure.DbEntityEntry{`0})~System.Data.Entity.Infrastructure.DbEntityEntry">
      <summary>Retourne une nouvelle instance de la classe <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" /> non générique pour l'entité suivie représentée par cet objet. </summary>
      <returns>Retourne <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" />.</returns>
      <param name="entry">Entrée.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbEntityEntry`1.OriginalValues">
      <summary>Obtient les valeurs de propriétés d'origine de l'entité suivie représentée par cet objet. Les valeurs d'origine sont habituellement les valeurs de propriétés de l'entité telles qu'elles étaient lors de la dernière requête à partir de la base de données. </summary>
      <returns>Valeurs d'origine.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Property``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary>Obtient un objet qui représente une propriété scalaire ou complexe de cette entité. </summary>
      <returns>Objet représentant la propriété.</returns>
      <param name="property">Propriété.</param>
      <typeparam name="TProperty">Type de la propriété.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Property``1(System.String)">
      <summary>Obtient un objet qui représente une propriété scalaire ou complexe de cette entité. </summary>
      <returns>Objet représentant la propriété.</returns>
      <param name="propertyName">Nom de la propriété.</param>
      <typeparam name="TProperty">Type de la propriété.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Property(System.String)">
      <summary>Obtient un objet qui représente une propriété scalaire ou complexe de cette entité. </summary>
      <returns>Objet représentant la propriété.</returns>
      <param name="propertyName">Nom de la propriété.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Reference``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary>Obtient un objet qui représente la propriété de navigation de référence, (par exemple, autre qu'une collection) de cette entité à une autre entité. </summary>
      <returns>Objet qui représente la propriété de navigation.</returns>
      <param name="navigationProperty">Expression qui représente la propriété de navigation.</param>
      <typeparam name="TProperty">Type de la propriété.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Reference(System.String)">
      <summary>Obtient un objet qui représente la propriété de navigation de référence, (qui n'est pas une collection) de cette entité à une autre entité. </summary>
      <returns>Objet qui représente la propriété de navigation.</returns>
      <param name="navigationProperty">Nom de la propriété de navigation.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Reference``1(System.String)">
      <summary>Obtient un objet qui représente la propriété de navigation de référence, (par exemple, un objet qui n'est pas une collection) de cette entité à une autre entité. </summary>
      <returns>Objet qui représente la propriété de navigation.</returns>
      <param name="navigationProperty">Nom de la propriété de navigation.</param>
      <typeparam name="TProperty">Type de la propriété.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Reload">
      <summary>Recharge l'entité de la base de données en remplaçant toutes les valeurs de propriétés avec les valeurs de la base de données. L'entité aura un état non modifié après l'appel de cette méthode. </summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbEntityEntry`1.State">
      <summary>Obtient ou définit l'état de l'entité. </summary>
      <returns>État.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.ToString">
      <summary>Retourne une chaîne représentant les valeurs d'entité de la base de données.</summary>
      <returns>Représentation sous forme de chaîne des valeurs d'entité de la base de données.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbMemberEntry">
      <summary>Classe de base abstraite utilisée pour représenter une propriété scalaire ou complexe, ou une propriété de navigation d'une entité.  Les propriétés scalaires et complexes utilisent la classe dérivée <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry" />, les propriétés de navigation de référence utilisent la classe dérivée <see cref="T:System.Data.Entity.Infrastructure.DbReferenceEntry" /> et les propriétés de navigation de collection utilisent la classe dérivée <see cref="T:System.Data.Entity.Infrastructure.DbCollectionEntry" />. </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Infrastructure.DbMemberEntry" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry.Cast``2">
      <summary>Retourne l'objet <see cref="T:System.Data.Entity.Infrastructure.DbMemberEntry`2" /> générique équivalent. </summary>
      <returns>Objet générique équivalent.</returns>
      <typeparam name="TEntity">Type de l'entité sur laquelle le membre est déclaré.</typeparam>
      <typeparam name="TProperty">Type de la propriété.</typeparam>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbMemberEntry.CurrentValue">
      <summary>Obtient ou définit la valeur actuelle de cette propriété. </summary>
      <returns>Valeur en cours.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbMemberEntry.EntityEntry">
      <summary>
        <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" /> auquel ce membre appartient. </summary>
      <returns>Entrée pour l'entité qui possède ce membre.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry.Equals(System.Object)">
      <summary>Détermine si l'entrée spécifiée est égale à la requête actuelle.</summary>
      <returns>true si l'entrée spécifiée est égale à l'entrée actuelle ; sinon, false.</returns>
      <param name="obj">Entrée à comparer avec l'objet actuel.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry.GetHashCode">
      <summary>Retourne la fonction de hachage pour l'entrée spécifiée.</summary>
      <returns>Fonction de hachage pour l'entrée spécifiée.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry.GetType">
      <summary>Obtient le type de l'entrée actuelle.</summary>
      <returns>Type de l'entrée actuelle.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry.GetValidationErrors">
      <summary>Valide cette propriété. </summary>
      <returns>Collection d'objets <see cref="T:System.Data.Entity.Validation.DbValidationError" />. Jamais null. Si l'entité est valide la collection sera vide. </returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbMemberEntry.Name">
      <summary>Obtient le nom de la propriété. </summary>
      <returns>Nom de la propriété.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry.ToString">
      <summary>Retourne une chaîne représentant les valeurs de propriété de la base de données.</summary>
      <returns>Représentation sous forme de chaîne des valeurs de propriété de la base de données.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbMemberEntry`2">
      <summary>Classe de base abstraite utilisée pour représenter une propriété scalaire ou complexe, ou une propriété de navigation d'une entité.  Les propriétés scalaires et complexes utilisent la classe dérivée <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry`2" />, les propriétés de navigation de référence utilisent la classe dérivée <see cref="T:System.Data.Entity.Infrastructure.DbReferenceEntry`2" /> et les propriétés de navigation de collection utilisent la classe dérivée <see cref="T:System.Data.Entity.Infrastructure.DbCollectionEntry`2" />. </summary>
      <typeparam name="TEntity">Type de l'entité à laquelle cette propriété appartient.</typeparam>
      <typeparam name="TProperty">Type de l'entité à laquelle cette propriété appartient.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry`2.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Infrastructure.DbMemberEntry`2" />.</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbMemberEntry`2.CurrentValue">
      <summary>Obtient ou définit la valeur actuelle de cette propriété. </summary>
      <returns>Retourne <see cref="T:System.String" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbMemberEntry`2.EntityEntry">
      <summary>
        <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" /> auquel ce membre appartient. </summary>
      <returns>Entrée pour l'entité qui possède ce membre.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry`2.Equals(System.Object)">
      <summary>Détermine si la requête spécifiée est égale à la requête actuelle.</summary>
      <returns>true si la requête spécifiée est égale à la requête actuelle ; sinon, false.</returns>
      <param name="obj">Requête à comparer à l'objet actuel.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry`2.GetHashCode">
      <summary>Retourne la fonction de hachage pour la requête spécifiée.</summary>
      <returns>Fonction de hachage pour la requête spécifiée.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry`2.GetType">
      <summary>Obtient le type de la requête actuelle.</summary>
      <returns>Type de la requête actuelle.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry`2.GetValidationErrors">
      <summary>Valide cette propriété. </summary>
      <returns>Collection d'objets <see cref="T:System.Data.Entity.Validation.DbValidationError" />. Jamais null. Si l'entité est valide la collection sera vide. </returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbMemberEntry`2.Name">
      <summary>Obtient le nom de l'entrée de membre de la base de données.</summary>
      <returns>Nom de l'entrée de membre de la base de données.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry`2.op_Implicit(System.Data.Entity.Infrastructure.DbMemberEntry{`0,`1})~System.Data.Entity.Infrastructure.DbMemberEntry">
      <summary>Retourne une nouvelle instance de la classe <see cref="T:System.Data.Entity.Infrastructure.DbMemberEntry" /> non générique pour la propriété représentée par cet objet. </summary>
      <returns>Retourne <see cref="T:System.Data.Entity.Infrastructure.DbMemberEntry" />.</returns>
      <param name="entry">Entrée.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry`2.ToString">
      <summary>Retourne une chaîne représentant les valeurs de propriété de la base de données.</summary>
      <returns>Représentation sous forme de chaîne des valeurs de propriété de la base de données.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbModel">
      <summary>Représente un Entity Data Model (EDM) créé par le <see cref="T:System.Data.Entity.DbModelBuilder" />. La méthode <see cref="M:System.Data.Entity.Infrastructure.DbModel.Compile" /> peut être utilisée pour la conversion d'une représentation EDM vers un <see cref="T:System.Data.Entity.Infrastructure.DbCompiledModel" /> qui est un instantané compilé du modèle approprié pour la mise en cache et la création d'instances <see cref="T:System.Data.Entity.DbContext" /> ou <see cref="T:System.Data.Objects.ObjectContext" />. </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbModel.Compile">
      <summary>Crée un <see cref="T:System.Data.Entity.Infrastructure.DbCompiledModel" /> pour ce mode, soit un instantané compilé approprié pour la mise en cache et la création d'instances <see cref="T:System.Data.Entity.DbContext" />. </summary>
      <returns>Modèle compilé.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbPropertyEntry">
      <summary>Version non générique de la classe <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry`2" />. </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbPropertyEntry.Cast``2">
      <summary>Retourne l'objet <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry`2" /> générique équivalent. </summary>
      <returns>Objet générique équivalent.</returns>
      <typeparam name="TEntity">Type de l'entité sur laquelle le membre est déclaré.</typeparam>
      <typeparam name="TProperty">Type de la propriété.</typeparam>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry.CurrentValue">
      <summary>Obtient ou définit la valeur actuelle de cette propriété. </summary>
      <returns>Valeur en cours.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry.EntityEntry">
      <summary>
        <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" /> auquel cette propriété appartient. </summary>
      <returns>Entrée pour l'entité qui possède cette propriété.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry.IsModified">
      <summary>Obtient ou définit une valeur qui indique si la valeur de cette propriété a été modifiée depuis qu'elle a été chargée à partir de la base de données. </summary>
      <returns>true si cette instance est modifiée ; sinon, false. </returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry.Name">
      <summary>Obtient le nom de la propriété. </summary>
      <returns>Nom de la propriété.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry.OriginalValue">
      <summary>Obtient ou définit la valeur d'origine de cette propriété. </summary>
      <returns>Valeur d'origine.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry.ParentProperty">
      <summary>
        <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry" /> de la propriété pour laquelle c'est une propriété imbriquée. Cette méthode retournera seulement une entrée non null pour les propriétés d'objets complexes, sinon, elle retournera null pour les propriétés de l'entité elle-même. </summary>
      <returns>Entrée de la propriété complexe parente, ou null si c'est une propriété d'entité.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbPropertyEntry`2">
      <summary>Les instances de cette classe sont retournées à partir de la méthode Property de <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" /> et autorisent l'accès à l'état d'une propriété scalaire. </summary>
      <typeparam name="TEntity">Type de l'entité à laquelle cette propriété appartient.</typeparam>
      <typeparam name="TProperty">Type de la propriété.</typeparam>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry`2.CurrentValue">
      <summary>Obtient ou définit la valeur actuelle de cette propriété. </summary>
      <returns>Retourne <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry`2.EntityEntry">
      <summary>
        <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" /> auquel cette propriété appartient. </summary>
      <returns>Entrée pour l'entité qui possède cette propriété.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry`2.IsModified">
      <summary>Obtient ou définit une valeur qui indique si la valeur de cette propriété a été modifiée depuis qu'elle a été chargée à partir de la base de données. </summary>
      <returns>true si cette instance est modifiée ; sinon, false. </returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry`2.Name">
      <summary>Obtient le nom de la propriété. </summary>
      <returns>Nom de la propriété.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbPropertyEntry`2.op_Implicit(System.Data.Entity.Infrastructure.DbPropertyEntry{`0,`1})~System.Data.Entity.Infrastructure.DbPropertyEntry">
      <summary>Retourne une nouvelle instance de la classe <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry" /> non générique pour la propriété représentée par cet objet. </summary>
      <returns>Retourne <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry" />.</returns>
      <param name="entry">Entrée.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry`2.OriginalValue">
      <summary>Obtient ou définit la valeur d'origine de cette propriété. </summary>
      <returns>Retourne <see cref="T:System.String" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry`2.ParentProperty">
      <summary>
        <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry" /> de la propriété pour laquelle c'est une propriété imbriquée. Cette méthode retournera seulement une entrée non null pour les propriétés d'objets complexes et retournera null pour les propriétés de l'entité elle-même. </summary>
      <returns>Entrée de la propriété complexe parente, ou null si c'est une propriété d'entité.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbPropertyValues">
      <summary>Collection de toutes les propriétés pour une entité sous-jacente ou un objet complexe. </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbPropertyValues.Clone">
      <summary>Crée un nouveau dictionnaire qui contient des copies de toutes les propriétés dans ce dictionnaire. Les modifications apportées au nouveau dictionnaire ne seront pas répercutées dans ce dictionnaire et vice versa. </summary>
      <returns>Clone de ce dictionnaire.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbPropertyValues.Equals(System.Object)">
      <summary>Détermine si la valeur spécifiée est égale à la valeur actuelle.</summary>
      <returns>true si la valeur spécifiée est égale à la valeur actuelle ; sinon, false.</returns>
      <param name="obj">Valeur à comparer à l'objet actuel.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbPropertyValues.GetHashCode">
      <summary>Retourne la fonction de hachage pour la valeur spécifiée.</summary>
      <returns>Fonction de hachage pour la valeur spécifiée.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbPropertyValues.GetType">
      <summary>Obtient le type de la valeur actuelle.</summary>
      <returns>Type de la valeur actuelle.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbPropertyValues.GetValue``1(System.String)">
      <summary>Obtient la valeur de la propriété comme si vous utilisiez l'accesseur Get de la propriété indexée mais typée au type du paramètre générique.  C'est surtout utile avec les dictionnaires imbriqués, afin d'éviter d'écrire des expressions avec beaucoup de transtypages. </summary>
      <returns>Retourne <see cref="T:System.Type" />, la valeur de la propriété spécifiée par <paramref name="propertyName" />.</returns>
      <param name="propertyName">Nom de la propriété.</param>
      <typeparam name="TValue">Type de la propriété.</typeparam>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyValues.Item(System.String)">
      <summary>Obtient ou définit la valeur de la propriété avec le nom de propriété spécifié. La valeur peut être une instance imbriquée de cette classe. </summary>
      <returns>Valeur de la propriété.</returns>
      <param name="propertyName">Nom de la propriété à récupérer.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyValues.PropertyNames">
      <summary>Obtient l'ensemble de noms de toutes les propriétés dans ce dictionnaire sous la forme d'un ensemble en lecture seule. </summary>
      <returns>Noms de propriété.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbPropertyValues.SetValues(System.Data.Entity.Infrastructure.DbPropertyValues)">
      <summary>Définit les valeurs de ce dictionnaire en lisant les valeurs à partir d'un autre dictionnaire. L'autre dictionnaire doit être basé sur le même type que ce dictionnaire, ou un type a dérivé du type pour ce dictionnaire. </summary>
      <param name="propertyValues">Dictionnaire à partir duquel les valeurs sont lues.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbPropertyValues.SetValues(System.Object)">
      <summary>Définit les valeurs de ce dictionnaire en lisant les valeurs de l'objet donné. L'objet donné peut être de tout type.  Toute propriété sur l'objet ayant un nom qui correspond à un nom de propriété dans le dictionnaire et pouvant être lue, sera lue.  Les autres propriétés seront ignorées.  Cela inclut la copie des propriétés à partir d'objets DTO (Data Transfer Objects). </summary>
      <param name="obj">Objet à partir duquel les valeurs sont lues.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbPropertyValues.ToObject">
      <summary>Crée un objet de type sous-jacent pour ce dictionnaire et l'alimente avec les valeurs de propriété de ce dictionnaire. </summary>
      <returns>Propriétés de ce dictionnaire copiées dans un nouvel objet.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbPropertyValues.ToString">
      <summary>Retourne une chaîne représentant les valeurs de propriété de la base de données.</summary>
      <returns>Représentation sous forme de chaîne des valeurs de propriété de la base de données.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbProviderInfo">
      <summary>Stocke les informations sur un fournisseur de bases de données.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbProviderInfo.#ctor(System.String,System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Infrastructure.DbProviderInfo" />.</summary>
      <param name="providerInvariantName">Nom invariant du fournisseur qui spécifie la version de SQL Server Compact Edition à utiliser.</param>
      <param name="providerManifestToken">Informations du jeton de manifeste pour le fournisseur, sur l'élément Schema.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbProviderInfo.ProviderInvariantName">
      <summary>Obtient le nom invariant du fournisseur qui spécifie la version de SQL Server Compact Edition à utiliser.</summary>
      <returns>Fournisseur de données du fournisseur de bases de données.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbProviderInfo.ProviderManifestToken">
      <summary>Obtient les informations du jeton de manifeste pour le fournisseur sur l'élément Schema.</summary>
      <returns>Jeton de manifeste.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbQuery">
      <summary>Représente une requête LINQ to Entities non générique sur un <see cref="T:System.Data.Entity.DbContext" />. </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery.AsNoTracking">
      <summary>Retourne une nouvelle requête où les entités retournées ne seront pas mises en cache dans le <see cref="T:System.Data.Entity.DbContext" />. </summary>
      <returns>Nouvelle requête avec NoTracking appliqué.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery.Cast``1">
      <summary>Retourne l'objet <see cref="T:System.Data.Entity.Infrastructure.DbQuery`1" /> générique équivalent. </summary>
      <returns>Objet défini générique.</returns>
      <typeparam name="TElement">Type d'élément pour lequel la requête a été créée.</typeparam>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbQuery.ElementType">
      <summary>Type d'élément IQueryable. </summary>
      <returns>Type de l'élément.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery.Equals(System.Object)">
      <summary>Détermine si la requête spécifiée est égale à la requête actuelle.</summary>
      <returns>true si la requête spécifiée est égale à la requête actuelle ; sinon, false.</returns>
      <param name="obj">Requête à comparer à l'objet actuel.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery.GetHashCode">
      <summary>Retourne la fonction de hachage pour la requête spécifiée.</summary>
      <returns>Fonction de hachage pour la requête spécifiée.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery.GetType">
      <summary>Obtient le type de la requête actuelle.</summary>
      <returns>Type de la requête actuelle.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery.Include(System.String)">
      <summary>Retourne la requête LINQ to Entities non générique incluse sur un <see cref="T:System.Data.Entity.DbContext" />.</summary>
      <returns>Résultats de requête LINQ incluse.</returns>
      <param name="path">Chemin de la requête LINQ incluse.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery.System#Collections#IEnumerable#GetEnumerator">
      <summary>Obtient l'énumération de cette requête et entraîne son exécution sur le magasin.</summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" /> pour la requête.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbQuery.System#ComponentModel#IListSource#ContainsListCollection">
      <summary>Retourne la valeur false.</summary>
      <returns>false</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery.System#ComponentModel#IListSource#GetList">
      <summary>Lève une exception qui indique que la liaison directe à une requête de magasin n'est pas prise en charge. </summary>
      <returns>Ne retourne jamais aucune valeur ; lève toujours un exception.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbQuery.System#Linq#IQueryable#Expression">
      <summary>Expression LINQ IQueryable.</summary>
      <returns>Retourne <see cref="T:System.Linq.Expressions.Expression" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbQuery.System#Linq#IQueryable#Provider">
      <summary>Fournisseur IQueryable.</summary>
      <returns>Retourne <see cref="T:System.Linq.IQueryProvider" />.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery.ToString">
      <summary>Retourne une représentation <see cref="T:System.String" /> de la requête sous-jacente. </summary>
      <returns>Chaîne de requête. </returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbQuery`1">
      <summary>Représente une requête LINQ to Entities sur un <see cref="T:System.Data.Entity.DbContext" />. </summary>
      <typeparam name="TResult">Type d'entité auquel s'applique la requête.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.AsNoTracking">
      <summary>Retourne une nouvelle requête où les entités retournées ne seront pas mises en cache dans le <see cref="T:System.Data.Entity.DbContext" />. </summary>
      <returns>Nouvelle requête avec NoTracking appliqué.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.Equals(System.Object)">
      <summary>Détermine si la requête spécifiée est égale à la requête actuelle.</summary>
      <returns>true si la requête spécifiée est égale à la requête actuelle ; sinon, false.</returns>
      <param name="obj">Requête à comparer à l'objet actuel.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.GetHashCode">
      <summary>Retourne la fonction de hachage pour la requête spécifiée.</summary>
      <returns>Fonction de hachage pour la requête spécifiée.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.GetType">
      <summary>Obtient le type de la requête actuelle.</summary>
      <returns>Type de la requête actuelle.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.Include(System.String)">
      <summary>Retourne la requête LINQ to Entities incluse sur un <see cref="T:System.Data.Entity.DbContext" />.</summary>
      <returns>Requête LINQ incluse.</returns>
      <param name="path">Chemin de la requête LINQ incluse.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.op_Implicit(System.Data.Entity.Infrastructure.DbQuery{`0})~System.Data.Entity.Infrastructure.DbQuery">
      <summary>Retourne une nouvelle instance de la classe <see cref="T:System.Data.Entity.Infrastructure.DbQuery" /> non générique pour cette requête. </summary>
      <returns>Retourne <see cref="T:System.Data.Entity.Infrastructure.DbQuery" />.</returns>
      <param name="entry">Entrée.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>Obtient l'énumération de cette requête et entraîne son exécution sur le magasin.</summary>
      <returns>Retourne un <see cref="T:System.Collections.Generic.IEnumerator`1" /> pour la requête.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>Obtient l'énumération de cette requête et entraîne son exécution sur le magasin.</summary>
      <returns>Retourne un <see cref="T:System.Collections.IEnumerator" /> pour la requête.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbQuery`1.System#ComponentModel#IListSource#ContainsListCollection">
      <summary>Retourne la valeur false.</summary>
      <returns>false</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.System#ComponentModel#IListSource#GetList">
      <summary>Lève une exception qui indique que la liaison directe à une requête de magasin n'est pas prise en charge. </summary>
      <returns>Ne retourne jamais aucune valeur ; lève toujours un exception.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbQuery`1.System#Linq#IQueryable#ElementType">
      <summary>Type d'élément IQueryable.</summary>
      <returns>Retourne <see cref="T:System.Type" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbQuery`1.System#Linq#IQueryable#Expression">
      <summary>Expression LINQ IQueryable.</summary>
      <returns>Retourne <see cref="T:System.Linq.Expressions.Expression" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbQuery`1.System#Linq#IQueryable#Provider">
      <summary>Fournisseur IQueryable.</summary>
      <returns>Retourne <see cref="T:System.Linq.IQueryProvider" />.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.ToString">
      <summary>Retourne une représentation <see cref="T:System.String" /> de la requête sous-jacente. </summary>
      <returns>Chaîne de requête. </returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbReferenceEntry">
      <summary>Version non générique de la classe <see cref="T:System.Data.Entity.Infrastructure.DbReferenceEntry`2" />. </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbReferenceEntry.Cast``2">
      <summary>Retourne l'objet <see cref="T:System.Data.Entity.Infrastructure.DbReferenceEntry`2" /> générique équivalent. </summary>
      <returns>Objet générique équivalent.</returns>
      <typeparam name="TEntity">Type de l'entité sur laquelle le membre est déclaré.</typeparam>
      <typeparam name="TProperty">Type de la propriété.</typeparam>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbReferenceEntry.CurrentValue">
      <summary>Obtient ou définit la valeur actuelle de la propriété de navigation.  La valeur actuelle est l'entité que la propriété de navigation référence. </summary>
      <returns>Valeur en cours.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbReferenceEntry.EntityEntry">
      <summary>
        <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" /> auquel cette propriété de navigation appartient. </summary>
      <returns>Entrée pour l'entité qui possède cette propriété de navigation.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbReferenceEntry.IsLoaded">
      <summary>Obtient une valeur qui indique si l'entité a été chargée à partir de la base de données. </summary>
      <returns>true si l'entité est chargée ; sinon, false.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbReferenceEntry.Load">
      <summary>Charge l'entité à partir de la base de données. Notez que si l'entité existe déjà dans le contexte, elle ne sera pas remplacée par les valeurs de la base de données. </summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbReferenceEntry.Name">
      <summary>Obtient le nom de la propriété. </summary>
      <returns>Nom de la propriété.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbReferenceEntry.Query">
      <summary>Retourne la requête qui serait utilisée pour charger cette entité à partir de la base de données. La requête retournée peut être modifiée à l'aide de LINQ pour effectuer un filtrage ou des opérations dans la base de données. </summary>
      <returns>Requête pour l'entité.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbReferenceEntry`2">
      <summary>Les instances de cette classe sont retournées à partir de la méthode Reference de <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" /> et autorisent des opérations telles que le chargement sur les propriétés de navigation de référence de l'entité. </summary>
      <typeparam name="TEntity">Type de l'entité à laquelle cette propriété appartient.</typeparam>
      <typeparam name="TProperty">Type de la propriété.</typeparam>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbReferenceEntry`2.CurrentValue">
      <summary>Obtient ou définit la valeur actuelle de la propriété de navigation.  La valeur actuelle est l'entité que la propriété de navigation référence. </summary>
      <returns>Retourne <see cref="T:System.Linq.IQueryable`1" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbReferenceEntry`2.EntityEntry">
      <summary>
        <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" /> auquel cette propriété de navigation appartient. </summary>
      <returns>Entrée pour l'entité qui possède cette propriété de navigation.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbReferenceEntry`2.IsLoaded">
      <summary>Obtient une valeur qui indique si l'entité a été chargée à partir de la base de données. </summary>
      <returns>true si l'entité est chargée ; sinon, false.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbReferenceEntry`2.Load">
      <summary>Charge l'entité à partir de la base de données. Si l'entité existe déjà dans le contexte, elle ne sera pas remplacée par les valeurs de la base de données. </summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbReferenceEntry`2.Name">
      <summary>Obtient le nom de la propriété. </summary>
      <returns>Nom de la propriété.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbReferenceEntry`2.op_Implicit(System.Data.Entity.Infrastructure.DbReferenceEntry{`0,`1})~System.Data.Entity.Infrastructure.DbReferenceEntry">
      <summary> Retourne une nouvelle instance de la classe <see cref="T:System.Data.Entity.Infrastructure.DbReferenceEntry" /> non générique pour la propriété de navigation représentée par cet objet. </summary>
      <returns>Retourne <see cref="T:System.Data.Entity.Infrastructure.DbReferenceEntry" />.</returns>
      <param name="entry">Entrée.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbReferenceEntry`2.Query">
      <summary>Retourne la requête qui serait utilisée pour charger cette entité à partir de la base de données. La requête retournée peut être modifiée à l'aide de LINQ pour effectuer un filtrage ou des opérations dans la base de données. </summary>
      <returns>Requête pour l'entité.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbSqlQuery">
      <summary>Représente une requête SQL pour les entités créées à partir d'un <see cref="T:System.Data.Entity.DbContext" /> qui est exécutée à l'aide de la connexion à partir ce contexte. Les instances de cette classe sont obtenues de l'instance <see cref="T:System.Data.Entity.DbSet" /> pour le type d'entité. La requête n'est pas exécutée lorsque cet objet est créé ; elle est exécutée chaque fois qu'elle est énumérée, par exemple en utilisant l'instruction « foreach ». Les requêtes SQL pour les non-entités sont créées à l'aide du <see cref="P:System.Data.Entity.DbContext.Database" />. Consultez <see cref="T:System.Data.Entity.Infrastructure.DbSqlQuery`1" /> pour une version générique de cette classe. </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery.AsNoTracking">
      <summary>Retourne une nouvelle requête où les résultats de la requête ne seront pas suivis par le <see cref="T:System.Data.Entity.DbContext" /> associé. </summary>
      <returns>Nouvelle requête avec NoTracking appliqué.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery.Equals(System.Object)">
      <summary>Détermine si la requête spécifiée est égale à la requête actuelle.</summary>
      <returns>true si la requête spécifiée est égale à la requête actuelle ; sinon, false.</returns>
      <param name="obj">Requête à comparer à l'objet actuel. </param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery.GetEnumerator">
      <summary>Exécute la requête et retourne un énumérateur pour les éléments. </summary>
      <returns>Objet <see cref="T:System.Collections.IEnumerator" /> qui peut être utilisé pour itérer au sein des éléments. </returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery.GetHashCode">
      <summary>Retourne la fonction de hachage pour la requête spécifiée.</summary>
      <returns>Fonction de hachage pour la requête spécifiée.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery.GetType">
      <summary>Obtient le type de la requête actuelle.</summary>
      <returns>Type de la requête actuelle.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbSqlQuery.System#ComponentModel#IListSource#ContainsListCollection">
      <summary>Retourne false.</summary>
      <returns>false</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery.System#ComponentModel#IListSource#GetList">
      <summary>Lève une exception qui indique que la liaison directe à une requête de magasin n'est pas prise en charge.</summary>
      <returns>Ne retourne jamais aucune valeur ; lève toujours un exception.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery.ToString">
      <summary>Retourne un <see cref="T:System.String" /> qui contient la chaîne SQL définie lorsque la requête a été créée.  Les paramètres ne sont pas inclus. </summary>
      <returns>
        <see cref="T:System.String" /> représentant cette instance. </returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbSqlQuery`1">
      <summary>Représente une requête SQL pour les entités créées à partir d'un <see cref="T:System.Data.Entity.DbContext" /> qui est exécutée à l'aide de la connexion à partir ce contexte. Les instances de cette classe sont obtenues de l'instance <see cref="T:System.Data.Entity.DbSet`1" /> pour le type d'entité. La requête n'est pas exécutée lorsque cet objet est créé ; elle est exécutée chaque fois qu'elle est énumérée, par exemple en utilisant l'instruction « foreach ». Les requêtes SQL pour les non-entités sont créées à l'aide du <see cref="P:System.Data.Entity.DbContext.Database" />. Consultez <see cref="T:System.Data.Entity.Infrastructure.DbSqlQuery" /> pour une version non générique de cette classe. </summary>
      <typeparam name="TEntity">Entité.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery`1.AsNoTracking">
      <summary>Retourne une nouvelle requête où les résultats de la requête ne seront pas suivis par le <see cref="T:System.Data.Entity.DbContext" /> associé. </summary>
      <returns>Nouvelle requête avec NoTracking appliqué.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery`1.Equals(System.Object)">
      <summary>Détermine si la requête spécifiée est égale à la requête actuelle.</summary>
      <returns>true si la requête spécifiée est égale à la requête actuelle ; sinon, false.</returns>
      <param name="obj">Requête à comparer à l'objet actuel.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery`1.GetEnumerator">
      <summary>Exécute la requête et retourne un énumérateur pour les éléments. </summary>
      <returns>Énumérateur pour les éléments.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery`1.GetHashCode">
      <summary>Retourne la fonction de hachage pour la requête spécifiée.</summary>
      <returns>Fonction de hachage pour la requête spécifiée.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery`1.GetType">
      <summary>Obtient le type de la requête actuelle.</summary>
      <returns>Type de la requête actuelle.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>Exécute la requête et retourne un énumérateur pour les éléments.</summary>
      <returns>Objet <see cref="T:System.Collections.IEnumerator" /> qui peut être utilisé pour itérer au sein des éléments.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbSqlQuery`1.System#ComponentModel#IListSource#ContainsListCollection">
      <summary>Retourne false.</summary>
      <returns>false</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery`1.System#ComponentModel#IListSource#GetList">
      <summary>Lève une exception qui indique que la liaison directe à une requête de magasin n'est pas prise en charge.</summary>
      <returns>Ne retourne jamais aucune valeur ; lève toujours un exception.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery`1.ToString">
      <summary>Retourne un <see cref="T:System.String" /> qui contient la chaîne SQL définie lorsque la requête a été créée.  Les paramètres ne sont pas inclus. </summary>
      <returns>
        <see cref="T:System.String" /> représentant cette instance. </returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbUpdateConcurrencyException">
      <summary>Exception levée par <see cref="T:System.Data.Entity.DbContext" /> lorsque le comportement attendu est que SaveChanges pour une entité entraîne la mise à jour d'une base de données, mais en réalité, aucune ligne dans la base de données n'est affectée.  Cela indique habituellement que la base de données a été mise à jour simultanément et qu'un jeton de concurrence supposé correspondre n'a pas correspondu réellement. Les entrées d'état référencées par cette exception ne sont pas sérialisées pour des raisons de sécurité et l'accès aux entrées d'état après la sérialisation retourne une valeur null. </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbUpdateConcurrencyException.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Infrastructure.DbUpdateException" />. </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbUpdateConcurrencyException.#ctor(System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Infrastructure.DbUpdateException" />. </summary>
      <param name="message">Message.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbUpdateConcurrencyException.#ctor(System.String,System.Exception)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Infrastructure.DbUpdateException" />. </summary>
      <param name="message">Message.</param>
      <param name="innerException">Exception interne.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbUpdateException">
      <summary>Représente les exceptions rencontrées pendant une mise à jour de la base de données.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbUpdateException.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Infrastructure.DbUpdateException" />. </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbUpdateException.#ctor(System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Infrastructure.DbUpdateException" />. </summary>
      <param name="message">Message.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbUpdateException.#ctor(System.String,System.Exception)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Infrastructure.DbUpdateException" />. </summary>
      <param name="message">Message.</param>
      <param name="innerException">Exception interne.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbUpdateException.Entries">
      <summary>Obtient des objets <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" /> qui représentent les entités qui n'ont pas pu être enregistrées dans la base de données. </summary>
      <returns>Entités qui n'ont pas pu être enregistrées dans la base de données. </returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.EdmMetadata">
      <summary>Représente une entité utilisée pour stocker des métadonnées sur un EDM dans la base de données. </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.EdmMetadata.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Infrastructure.EdmMetadata" />.</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.EdmMetadata.Id">
      <summary>Obtient ou définit l'Identificateur de l'entité de métadonnées, qui est actuellement toujours 1. </summary>
      <returns>Identificateur.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.EdmMetadata.ModelHash">
      <summary>Obtient ou définit le hachage de modèle utilisé pour vérifier si le modèle a changé depuis que la base de données a été créée à partir de lui. </summary>
      <returns>Hachage de modèle.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.EdmMetadata.TryGetModelHash(System.Data.Entity.DbContext)">
      <summary>Tente d'obtenir le hachage de modèle calculé par Code First pour le contexte donné. Cette méthode retournera null si le contexte n'est pas utilisé dans le mode Code First. </summary>
      <returns>Chaîne de hachage.</returns>
      <param name="context">Contexte.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.EdmxWriter">
      <summary>Contient les méthodes utilisées pour accéder à l'Entity Data Model créé par Code First dans le formulaire EDMX. Ces méthodes sont généralement utilisées pour le débogage, lorsqu'il est nécessaire de regarder le modèle que Code First créé en interne. </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.EdmxWriter.WriteEdmx(System.Data.Entity.DbContext,System.Xml.XmlWriter)">
      <summary>Utilise Code First avec le contexte donné et écrit l'Entity Data Model résultant dans l'enregistreur spécifié dans le formulaire EDMX.  Cette méthode peut être utilisée uniquement avec les instances de contexte qui utilisent Code First et créent le modèle en interne.  La méthode ne peut pas être utilisée pour les contextes créés à l'aide de Database First ou Model First, pour les contextes créés à l'aide d'un <see cref="T:System.Data.Objects.ObjectContext" /> préexistant, ou pour les contextes créés à l'aide d'un <see cref="T:System.Data.Entity.Infrastructure.DbCompiledModel" /> préexistant. </summary>
      <param name="context">Contexte.</param>
      <param name="writer">Enregistreur.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.EdmxWriter.WriteEdmx(System.Data.Entity.Infrastructure.DbModel,System.Xml.XmlWriter)">
      <summary>Écrit l'Entity Data Model représenté par le <see cref="T:System.Data.Entity.Infrastructure.DbModel" /> donné sur l'enregistreur spécifié dans le formulaire EDMX. </summary>
      <param name="model">Objet représentant l'EDM.</param>
      <param name="writer">Enregistreur.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.IDbConnectionFactory">
      <summary>Les implémentations de cette interface sont utilisées pour créer des objets DbConnection pour un type de serveur de base de données selon un nom de la base de données spécifique.   Une instance est définie sur la classe <see cref="T:System.Data.Entity.Database" /> pour que tous les objets <see cref="T:System.Data.Entity.DbContext" /> qui doivent être créés sans informations de connexion ou juste un nom de base de données ou chaîne de connexion, utilisent un certain type de serveur de base de données. Deux implémentations de cette interface sont fournies : <see cref="T:System.Data.Entity.Infrastructure.SqlConnectionFactory" /> utilisé pour créer des connexions à Microsoft SQL Server, notamment les éditions EXPRESS, et <see cref="T:System.Data.Entity.Infrastructure.SqlCeConnectionFactory" /> utilisé pour créer des connexions à Microsoft SQL Server Compact Edition. D'autres implémentations pour d'autres serveurs de bases de données peuvent être ajoutées au besoin. Les implémentations doivent être thread-safe ou immuables puisqu'elles peuvent être accédées en même temps par plusieurs threads. </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.IDbConnectionFactory.CreateConnection(System.String)">
      <summary>Crée une connexion en fonction du nom de la base de données spécifique ou d'une chaîne de connexion. </summary>
      <returns>DbConnection initialisé.</returns>
      <param name="nameOrConnectionString">Nom de base de données ou chaîne de connexion.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.IDbContextFactory`1">
      <summary>Fabrique permettant de créer des instances dérivées de <see cref="T:System.Data.Entity.DbContext" />. Implémentez cette interface pour activer les services au moment de la conception et l'instanciation des types de contexte qui n'ont pas de constructeur public par défaut. Vous pouvez créer des instances dérivées de <see cref="T:System.Data.Entity.DbContext" /> au moment de la conception pour activer des expériences de conception spécifiques, telles que le rendu des modèles et la génération du DDL. Les services au moment de la conception peuvent détecter automatiquement les implémentations de cette interface qui se trouvent dans le même assembly que le type de <see cref="T:System.Data.Entity.DbContext" /> dérivé.</summary>
      <typeparam name="TContext">Ce paramètre de type est covariant. Autrement dit, vous pouvez utiliser le type que vous avez spécifié ou tout type plus dérivé. Pour plus d'informations sur la covariance et la contravariance, consultez .</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.IDbContextFactory`1.Create">
      <summary>Crée une nouvelle instance d'un type de <see cref="T:System.Data.Entity.DbContext" /> dérivé.</summary>
      <returns>Instance de <see cref="TContext" />.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.IncludeMetadataConvention">
      <summary>Cette convention <see cref="T:System.Data.Entity.DbModelBuilder" /> fait en sorte que <see cref="T:System.Data.Entity.DbModelBuilder" /> inclue les métadonnées sur le modèle lorsqu'il génère le modèle. Lorsque <see cref="T:System.Data.Entity.DbContext" /> crée un modèle par convention, il ajoutera cette convention à la liste de celles utilisées par le <see cref="T:System.Data.Entity.DbModelBuilder" />.  Cela entraînera l'écriture des métadonnées du dans la base de données si le <see cref="T:System.Data.Entity.DbContext" /> est utilisé pour créer la base de données. Cela peut ensuite être utilisé pour vérifier si le modèle a changé depuis la dernière fois qu'il a été utilisé sur la base de données.  Cette convention peut être supprimée dans la liste des conventions <see cref="T:System.Data.Entity.DbModelBuilder" /> en substituant la méthode <see cref="M:System.Data.Entity.DbContext.OnModelCreating(System.Data.Entity.DbModelBuilder)" />. </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.IncludeMetadataConvention.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Infrastructure.IncludeMetadataConvention" />.</summary>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.IObjectContextAdapter">
      <summary>Interface implémentée par les objets qui peuvent fournir une instance <see cref="P:System.Data.Entity.Infrastructure.IObjectContextAdapter.ObjectContext" />. La classe <see cref="T:System.Data.Entity.DbContext" /> implémente cette interface pour fournir l'accès à l'ObjectContext sous-jacent. </summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.IObjectContextAdapter.ObjectContext">
      <summary>Obtient le contexte de l'objet. </summary>
      <returns>Contexte de l'objet.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.LocalDbConnectionFactory">
      <summary>     Les instances de cette classe sont utilisées pour créer des objets DbConnection pour SQL Server LocalDb en fonction d'un nom de base de données spécifique ou d'une chaîne de connexion. </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.LocalDbConnectionFactory.#ctor(System.String)">
      <summary>     Crée une instance de la fabrique de connexions pour la version spécifique de LocalDb.     Pour SQL Server 2012 LocalDb, utilisez v11.0. </summary>
      <param name="localDbVersion">Version de LocalDb à utiliser.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.LocalDbConnectionFactory.#ctor(System.String,System.String)">
      <summary>     Crée une instance de la fabrique de connexions pour la version spécifique de LocalDb.     Pour SQL Server 2012 LocalDb, utilisez v11.0.      </summary>
      <param name="localDbVersion">Version de LocalDb à utiliser.</param>
      <param name="baseConnectionString">     Chaîne de connexion à utiliser pour les options de la base de données autres que le catalogue initial, la source de données et la propriété AttachDbFilename.     Le catalogue initial et la propriété AttachDbFilename sont ajoutés à cette chaîne en fonction du nom de base de données lorsque CreateConnection est appelé.     La source de données est définie en fonction de l'argument LocalDbVersion. </param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.LocalDbConnectionFactory.BaseConnectionString">
      <summary>     Chaîne de connexion à utiliser pour les options de la base de données autres que le catalogue initial, la source de données et la propriété AttachDbFilename.     Le catalogue initial et la propriété AttachDbFilename sont ajoutés à cette chaîne en fonction du nom de base de données lorsque CreateConnection est appelé.     La source de données est définie en fonction de l'argument LocalDbVersion.     La valeur par défaut est « Integrated Security=True; MultipleActiveResultSets=True; ». </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.LocalDbConnectionFactory.CreateConnection(System.String)">
      <summary>     Crée une connexion pour SQL Server LocalDb en fonction du nom de base de données spécifié ou d'une chaîne de connexion.     Si la chaîne donnée contient un caractère « = », elle est traitée comme une chaîne de connexion complète, sinon, elle est traitée comme un nom de base de données uniquement. </summary>
      <returns>DbConnection initialisé.</returns>
      <param name="nameOrConnectionString">Nom de base de données ou chaîne de connexion.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.ModelContainerConvention">
      <summary>Cette convention <see cref="T:System.Data.Entity.DbModelBuilder" /> utilise le nom de la classe <see cref="T:System.Data.Entity.DbContext" /> dérivée en tant que conteneur pour le modèle conceptuel construit par Code First. </summary>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.ModelNamespaceConvention">
      <summary>Cette convention <see cref="T:System.Data.Entity.DbModelBuilder" /> utilise l'espace de noms de la classe <see cref="T:System.Data.Entity.DbContext" /> dérivée en tant qu'espace de noms du modèle conceptuel construit par Code First. </summary>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.ReplacementDbQueryWrapper`1">
      <summary>Les instances de cette classe sont utilisées en interne pour créer des expressions constantes qui sont insérées dans l'arborescence d'expressions pour remplacer des références à <see cref="T:System.Data.Entity.Infrastructure.DbQuery`1" /> et <see cref="T:System.Data.Entity.Infrastructure.DbQuery" />. </summary>
      <typeparam name="TElement">Type de l'élément.</typeparam>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.ReplacementDbQueryWrapper`1.Query">
      <summary>Propriété publique attendue dans l'arborescence d'expressions LINQ.</summary>
      <returns>Retourne <see cref="T:System.Data.Objects.ObjectQuery`1" />. Requête.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.SqlCeConnectionFactory">
      <summary>Les instances de cette classe sont utilisées pour créer des objets DbConnection pour SQL Server Compact Edition en fonction d'un nom de base de données donné ou d'une chaîne de connexion. </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.SqlCeConnectionFactory.#ctor(System.String)">
      <summary> Crée une fabrique de connexions avec des propriétés <see cref="P:System.Data.Entity.Infrastructure.SqlCeConnectionFactory.DatabaseDirectory" /> et <see cref="P:System.Data.Entity.Infrastructure.SqlCeConnectionFactory.BaseConnectionString" /> vides (valeur par défaut). </summary>
      <param name="providerInvariantName">Nom invariant du fournisseur qui spécifie la version de SQL Server Compact Edition à utiliser.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.SqlCeConnectionFactory.#ctor(System.String,System.String,System.String)">
      <summary>Crée une fabrique de connexions avec les propriétés <see cref="P:System.Data.Entity.Infrastructure.SqlCeConnectionFactory.DatabaseDirectory" /> et <see cref="P:System.Data.Entity.Infrastructure.SqlCeConnectionFactory.BaseConnectionString" /> données. </summary>
      <param name="providerInvariantName">Nom invariant du fournisseur qui spécifie la version de SQL Server Compact Edition à utiliser. </param>
      <param name="databaseDirectory">Chemin d'accès à ajouter au nom de la base de données, qui formera le nom du fichier utilisé par SQL Server Compact Edition lorsqu'il crée ou lit le fichier de base de données. Une chaîne vide entraîne l'utilisation de l'emplacement par défaut de la part de SQL Server Compact Edition, c'est-à-dire l'emplacement de fichier de base de données. </param>
      <param name="baseConnectionString">Chaîne de connexion à utiliser pour les options à la base de données autres que « Data Source ». Data Source sera ajouté à cette chaîne en fonction du nom de la base de données lorsque CreateConnection est appelé. </param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.SqlCeConnectionFactory.BaseConnectionString">
      <summary>Chaîne de connexion à utiliser pour les options à la base de données autres que « Data Source ». Data Source sera ajouté à cette chaîne en fonction du nom de la base de données lorsque CreateConnection est appelé. La valeur par défaut est la chaîne vide, indiquant qu'aucune autre option ne sera utilisée. </summary>
      <returns>Chaîne de connexion utilisée.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.SqlCeConnectionFactory.CreateConnection(System.String)">
      <summary>Crée une connexion pour SQL Server Compact Edition en fonction du nom de la base de données spécifiée ou d'une chaîne de connexion. Si la chaîne donnée contient un caractère '=', elle est traitée comme une chaîne de connexion complète, sinon, elle est traitée uniquement comme un nom de base de données. </summary>
      <returns>DbConnection initialisé.</returns>
      <param name="nameOrConnectionString">Nom de base de données ou chaîne de connexion.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.SqlCeConnectionFactory.DatabaseDirectory">
      <summary>Chemin d'accès à ajouter au nom de la base de données, qui formera le nom du fichier utilisé par SQL Server Compact Edition lorsqu'il crée ou lit le fichier de base de données. La valeur par défaut est « | DataDirectory | », indiquant que le fichier sera placé dans le répertoire de données désigné. </summary>
      <returns>Chemin d'accès pour la base de données.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.SqlCeConnectionFactory.ProviderInvariantName">
      <summary>Nom invariant du fournisseur qui spécifie la version de SQL Server Compact Edition à utiliser. </summary>
      <returns>Nom invariant du fournisseur.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.SqlConnectionFactory">
      <summary> Les instances de cette classe sont utilisées pour créer des objets DbConnection pour SQL Server en fonction d'un nom de base de données spécifique ou d'une chaîne de connexion. Par défaut, la connexion est établie à '. \SQLEXPRESS.'  Cela peut être modifié à l'aide de la chaîne de connexion de base lors de la construction d'une instance de fabrique. </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.SqlConnectionFactory.#ctor">
      <summary>Crée une fabrique de connexions avec une propriété BaseConnectionString par défaut de 'Data Source=.\SQLEXPRESS; Integrated Security=True; MultipleActiveResultSets=True'. </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.SqlConnectionFactory.#ctor(System.String)">
      <summary>Crée une fabrique de connexions avec la propriété BaseConnectionString donnée. </summary>
      <param name="baseConnectionString">Chaîne de connexion à utiliser pour les options de connexion à la base de données autres que le catalogue initial. Le catalogue initial sera ajouté à cette chaîne en fonction du nom de la base de données lorsque CreateConnection est appelé. </param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.SqlConnectionFactory.BaseConnectionString">
      <summary>Chaîne de connexion à utiliser pour les options de connexion à la base de données autres que le catalogue initial. Le catalogue initial sera ajouté à cette chaîne en fonction du nom de la base de données lorsque CreateConnection est appelé. La valeur par défaut est 'Data Source=.\SQLEXPRESS; Integrated Security=True; MultipleActiveResultSets=True'. </summary>
      <returns>Chaîne de connexion</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.SqlConnectionFactory.CreateConnection(System.String)">
      <summary>Crée une connexion pour SQL Server en fonction du nom de la base de données spécifiée ou d'une chaîne de connexion. Si la chaîne donnée contient un caractère '=', elle est traitée comme une chaîne de connexion complète, sinon, elle est traitée uniquement comme un nom de base de données. </summary>
      <returns>DbConnection initialisé.</returns>
      <param name="nameOrConnectionString">Nom de base de données ou chaîne de connexion.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.SuppressDbSetInitializationAttribute">
      <summary>Cet attribut peut être appliqué à une classe <see cref="T:System.Data.Entity.DbContext" /> dérivée entière ou aux propriétés <see cref="T:System.Data.Entity.DbSet`1" /> ou <see cref="T:System.Data.Entity.IDbSet`1" /> individuelles sur cette classe.  En cas d'application, toutes les propriétés <see cref="T:System.Data.Entity.DbSet`1" /> ou <see cref="T:System.Data.Entity.IDbSet`1" /> découvertes seront toujours incluses dans le modèle mais ne seront pas initialisées automatiquement. </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.SuppressDbSetInitializationAttribute.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Infrastructure.SuppressDbSetInitializationAttribute" />.</summary>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.UnintentionalCodeFirstException">
      <summary>Exception levée lorsqu'un contexte est généré à partir des modèles <see cref="T:System.Data.Entity.DbContext" /> en mode Database First ou Model First, puis utilisée en mode Code First. </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.UnintentionalCodeFirstException.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Infrastructure.UnintentionalCodeFirstException" />. </summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.UnintentionalCodeFirstException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Infrastructure.UnintentionalCodeFirstException" />. </summary>
      <param name="info">Objet qui contient les données sérialisées de l'objet.</param>
      <param name="context">Informations contextuelles sur la source ou la destination.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.UnintentionalCodeFirstException.#ctor(System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Infrastructure.UnintentionalCodeFirstException" />. </summary>
      <param name="message">Message.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.UnintentionalCodeFirstException.#ctor(System.String,System.Exception)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Infrastructure.UnintentionalCodeFirstException" />. </summary>
      <param name="message">Message.</param>
      <param name="innerException">Exception interne.</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.DbMigration">
      <summary>Représente la classe de base pour les migrations basées sur le code.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Migrations.DbMigration" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.AddColumn(System.String,System.String,System.Func{System.Data.Entity.Migrations.Builders.ColumnBuilder,System.Data.Entity.Migrations.Model.ColumnModel},System.Object)">
      <summary>     Ajoute une opération pour ajouter une colonne à une table existante. </summary>
      <param name="table">     Nom de la table à laquelle la colonne doit être ajoutée.     Le nom de schéma est facultatif. Si aucun schéma n'est spécifié, dbo est utilisé par défaut. </param>
      <param name="name">     Nom de la colonne à ajouter. </param>
      <param name="columnAction">     Action qui spécifie la colonne à ajouter. Par exemple, c =&amp;gt; c.Int(nullable: false, defaultValue: 3).</param>
      <param name="anonymousArguments">     Arguments supplémentaires qui peuvent être traités par les fournisseurs.      Utilisez une syntaxe de type anonyme pour spécifier les arguments, par exemple « new { SampleArgument = "MyValue" } ». </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.AddForeignKey(System.String,System.String,System.String,System.String,System.Boolean,System.String,System.Object)">
      <summary>     Ajoute une opération pour créer une contrainte de clé étrangère. </summary>
      <param name="dependentTable">     Table qui contient la colonne de clé étrangère.     Le nom de schéma est facultatif. Si aucun schéma n'est spécifié, dbo est utilisé par défaut. </param>
      <param name="dependentColumn">Colonne de clé étrangère.</param>
      <param name="principalTable">     Table qui contient la colonne à laquelle cette clé étrangère fait référence.     Le nom de schéma est facultatif. Si aucun schéma n'est spécifié, dbo est utilisé par défaut. </param>
      <param name="principalColumn">     Colonne à laquelle cette clé étrangère fait référence.      Si aucune valeur n'est fournie, la clé primaire de la table principale est référencée. </param>
      <param name="cascadeDelete">     Valeur indiquant si la suppression en cascade doit être configurée pour la relation de clé étrangère.     Si aucune valeur n'est fournie, la suppression en cascade est désactivée. </param>
      <param name="name">     Nom de la contrainte de clé étrangère dans la base de données.     Si aucune valeur n'est fournie, un nom unique est généré. </param>
      <param name="anonymousArguments">     Arguments supplémentaires qui peuvent être traités par les fournisseurs.      Utilisez une syntaxe de type anonyme pour spécifier les arguments, par exemple « new { SampleArgument = "MyValue" } ». </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.AddForeignKey(System.String,System.String[],System.String,System.String[],System.Boolean,System.String,System.Object)">
      <summary>     Ajoute une opération pour créer une contrainte de clé étrangère. </summary>
      <param name="dependentTable">     Table qui contient les colonnes de clé étrangère.     Le nom de schéma est facultatif. Si aucun schéma n'est spécifié, dbo est utilisé par défaut. </param>
      <param name="dependentColumns">Colonnes de clé étrangère.</param>
      <param name="principalTable">     Table qui contient les colonnes auxquelles cette clé étrangère fait référence.     Le nom de schéma est facultatif. Si aucun schéma n'est spécifié, dbo est utilisé par défaut. </param>
      <param name="principalColumns">     Colonnes auxquelles cette clé étrangère fait référence.      Si aucune valeur n'est fournie, la clé primaire de la table principale est référencée. </param>
      <param name="cascadeDelete">     Valeur indiquant si la suppression en cascade doit être configurée pour la relation de clé étrangère.     Si aucune valeur n'est fournie, la suppression en cascade est désactivée. </param>
      <param name="name">     Nom de la contrainte de clé étrangère dans la base de données.     Si aucune valeur n'est fournie, un nom unique est généré. </param>
      <param name="anonymousArguments">     Arguments supplémentaires qui peuvent être traités par les fournisseurs.      Utilisez une syntaxe de type anonyme pour spécifier les arguments, par exemple « new { SampleArgument = "MyValue" } ». </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.AddPrimaryKey(System.String,System.String,System.String,System.Object)">
      <summary>     Ajoute une opération pour créer une clé primaire. </summary>
      <param name="table">     Table qui contient la colonne de clé primaire.     Le nom de schéma est facultatif. Si aucun schéma n'est spécifié, dbo est utilisé par défaut. </param>
      <param name="column">Colonne de clé primaire.</param>
      <param name="name">     Nom de la clé primaire dans la base de données.     Si aucune valeur n'est fournie, un nom unique est généré. </param>
      <param name="anonymousArguments">     Arguments supplémentaires qui peuvent être traités par les fournisseurs.      Utilisez une syntaxe de type anonyme pour spécifier les arguments, par exemple « new { SampleArgument = "MyValue" } ». </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.AddPrimaryKey(System.String,System.String[],System.String,System.Object)">
      <summary>     Ajoute une opération pour créer une clé primaire basée sur plusieurs colonnes. </summary>
      <param name="table">     Table qui contient les colonnes de clé primaire.     Le nom de schéma est facultatif. Si aucun schéma n'est spécifié, dbo est utilisé par défaut. </param>
      <param name="columns">Colonnes de clé primaire.</param>
      <param name="name">     Nom de la clé primaire dans la base de données.     Si aucune valeur n'est fournie, un nom unique est généré. </param>
      <param name="anonymousArguments">     Arguments supplémentaires qui peuvent être traités par les fournisseurs.      Utilisez une syntaxe de type anonyme pour spécifier les arguments, par exemple « new { SampleArgument = "MyValue" } ». </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.AlterColumn(System.String,System.String,System.Func{System.Data.Entity.Migrations.Builders.ColumnBuilder,System.Data.Entity.Migrations.Model.ColumnModel},System.Object)">
      <summary>     Ajoute une opération pour modifier la définition d'une colonne existante. </summary>
      <param name="table">     Nom de la table dans laquelle la colonne existe. Le nom de schéma est facultatif. Si aucun schéma n'est spécifié, dbo est utilisé par défaut. </param>
      <param name="name">Nom de la colonne à modifier.</param>
      <param name="columnAction">     Action qui spécifie la nouvelle définition de la colonne. Par exemple, c =&amp;gt; c.String(nullable: false, defaultValue: "none").</param>
      <param name="anonymousArguments">     Arguments supplémentaires qui peuvent être traités par les fournisseurs.      Utilisez une syntaxe de type anonyme pour spécifier les arguments, par exemple « new { SampleArgument = "MyValue" } ». </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.CreateIndex(System.String,System.String,System.Boolean,System.String,System.Object)">
      <summary>     Ajoute une opération pour créer un index sur une seule colonne. </summary>
      <param name="table">     Nom de la table sur laquelle l'index doit être créé.     Le nom de schéma est facultatif. Si aucun schéma n'est spécifié, dbo est utilisé par défaut. </param>
      <param name="column">Nom de la colonne sur laquelle l'index doit être créé.</param>
      <param name="unique">     Valeur indiquant s'il s'agit d'un index unique.     Si aucune valeur n'est fournie, un index non unique est créé. </param>
      <param name="name">     Nom à utiliser pour l'index dans la base de données.     Si aucune valeur n'est fournie, un nom unique est généré. </param>
      <param name="anonymousArguments">     Arguments supplémentaires qui peuvent être traités par les fournisseurs.      Utilisez une syntaxe de type anonyme pour spécifier les arguments, par exemple « new { SampleArgument = "MyValue" } ». </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.CreateIndex(System.String,System.String[],System.Boolean,System.String,System.Object)">
      <summary>     Ajoute une opération pour créer un index sur plusieurs colonnes. </summary>
      <param name="table">     Nom de la table sur laquelle l'index doit être créé.     Le nom de schéma est facultatif. Si aucun schéma n'est spécifié, dbo est utilisé par défaut. </param>
      <param name="columns">Nom des colonnes sur lesquelles l'index doit être créé.</param>
      <param name="unique">     Valeur indiquant s'il s'agit d'un index unique.     Si aucune valeur n'est fournie, un index non unique est créé. </param>
      <param name="name">     Nom à utiliser pour l'index dans la base de données.     Si aucune valeur n'est fournie, un nom unique est généré. </param>
      <param name="anonymousArguments">     Arguments supplémentaires qui peuvent être traités par les fournisseurs.      Utilisez une syntaxe de type anonyme pour spécifier les arguments, par exemple « new { SampleArgument = "MyValue" } ». </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.CreateTable``1(System.String,System.Func{System.Data.Entity.Migrations.Builders.ColumnBuilder,``0},System.Object)">
      <summary>     Ajoute une opération pour créer une table. </summary>
      <returns>Objet permettant une configuration plus avancée de l'opération de création de table.</returns>
      <param name="name">Nom de la table. Le nom de schéma est facultatif. Si aucun schéma n'est spécifié, dbo est utilisé par défaut.</param>
      <param name="columnsAction">     Action qui spécifie les colonnes à inclure dans la table. Par exemple, t =&amp;gt; new { Id = t.Int(identity: true), Name = t.String() }.</param>
      <param name="anonymousArguments">     Arguments supplémentaires qui peuvent être traités par les fournisseurs.      Utilisez une syntaxe de type anonyme pour spécifier les arguments, par exemple « new { SampleArgument = "MyValue" } ». </param>
      <typeparam name="TColumns">     Colonnes de cette opération de création de table.      Vous n'avez pas besoin de spécifier ce type, il est déduit du paramètre columnsAction que vous fournissez. </typeparam>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.Down">
      <summary>     Opérations à effectuer au cours du processus de rétrogradation. </summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.DropColumn(System.String,System.String,System.Object)">
      <summary>     Ajoute une opération pour supprimer une colonne existante. </summary>
      <param name="table">     Nom de la table dans laquelle la colonne doit être supprimée.     Le nom de schéma est facultatif. Si aucun schéma n'est spécifié, dbo est utilisé par défaut. </param>
      <param name="name">Nom de la colonne à supprimer.</param>
      <param name="anonymousArguments">     Arguments supplémentaires qui peuvent être traités par les fournisseurs.      Utilisez une syntaxe de type anonyme pour spécifier les arguments, par exemple « new { SampleArgument = "MyValue" } ». </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.DropForeignKey(System.String,System.String,System.Object)">
      <summary>     Ajoute une opération pour supprimer une contrainte de clé étrangère en fonction de son nom. </summary>
      <param name="dependentTable">     Table qui contient la colonne de clé étrangère.     Le nom de schéma est facultatif. Si aucun schéma n'est spécifié, dbo est utilisé par défaut. </param>
      <param name="name">Nom de la contrainte de clé étrangère dans la base de données.</param>
      <param name="anonymousArguments">     Arguments supplémentaires qui peuvent être traités par les fournisseurs.      Utilisez une syntaxe de type anonyme pour spécifier les arguments, par exemple « new { SampleArgument = "MyValue" } ». </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.DropForeignKey(System.String,System.String,System.String,System.String,System.Object)">
      <summary>     Ajoute une opération pour supprimer une contrainte de clé étrangère en fonction de la colonne ciblée. </summary>
      <param name="dependentTable">     Table qui contient la colonne de clé étrangère.     Le nom de schéma est facultatif. Si aucun schéma n'est spécifié, dbo est utilisé par défaut. </param>
      <param name="dependentColumn">Colonne de clé étrangère.</param>
      <param name="principalTable">     Table qui contient la colonne à laquelle cette clé étrangère fait référence.     Le nom de schéma est facultatif. Si aucun schéma n'est spécifié, dbo est utilisé par défaut. </param>
      <param name="principalColumn">Colonnes auxquelles cette clé étrangère fait référence.</param>
      <param name="anonymousArguments">     Arguments supplémentaires qui peuvent être traités par les fournisseurs.      Utilisez une syntaxe de type anonyme pour spécifier les arguments, par exemple « new { SampleArgument = "MyValue" } ». </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.DropForeignKey(System.String,System.String[],System.String,System.Object)">
      <summary>     Ajoute une opération pour supprimer une contrainte de clé étrangère en fonction des colonnes ciblées. </summary>
      <param name="dependentTable">     Table qui contient les colonnes de clé étrangère.     Le nom de schéma est facultatif. Si aucun schéma n'est spécifié, dbo est utilisé par défaut. </param>
      <param name="dependentColumns">Colonnes de clé étrangère.</param>
      <param name="principalTable">     Table qui contient les colonnes auxquelles cette clé étrangère fait référence.     Le nom de schéma est facultatif. Si aucun schéma n'est spécifié, dbo est utilisé par défaut. </param>
      <param name="anonymousArguments">     Arguments supplémentaires qui peuvent être traités par les fournisseurs.      Utilisez une syntaxe de type anonyme pour spécifier les arguments, par exemple « new { SampleArgument = "MyValue" } ». </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.DropIndex(System.String,System.String,System.Object)">
      <summary>     Ajoute une opération pour supprimer un index en fonction de son nom. </summary>
      <param name="table">     Nom de la table dans laquelle l'index doit être supprimé.     Le nom de schéma est facultatif. Si aucun schéma n'est spécifié, dbo est utilisé par défaut. </param>
      <param name="name">Nom de l'index à supprimer.</param>
      <param name="anonymousArguments">     Arguments supplémentaires qui peuvent être traités par les fournisseurs.      Utilisez une syntaxe de type anonyme pour spécifier les arguments, par exemple « new { SampleArgument = "MyValue" } ». </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.DropIndex(System.String,System.String[],System.Object)">
      <summary>     Ajoute une opération pour supprimer un index en fonction des colonnes ciblées. </summary>
      <param name="table">     Nom de la table dans laquelle l'index doit être supprimé.     Le nom de schéma est facultatif. Si aucun schéma n'est spécifié, dbo est utilisé par défaut. </param>
      <param name="columns">Nom de la ou des colonnes ciblées par l'index.</param>
      <param name="anonymousArguments">     Arguments supplémentaires qui peuvent être traités par les fournisseurs.      Utilisez une syntaxe de type anonyme pour spécifier les arguments, par exemple « new { SampleArgument = "MyValue" } ». </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.DropPrimaryKey(System.String,System.Object)">
      <summary>     Ajoute une opération pour supprimer une clé primaire existante qui a été créée avec le nom par défaut. </summary>
      <param name="table">     Table qui contient la colonne de clé primaire.     Le nom de schéma est facultatif. Si aucun schéma n'est spécifié, dbo est utilisé par défaut. </param>
      <param name="anonymousArguments">     Arguments supplémentaires qui peuvent être traités par les fournisseurs.      Utilisez une syntaxe de type anonyme pour spécifier les arguments, par exemple « new { SampleArgument = "MyValue" } ». </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.DropPrimaryKey(System.String,System.String,System.Object)">
      <summary>     Ajoute une opération pour supprimer une clé primaire existante n'ayant pas le nom par défaut. </summary>
      <param name="table">     Table qui contient la colonne de clé primaire.     Le nom de schéma est facultatif. Si aucun schéma n'est spécifié, dbo est utilisé par défaut. </param>
      <param name="name">Nom de la clé primaire à supprimer.</param>
      <param name="anonymousArguments">     Arguments supplémentaires qui peuvent être traités par les fournisseurs.      Utilisez une syntaxe de type anonyme pour spécifier les arguments, par exemple « new { SampleArgument = "MyValue" } ». </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.DropTable(System.String,System.Object)">
      <summary>     Ajoute une opération pour supprimer une table. </summary>
      <param name="name">     Nom de la table à supprimer.     Le nom de schéma est facultatif. Si aucun schéma n'est spécifié, dbo est utilisé par défaut. </param>
      <param name="anonymousArguments">     Arguments supplémentaires qui peuvent être traités par les fournisseurs.      Utilisez une syntaxe de type anonyme pour spécifier les arguments, par exemple « new { SampleArgument = "MyValue" } ». </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.Equals(System.Object)">
      <summary>Détermine si cette instance est égale à l'objet spécifié.</summary>
      <returns>true si l'objet spécifié est égal à l'objet actuel ; sinon, false.</returns>
      <param name="obj">Objet à comparer à l'objet actuel.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.GetHashCode">
      <summary>Obtient les données d'un paramètre ou d'une colonne en tant que type spécifié.</summary>
      <returns>Code de hachage de l'objet actuel.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.GetType">
      <summary>Retourne le type d'exécution de l'instance actuelle.</summary>
      <returns>Instance de type qui représente le type d'exécution exact de l'instance actuelle.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.MemberwiseClone">
      <summary>Crée une copie superficielle de l'objet actuel.</summary>
      <returns>Copie superficielle de l'objet actuel.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.MoveTable(System.String,System.String,System.Object)">
      <summary>     Ajoute une opération pour déplacer une table vers un nouveau schéma. </summary>
      <param name="name">     Nom de la table à déplacer.     Le nom de schéma est facultatif. Si aucun schéma n'est spécifié, dbo est utilisé par défaut. </param>
      <param name="newSchema">Schéma vers lequel la table doit être déplacée.</param>
      <param name="anonymousArguments">     Arguments supplémentaires qui peuvent être traités par les fournisseurs.      Utilisez une syntaxe de type anonyme pour spécifier les arguments, par exemple « new { SampleArgument = "MyValue" } ». </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.RenameColumn(System.String,System.String,System.String,System.Object)">
      <summary>     Ajoute une opération pour renommer une colonne. </summary>
      <param name="table">     Nom de la table qui contient la colonne à renommer.     Le nom de schéma est facultatif. Si aucun schéma n'est spécifié, dbo est utilisé par défaut. </param>
      <param name="name">Nom de la colonne à renommer.</param>
      <param name="newName">Nouveau nom de la colonne.</param>
      <param name="anonymousArguments">     Arguments supplémentaires qui peuvent être traités par les fournisseurs.      Utilisez une syntaxe de type anonyme pour spécifier les arguments, par exemple « new { SampleArgument = "MyValue" } ». </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.RenameTable(System.String,System.String,System.Object)">
      <summary>     Ajoute une opération pour renommer une table. Pour modifier le schéma d'une table, utilisez MoveTable.</summary>
      <param name="name">     Nom de la table à renommer.     Le nom de schéma est facultatif. Si aucun schéma n'est spécifié, dbo est utilisé par défaut. </param>
      <param name="newName">     Nouveau nom de la table.     Le nom de schéma est facultatif. Si aucun schéma n'est spécifié, dbo est utilisé par défaut. </param>
      <param name="anonymousArguments">     Arguments supplémentaires qui peuvent être traités par les fournisseurs.      Utilisez une syntaxe de type anonyme pour spécifier les arguments, par exemple « new { SampleArgument = "MyValue" } ». </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.Sql(System.String,System.Boolean,System.Object)">
      <summary>     Ajoute une opération pour exécuter une commande SQL. </summary>
      <param name="sql">Commande SQL à exécuter.</param>
      <param name="suppressTransaction">     Valeur indiquant si la commande SQL doit être exécutée hors de la transaction utilisée pour le processus de migration.     Si aucune valeur n'est fournie, la commande SQL est exécutée au sein de la transaction. </param>
      <param name="anonymousArguments">     Arguments supplémentaires qui peuvent être traités par les fournisseurs.      Utilisez une syntaxe de type anonyme pour spécifier les arguments, par exemple « new { SampleArgument = "MyValue" } ». </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.ToString">
      <summary>Retourne une chaîne qui représente l'objet actuel.</summary>
      <returns>Chaîne qui représente l'objet actuel.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.Up">
      <summary>     Opérations à effectuer au cours du processus de mise à niveau. </summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.DbMigrationsConfiguration">
      <summary>Configuration liée à l'utilisation des migrations pour un modèle spécifique. Vous créez généralement une classe de configuration dérivée de <see cref="T:System.Data.Entity.Migrations.DbMigrationsConfiguration`1" /> au lieu d'utiliser cette classe.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration.#ctor">
      <summary>     Initialise une nouvelle instance de la classe DbMigrationsConfiguration. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.DbMigrationsConfiguration.AutomaticMigrationDataLossAllowed">
      <summary>     Obtient ou définit une valeur indiquant si la perte de données est acceptable pendant la migration automatique.     Si elle est définie sur false, une exception est levée si une perte de données risque de se produire dans le cadre d'une migration automatique. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.DbMigrationsConfiguration.AutomaticMigrationsEnabled">
      <summary>     Obtient ou définit une valeur indiquant si les migrations automatiques peuvent être utilisées lors de la migration de la base de données. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.DbMigrationsConfiguration.CodeGenerator">
      <summary>     Obtient ou définit le nom du générateur de code à utiliser lors de la génération de modèles automatiques pour les migrations. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.DbMigrationsConfiguration.ContextType">
      <summary>     Obtient ou définit le DbContext dérivé représentant le modèle à migrer. </summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration.GetSqlGenerator(System.String)">
      <summary>     Obtient le générateur de SQL défini pour une utilisation avec un fournisseur de base de données spécifique. </summary>
      <returns>Générateur de SQL défini pour le fournisseur de base de données.</returns>
      <param name="providerInvariantName">Nom du fournisseur de base de données pour lequel le générateur de SQL doit être obtenu.</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.DbMigrationsConfiguration.MigrationsAssembly">
      <summary>     Obtient ou définit l'assembly contenant les migrations basées sur le code. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.DbMigrationsConfiguration.MigrationsDirectory">
      <summary>     Obtient ou définit le sous-répertoire dans lequel les migrations basées sur le code sont stockées. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.DbMigrationsConfiguration.MigrationsNamespace">
      <summary>     Obtient ou définit l'espace de noms utilisé pour les migrations basées sur le code. </summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration.SetSqlGenerator(System.String,System.Data.Entity.Migrations.Sql.MigrationSqlGenerator)">
      <summary>     Ajoute un générateur de SQL à utiliser pour un fournisseur de base de données spécifique. </summary>
      <param name="providerInvariantName">Nom du fournisseur de base de données pour lequel le générateur de SQL doit être défini.</param>
      <param name="migrationSqlGenerator">Générateur de SQL à utiliser.</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.DbMigrationsConfiguration.TargetDatabase">
      <summary>     Obtient ou définit une valeur permettant de remplacer la connexion de la base de données à migrer. </summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.DbMigrationsConfiguration`1">
      <summary>Représente la configuration liée à l'utilisation des migrations pour un modèle spécifique.</summary>
      <typeparam name="TContext">Contexte.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration`1.#ctor">
      <summary>     Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Migrations.DbMigrationsConfiguration`1" />. </summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration`1.Equals(System.Object)">
      <summary>Retourne une valeur indiquant si cette instance est égale à un objet spécifié.</summary>
      <returns>true si l'objet spécifié est égal à l'objet actuel ; sinon, false.</returns>
      <param name="obj">Objet à comparer à l'objet actuel.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration`1.GetHashCode">
      <summary>Obtient les données d'un paramètre ou d'une colonne en tant que type spécifié.</summary>
      <returns>Code de hachage de l'objet actuel.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration`1.GetType">
      <summary>Retourne le type d'exécution de l'instance actuelle.</summary>
      <returns>Instance de type qui représente le type d'exécution exact de l'instance actuelle.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration`1.MemberwiseClone">
      <summary>Crée une copie superficielle de l'objet actuel.</summary>
      <returns>Copie superficielle de l'objet actuel.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration`1.Seed(`0)">
      <summary>     Exécution après la mise à niveau vers la migration la plus récente afin de permettre la mise à jour des données initiales. </summary>
      <param name="context">Contexte à utiliser pour mettre à jour les données initiales.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration`1.ToString">
      <summary>Retourne une chaîne qui représente l'objet actuel.</summary>
      <returns>Chaîne qui représente l'objet actuel.</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.DbMigrator">
      <summary>Utilisée pour appliquer les migrations existantes à une base de données. Cette classe peut être utilisée pour mettre à niveau et rétrograder une migration spécifique. Pour générer des modèles automatiques des migrations en fonction de modifications apportées à votre modèle, utilisez <see cref="T:System.Data.Entity.Migrations.Design.MigrationScaffolder" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrator.#ctor(System.Data.Entity.Migrations.DbMigrationsConfiguration)">
      <summary>     Initialise une nouvelle instance de la classe DbMigrator. </summary>
      <param name="configuration">Configuration à utiliser pour le processus de migration.</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.DbMigrator.Configuration">
      <summary>     Obtient la configuration utilisée pour le processus de migration. </summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrator.GetDatabaseMigrations">
      <summary>     Obtient toutes les migrations qui ont été appliquées à la base de données cible. </summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrator.GetLocalMigrations">
      <summary>     Obtient toutes les migrations qui sont définies dans l'assembly des migrations configurées. </summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrator.GetPendingMigrations">
      <summary>     Obtient toutes les migrations qui sont définies dans l'assembly, mais qui n'ont pas encore été appliquées à la base de données cible. </summary>
    </member>
    <member name="F:System.Data.Entity.Migrations.DbMigrator.InitialDatabase">
      <summary>     ID de migration représentant l'état de la base de données avant l'application de toute migration. </summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrator.Update(System.String)">
      <summary>     Met à jour la base de données cible vers une migration spécifique. </summary>
      <param name="targetMigration">Migration vers laquelle effectuer la mise à niveau ou rétrogradation.</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.IDbSetExtensions">
      <summary>Jeu de méthodes d'extension pour <see cref="T:System.Data.Entity.IDbSet`1" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.IDbSetExtensions.AddOrUpdate``1(System.Data.Entity.IDbSet{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},``0[])">
      <summary>Ajoute ou met à jour les entités par clé lorsque SaveChanges est appelée. Équivaut à une opération « upsert » dans la terminologie de base de données. Cette méthode peut être utile lors de l'alimentation des données à l'aide des migrations.</summary>
      <param name="set">Objet <see cref="T:System.Data.Entity.IDbSet`1" /> utilisé pour exécuter des opérations de création, de lecture, de mise à jour et de suppression.</param>
      <param name="identifierExpression">Expression spécifiant les propriétés à utiliser afin d'indiquer si une opération d'ajout ou de mise à jour doit être exécutée. </param>
      <param name="entities">Entités à ajouter ou mettre à jour.</param>
      <typeparam name="TEntity">Type de l'entité.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Migrations.IDbSetExtensions.AddOrUpdate``1(System.Data.Entity.IDbSet{``0},``0[])">
      <summary>Ajoute ou met à jour les entités par clé lorsque SaveChanges est appelée. Équivaut à une opération « upsert » dans la terminologie de base de données. Cette méthode peut être utile lors de l'alimentation des données à l'aide des migrations.</summary>
      <param name="set">Objet <see cref="T:System.Data.Entity.IDbSet`1" /> utilisé pour exécuter des opérations de création, de lecture, de mise à jour et de suppression.</param>
      <param name="entities">Entités à ajouter ou mettre à jour.</param>
      <typeparam name="TEntity">Type de l'entité.</typeparam>
    </member>
    <member name="T:System.Data.Entity.Migrations.Builders.ColumnBuilder">
      <summary>Représente une classe d'assistance utilisée pour configurer une colonne.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Migrations.Builders.ColumnBuilder" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Binary(System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Byte[],System.String,System.Boolean,System.String,System.String)">
      <summary>Crée une définition de colonne pour stocker des données binaires.</summary>
      <returns>Définition de colonne venant d'être construite.</returns>
      <param name="nullable">Valeur indiquant si la colonne autorise ou non les valeurs Null.</param>
      <param name="maxLength">Longueur maximale autorisée des données de tableau.</param>
      <param name="fixedLength">Valeur indiquant si toutes les données doivent être complétées ou non jusqu'à la longueur maximale.</param>
      <param name="isMaxLength">Valeur indiquant si la longueur maximale prise en charge par le fournisseur de base de données doit être utilisée ou non.</param>
      <param name="defaultValue">Valeur constante à utiliser comme valeur par défaut de cette colonne.</param>
      <param name="defaultValueSql">Expression SQL utilisée comme valeur par défaut de cette colonne.</param>
      <param name="timestamp">Valeur indiquant si cette colonne doit être configurée comme un horodatage ou non.</param>
      <param name="name">Nom de la colonne.</param>
      <param name="storeType">Type de données spécifique du fournisseur à utiliser pour cette colonne.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Boolean(System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String,System.String,System.String)">
      <summary>Crée une définition de colonne pour stocker des données booléennes.</summary>
      <returns>Définition de colonne venant d'être construite.</returns>
      <param name="nullable">Valeur indiquant si la colonne autorise ou non les valeurs Null.</param>
      <param name="defaultValue">Valeur constante à utiliser comme valeur par défaut de cette colonne.</param>
      <param name="defaultValueSql">Expression SQL utilisée comme valeur par défaut de cette colonne.</param>
      <param name="name">Nom de la colonne.</param>
      <param name="storeType">Type de données spécifique du fournisseur à utiliser pour cette colonne.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Byte(System.Nullable{System.Boolean},System.Boolean,System.Nullable{System.Byte},System.String,System.String,System.String)">
      <summary>Crée une définition de colonne pour stocker des données de type Byte.</summary>
      <returns>Définition de colonne venant d'être construite.</returns>
      <param name="nullable">Valeur indiquant si la colonne autorise ou non les valeurs Null.</param>
      <param name="identity">Valeur indiquant si la base de données va générer ou non des valeurs pour cette colonne lors de l'insertion.</param>
      <param name="defaultValue">Valeur constante à utiliser comme valeur par défaut de cette colonne.</param>
      <param name="defaultValueSql">Expression SQL utilisée comme valeur par défaut de cette colonne.</param>
      <param name="name">Nom de la colonne.</param>
      <param name="storeType">Type de données spécifique du fournisseur à utiliser pour cette colonne.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.DateTime(System.Nullable{System.Boolean},System.Nullable{System.Byte},System.Nullable{System.DateTime},System.String,System.String,System.String)">
      <summary>Crée une définition de colonne pour stocker des données de type date et heure (DateTime).</summary>
      <returns>Définition de colonne venant d'être construite.</returns>
      <param name="nullable">Valeur indiquant si la colonne autorise ou non les valeurs Null.</param>
      <param name="precision">Précision de la colonne.</param>
      <param name="defaultValue">Valeur constante à utiliser comme valeur par défaut de cette colonne.</param>
      <param name="defaultValueSql">Expression SQL utilisée comme valeur par défaut de cette colonne.</param>
      <param name="name">Nom de la colonne.</param>
      <param name="storeType">Type de données spécifique du fournisseur à utiliser pour cette colonne.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.DateTimeOffset(System.Nullable{System.Boolean},System.Nullable{System.Byte},System.Nullable{System.DateTimeOffset},System.String,System.String,System.String)">
      <summary>Crée une définition de colonne pour stocker des données de type DateTimeOffset.</summary>
      <returns>Définition de colonne venant d'être construite.</returns>
      <param name="nullable">Valeur indiquant si la colonne autorise ou non les valeurs Null.</param>
      <param name="precision">Précision de la colonne.</param>
      <param name="defaultValue">Valeur constante à utiliser comme valeur par défaut de cette colonne.</param>
      <param name="defaultValueSql">Expression SQL utilisée comme valeur par défaut de cette colonne.</param>
      <param name="name">Nom de la colonne.</param>
      <param name="storeType">Type de données spécifique du fournisseur à utiliser pour cette colonne.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Decimal(System.Nullable{System.Boolean},System.Nullable{System.Byte},System.Nullable{System.Byte},System.Nullable{System.Decimal},System.String,System.String,System.String,System.Boolean)">
      <summary>Crée une définition de colonne pour stocker des données décimales.</summary>
      <returns>Définition de colonne venant d'être construite.</returns>
      <param name="nullable">Valeur indiquant si la colonne autorise ou non les valeurs Null.</param>
      <param name="precision">Précision numérique de la colonne.</param>
      <param name="scale">Échelle numérique de la colonne.</param>
      <param name="defaultValue">Valeur constante à utiliser comme valeur par défaut de cette colonne.</param>
      <param name="defaultValueSql">Expression SQL utilisée comme valeur par défaut de cette colonne.</param>
      <param name="name">Nom de la colonne.</param>
      <param name="storeType">Type de données spécifique du fournisseur à utiliser pour cette colonne.</param>
      <param name="identity">Valeur indiquant si la base de données va générer ou non des valeurs pour cette colonne lors de l'insertion.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Double(System.Nullable{System.Boolean},System.Nullable{System.Double},System.String,System.String,System.String)">
      <summary>Crée une définition de colonne pour stocker des données de type Double.</summary>
      <returns>Définition de colonne venant d'être construite.</returns>
      <param name="nullable">Valeur indiquant si la colonne autorise ou non les valeurs Null.</param>
      <param name="defaultValue">Valeur constante à utiliser comme valeur par défaut de cette colonne.</param>
      <param name="defaultValueSql">Expression SQL utilisée comme valeur par défaut de cette colonne.</param>
      <param name="name">Nom de la colonne.</param>
      <param name="storeType">Type de données spécifique du fournisseur à utiliser pour cette colonne.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Equals(System.Object)">
      <summary>Indique si l'objet spécifié est identique à l'objet actuel.</summary>
      <returns>true si l'objet spécifié est égal à l'objet actuel ; sinon, false.</returns>
      <param name="obj">Objet à comparer à l'objet actuel.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Geography(System.Nullable{System.Boolean},System.Data.Spatial.DbGeography,System.String,System.String,System.String)">
      <summary>Crée une définition de colonne pour stocker des données géographiques.</summary>
      <returns>Définition de colonne venant d'être construite.</returns>
      <param name="nullable">Valeur indiquant si la colonne autorise ou non les valeurs Null.</param>
      <param name="defaultValue">Valeur constante à utiliser comme valeur par défaut de cette colonne.</param>
      <param name="defaultValueSql">Expression SQL utilisée comme valeur par défaut de cette colonne.</param>
      <param name="name">Nom de la colonne.</param>
      <param name="storeType">Type de données spécifique du fournisseur à utiliser pour cette colonne.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Geometry(System.Nullable{System.Boolean},System.Data.Spatial.DbGeometry,System.String,System.String,System.String)">
      <summary>Crée une définition de colonne pour stocker des données géométriques.</summary>
      <returns>Définition de colonne venant d'être construite.</returns>
      <param name="nullable">Valeur indiquant si la colonne autorise ou non les valeurs Null.</param>
      <param name="defaultValue">Valeur constante à utiliser comme valeur par défaut de cette colonne.</param>
      <param name="defaultValueSql">Expression SQL utilisée comme valeur par défaut de cette colonne.</param>
      <param name="name">Nom de la colonne.</param>
      <param name="storeType">Type de données spécifique du fournisseur à utiliser pour cette colonne.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.GetHashCode">
      <summary>Retourne le code de hachage de cette instance.</summary>
      <returns>Code de hachage de cette instance.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.GetType">
      <summary>Obtient le type de l'instance actuelle.</summary>
      <returns>Type de l'instance actuelle.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Guid(System.Nullable{System.Boolean},System.Boolean,System.Nullable{System.Guid},System.String,System.String,System.String)">
      <summary>Crée une définition de colonne pour stocker des données de type GUID.</summary>
      <returns>Définition de colonne venant d'être construite.</returns>
      <param name="nullable">Valeur indiquant si la colonne autorise ou non les valeurs Null.</param>
      <param name="identity">Valeur indiquant si la base de données va générer ou non des valeurs pour cette colonne lors de l'insertion.</param>
      <param name="defaultValue">Valeur constante à utiliser comme valeur par défaut de cette colonne.</param>
      <param name="defaultValueSql">Expression SQL utilisée comme valeur par défaut de cette colonne.</param>
      <param name="name">Nom de la colonne.</param>
      <param name="storeType">Type de données spécifique du fournisseur à utiliser pour cette colonne.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Int(System.Nullable{System.Boolean},System.Boolean,System.Nullable{System.Int32},System.String,System.String,System.String)">
      <summary>Crée une définition de colonne pour stocker des données de type Integer.</summary>
      <returns>Définition de colonne venant d'être construite.</returns>
      <param name="nullable">Valeur indiquant si la colonne autorise ou non les valeurs Null.</param>
      <param name="identity">Valeur indiquant si la base de données va générer ou non des valeurs pour cette colonne lors de l'insertion.</param>
      <param name="defaultValue">Valeur constante à utiliser comme valeur par défaut de cette colonne.</param>
      <param name="defaultValueSql">Expression SQL utilisée comme valeur par défaut de cette colonne.</param>
      <param name="name">Nom de la colonne.</param>
      <param name="storeType">Type de données spécifique du fournisseur à utiliser pour cette colonne.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Long(System.Nullable{System.Boolean},System.Boolean,System.Nullable{System.Int64},System.String,System.String,System.String)">
      <summary>Crée une définition de colonne pour stocker des données de type Long.</summary>
      <returns>Définition de colonne venant d'être construite.</returns>
      <param name="nullable">Valeur indiquant si la colonne autorise ou non les valeurs Null.</param>
      <param name="identity">Valeur indiquant si la base de données va générer ou non des valeurs pour cette colonne lors de l'insertion.</param>
      <param name="defaultValue">Valeur constante à utiliser comme valeur par défaut de cette colonne.</param>
      <param name="defaultValueSql">Expression SQL utilisée comme valeur par défaut de cette colonne.</param>
      <param name="name">Nom de la colonne.</param>
      <param name="storeType">Type de données spécifique du fournisseur à utiliser pour cette colonne.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.MemberwiseClone">
      <summary>Crée une copie superficielle de l'objet actuel.</summary>
      <returns>Copie superficielle de l'objet actuel.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Short(System.Nullable{System.Boolean},System.Boolean,System.Nullable{System.Int16},System.String,System.String,System.String)">
      <summary>Crée une définition de colonne pour stocker des données de type Short.</summary>
      <returns>Définition de colonne venant d'être construite.</returns>
      <param name="nullable">Valeur indiquant si la colonne autorise ou non les valeurs Null.</param>
      <param name="identity">Valeur indiquant si la base de données va générer ou non des valeurs pour cette colonne lors de l'insertion.</param>
      <param name="defaultValue">Valeur constante à utiliser comme valeur par défaut de cette colonne.</param>
      <param name="defaultValueSql">Expression SQL utilisée comme valeur par défaut de cette colonne.</param>
      <param name="name">Nom de la colonne.</param>
      <param name="storeType">Type de données spécifique du fournisseur à utiliser pour cette colonne.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Single(System.Nullable{System.Boolean},System.Nullable{System.Single},System.String,System.String,System.String)">
      <summary>Crée une définition de colonne pour stocker des données de type Single.</summary>
      <returns>Définition de colonne venant d'être construite.</returns>
      <param name="nullable">Valeur indiquant si la colonne autorise ou non les valeurs Null.</param>
      <param name="defaultValue">Valeur constante à utiliser comme valeur par défaut de cette colonne.</param>
      <param name="defaultValueSql">Expression SQL utilisée comme valeur par défaut de cette colonne.</param>
      <param name="name">Nom de la colonne.</param>
      <param name="storeType">Type de données spécifique du fournisseur à utiliser pour cette colonne.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.String(System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String,System.String,System.String,System.String)">
      <summary>Crée une définition de colonne pour stocker des données de type chaîne (String).</summary>
      <returns>Définition de colonne venant d'être construite.</returns>
      <param name="nullable">Valeur indiquant si la colonne autorise ou non les valeurs Null.</param>
      <param name="maxLength">Longueur maximale autorisée des données de type chaîne.</param>
      <param name="fixedLength">Valeur indiquant si toutes les données doivent être complétées ou non jusqu'à la longueur maximale.</param>
      <param name="isMaxLength">Valeur indiquant si la longueur maximale prise en charge par le fournisseur de base de données doit être utilisée ou non.</param>
      <param name="unicode">Valeur indiquant si la colonne prend en charge ou non le contenu de chaîne Unicode.</param>
      <param name="defaultValue">Valeur constante à utiliser comme valeur par défaut de cette colonne.</param>
      <param name="defaultValueSql">Expression SQL utilisée comme valeur par défaut de cette colonne.</param>
      <param name="name">Nom de la colonne.</param>
      <param name="storeType">Type de données spécifique du fournisseur à utiliser pour cette colonne.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Time(System.Nullable{System.Boolean},System.Nullable{System.Byte},System.Nullable{System.TimeSpan},System.String,System.String,System.String)">
      <summary>Crée une définition de colonne pour stocker des données de type heure (Time).</summary>
      <returns>Définition de colonne venant d'être construite.</returns>
      <param name="nullable">Valeur indiquant si la colonne autorise ou non les valeurs Null.</param>
      <param name="precision">Précision de la colonne.</param>
      <param name="defaultValue">Valeur constante à utiliser comme valeur par défaut de cette colonne.</param>
      <param name="defaultValueSql">Expression SQL utilisée comme valeur par défaut de cette colonne.</param>
      <param name="name">Nom de la colonne.</param>
      <param name="storeType">Type de données spécifique du fournisseur à utiliser pour cette colonne.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.ToString">
      <summary>Retourne une chaîne qui représente l'objet actuel.</summary>
      <returns>Chaîne qui représente l'objet actuel.</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Builders.TableBuilder`1">
      <summary>Classe d'assistance utilisée pour configurer davantage une table créée à partir d'un appel de CreateTable sur <see cref="T:System.Data.Entity.Migrations.DbMigration" />.</summary>
      <typeparam name="TColumns">Type des colonnes de la table.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.TableBuilder`1.#ctor(System.Data.Entity.Migrations.Model.CreateTableOperation,System.Data.Entity.Migrations.DbMigration)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Migrations.Builders.TableBuilder`1" />.</summary>
      <param name="createTableOperation">Opération de création de table à configurer davantage.</param>
      <param name="migration">Migration dans le cadre de laquelle la table est créée.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.TableBuilder`1.Equals(System.Object)">
      <summary>Détermine si l'objet spécifié est identique à l'objet actuel.</summary>
      <returns>true si l'objet spécifié est égal à l'objet actuel ; sinon, false.</returns>
      <param name="obj">Objet à comparer à l'objet actuel.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.TableBuilder`1.ForeignKey(System.String,System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Boolean,System.String,System.Object)">
      <summary>Spécifie une contrainte de clé étrangère à créer sur la table. </summary>
      <returns>Valeur elle-même, si bien que plusieurs appels peuvent être chaînés.</returns>
      <param name="principalTable">Nom de la table ciblée par la contrainte de clé étrangère.</param>
      <param name="dependentKeyExpression">Expression lambda représentant les propriétés de la clé étrangère.      Si plusieurs propriétés constituent la clé étrangère, spécifiez un type anonyme incluant les diverses propriétés.</param>
      <param name="cascadeDelete">Valeur indiquant si la suppression en cascade doit être configurée ou non sur la contrainte de clé étrangère. </param>
      <param name="name">Nom de cette contrainte de clé étrangère. Si aucun nom n'est fourni, un nom par défaut est déterminé.</param>
      <param name="anonymousArguments">Arguments supplémentaires qui peuvent être traités par les fournisseurs. Utilisez une syntaxe de type anonyme pour spécifier les arguments, par exemple « new { SampleArgument = "MyValue" } ».</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.TableBuilder`1.GetHashCode">
      <summary>Obtient le code de hachage de l'objet actuel.</summary>
      <returns>Code de hachage de l'objet actuel.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.TableBuilder`1.GetType">
      <summary>Obtient le type de l'objet actuel.</summary>
      <returns>Type de l'objet actuel.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.TableBuilder`1.Index(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Boolean,System.Object)">
      <summary>Spécifie un index à créer sur la table.</summary>
      <returns>Valeur elle-même, si bien que plusieurs appels peuvent être chaînés.</returns>
      <param name="indexExpression">Expression lambda représentant la propriété à indexer.Si plusieurs propriétés doivent être indexées, spécifiez un type anonyme incluant les diverses propriétés.</param>
      <param name="unique">Valeur indiquant s'il s'agit d'un index unique ou non.</param>
      <param name="anonymousArguments">Arguments supplémentaires qui peuvent être traités par les fournisseurs. Utilisez une syntaxe de type anonyme pour spécifier les arguments, par exemple « new { SampleArgument = "MyValue" } ».</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.TableBuilder`1.MemberwiseClone">
      <summary>Crée une copie superficielle de l'objet actuel.</summary>
      <returns>Copie superficielle de l'objet actuel.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.TableBuilder`1.PrimaryKey(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.String,System.Object)">
      <summary>Spécifie une clé primaire pour la table. </summary>
      <returns>Valeur elle-même, si bien que plusieurs appels peuvent être chaînés.</returns>
      <param name="keyExpression">Expression lambda représentant la propriété à utiliser comme clé primaire. Si la clé primaire est composée de plusieurs propriétés, spécifiez un type anonyme incluant les diverses propriétés.</param>
      <param name="name">Nom de la clé primaire. Si une valeur Null est fournie, un nom par défaut est généré.</param>
      <param name="anonymousArguments">Arguments supplémentaires qui peuvent être traités par les fournisseurs. Utilisez une syntaxe de type anonyme pour spécifier les arguments, par exemple « new { SampleArgument = "MyValue" } ».</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.TableBuilder`1.ToString">
      <summary>Retourne une chaîne représentant l'objet actuel.</summary>
      <returns>Représentation sous forme de chaîne de l'objet actuel.</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator">
      <summary>Génère le code C# d'une migration basée sur le code.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Byte)">
      <summary>Génère le code permettant de spécifier la valeur par défaut d'une colonne <see cref="T:System.Byte" />.</summary>
      <returns>Code représentant la valeur par défaut.</returns>
      <param name="defaultValue">Valeur à utiliser comme valeur par défaut.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Byte[])">
      <summary>Génère le code permettant de spécifier la valeur par défaut d'une colonne <see cref="T:System.Byte[]" />.</summary>
      <returns>Code représentant la valeur par défaut.</returns>
      <param name="defaultValue">Valeur à utiliser comme valeur par défaut.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Collections.Generic.IEnumerable{System.Data.Entity.Migrations.Model.MigrationOperation},System.String,System.String)">
      <summary>Génère le fichier de code principal que l'utilisateur peut afficher et modifier. </summary>
      <returns>Code généré.</returns>
      <param name="operations">Opérations devant être effectuées par la migration.</param>
      <param name="namespace">Espace de noms dans lequel le code doit être généré.</param>
      <param name="className">Nom de la classe qui doit être générée.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Collections.Generic.IEnumerable{System.String},System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Génère le code permettant de spécifier un ensemble de noms de colonnes à l'aide d'une expression lambda.</summary>
      <param name="columns">Colonnes pour lesquelles le code doit être généré.</param>
      <param name="writer">Writer de texte auquel ajouter le code généré.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.AddColumnOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Génère le code permettant d'effectuer une <see cref="T:System.Data.Entity.Migrations.Model.AddColumnOperation" />.</summary>
      <param name="addColumnOperation">Opération pour laquelle le code doit être généré.</param>
      <param name="writer">Writer de texte auquel ajouter le code généré.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.AddForeignKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Génère le code permettant d'effectuer une <see cref="T:System.Data.Entity.Migrations.Model.AddForeignKeyOperation" />.</summary>
      <param name="addForeignKeyOperation">Opération pour laquelle le code doit être généré.</param>
      <param name="writer">Writer de texte auquel ajouter le code généré.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Génère le code permettant d'effectuer une <see cref="T:System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation" />.</summary>
      <param name="addPrimaryKeyOperation">Opération pour laquelle le code doit être généré.</param>
      <param name="writer">Writer de texte auquel ajouter le code généré.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.AlterColumnOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Génère le code permettant d'effectuer une <see cref="T:System.Data.Entity.Migrations.Model.AlterColumnOperation" />.</summary>
      <param name="alterColumnOperation">Opération pour laquelle le code doit être généré.</param>
      <param name="writer">Writer de texte auquel ajouter le code généré.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.ColumnModel,System.Data.Entity.Migrations.Utilities.IndentedTextWriter,System.Boolean)">
      <summary>Génère le code permettant de spécifier la définition d'un <see cref="T:System.Data.Entity.Migrations.Model.ColumnModel" />.</summary>
      <param name="column">Définition de colonne pour laquelle le code doit être généré.</param>
      <param name="writer">Writer de texte auquel ajouter le code généré.</param>
      <param name="emitName">Valeur indiquant si le nom de la colonne doit être inclus dans la définition.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.CreateIndexOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Génère le code permettant d'effectuer une <see cref="T:System.Data.Entity.Migrations.Model.CreateIndexOperation" />.</summary>
      <param name="createIndexOperation">Opération pour laquelle le code doit être généré.</param>
      <param name="writer">Writer de texte auquel ajouter le code généré.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.CreateTableOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Génère le code permettant d'effectuer une <see cref="T:System.Data.Entity.Migrations.Model.CreateTableOperation" />.</summary>
      <param name="createTableOperation">Opération pour laquelle le code doit être généré.</param>
      <param name="writer">Writer de texte auquel ajouter le code généré.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropColumnOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Génère le code permettant d'effectuer une <see cref="T:System.Data.Entity.Migrations.Model.DropColumnOperation" />.</summary>
      <param name="dropColumnOperation">Opération pour laquelle le code doit être généré.</param>
      <param name="writer">Writer de texte auquel ajouter le code généré.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropForeignKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Génère le code permettant d'effectuer une <see cref="T:System.Data.Entity.Migrations.Model.DropForeignKeyOperation" />.</summary>
      <param name="dropForeignKeyOperation">Opération pour laquelle le code doit être généré.</param>
      <param name="writer">Writer de texte auquel ajouter le code généré.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropIndexOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Génère le code permettant d'effectuer une <see cref="T:System.Data.Entity.Migrations.Model.DropIndexOperation" />.</summary>
      <param name="dropIndexOperation">Opération pour laquelle le code doit être généré.</param>
      <param name="writer">Writer de texte auquel ajouter le code généré.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropPrimaryKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Génère le code permettant d'effectuer une <see cref="T:System.Data.Entity.Migrations.Model.DropPrimaryKeyOperation" />.</summary>
      <param name="dropPrimaryKeyOperation">Opération pour laquelle le code doit être généré.</param>
      <param name="writer">Writer de texte auquel ajouter le code généré.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropTableOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Génère le code permettant d'effectuer une <see cref="T:System.Data.Entity.Migrations.Model.DropTableOperation" />.</summary>
      <param name="dropTableOperation">Opération pour laquelle le code doit être généré.</param>
      <param name="writer">Writer de texte auquel ajouter le code généré.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.MoveTableOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Génère le code permettant d'effectuer une <see cref="T:System.Data.Entity.Migrations.Model.MoveTableOperation" />.</summary>
      <param name="moveTableOperation">Opération pour laquelle le code doit être généré.</param>
      <param name="writer">Writer de texte auquel ajouter le code généré.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.RenameColumnOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Génère le code permettant d'effectuer une <see cref="T:System.Data.Entity.Migrations.Model.RenameColumnOperation" />.</summary>
      <param name="renameColumnOperation">Opération pour laquelle le code doit être généré.</param>
      <param name="writer">Writer de texte auquel ajouter le code généré.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.RenameTableOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Génère le code permettant d'effectuer une <see cref="T:System.Data.Entity.Migrations.Model.RenameTableOperation" />.</summary>
      <param name="renameTableOperation">Opération pour laquelle le code doit être généré.</param>
      <param name="writer">Writer de texte auquel ajouter le code généré.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.SqlOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Génère le code permettant d'effectuer une <see cref="T:System.Data.Entity.Migrations.Model.SqlOperation" />.</summary>
      <param name="sqlOperation">Opération pour laquelle le code doit être généré.</param>
      <param name="writer">Writer de texte auquel ajouter le code généré.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Spatial.DbGeography)">
      <summary>Génère le code permettant de spécifier la valeur par défaut d'une colonne <see cref="T:System.Data.Spatial.DbGeography" />.</summary>
      <returns>Code représentant la valeur par défaut.</returns>
      <param name="defaultValue">Valeur à utiliser comme valeur par défaut.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Spatial.DbGeometry)">
      <summary>Génère le code permettant de spécifier la valeur par défaut d'une colonne <see cref="T:System.Data.Spatial.DbGeometry" />.</summary>
      <returns>Code représentant la valeur par défaut.</returns>
      <param name="defaultValue">Valeur à utiliser comme valeur par défaut.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.DateTime)">
      <summary>Génère le code permettant de spécifier la valeur par défaut d'une colonne <see cref="T:System.DateTime" />.</summary>
      <returns>Code représentant la valeur par défaut.</returns>
      <param name="defaultValue">Valeur à utiliser comme valeur par défaut.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.DateTimeOffset)">
      <summary>Génère le code permettant de spécifier la valeur par défaut d'une colonne <see cref="T:System.DateTimeOffset" />.</summary>
      <returns>Code représentant la valeur par défaut.</returns>
      <param name="defaultValue">Valeur à utiliser comme valeur par défaut.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Decimal)">
      <summary>Génère le code permettant de spécifier la valeur par défaut d'une colonne <see cref="T:System.Decimal" />.</summary>
      <returns>Code représentant la valeur par défaut.</returns>
      <param name="defaultValue">Valeur à utiliser comme valeur par défaut.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Guid)">
      <summary>Génère le code permettant de spécifier la valeur par défaut d'une colonne <see cref="T:System.Guid" />.</summary>
      <returns>Code représentant la valeur par défaut.</returns>
      <param name="defaultValue">Valeur à utiliser comme valeur par défaut.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Int64)">
      <summary>Génère le code permettant de spécifier la valeur par défaut d'une colonne <see cref="T:System.Int64" />.</summary>
      <returns>Code représentant la valeur par défaut.</returns>
      <param name="defaultValue">Valeur à utiliser comme valeur par défaut.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Object)">
      <summary>Génère le code permettant de spécifier la valeur par défaut d'une colonne dont le type de données est inconnu.</summary>
      <returns>Code représentant la valeur par défaut.</returns>
      <param name="defaultValue">Valeur à utiliser comme valeur par défaut.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Single)">
      <summary>Génère le code permettant de spécifier la valeur par défaut d'une colonne <see cref="T:System.Single" />.</summary>
      <returns>Code représentant la valeur par défaut.</returns>
      <param name="defaultValue">Valeur à utiliser comme valeur par défaut.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.String)">
      <summary>Génère le code permettant de spécifier la valeur par défaut d'une colonne <see cref="T:System.String" />.</summary>
      <returns>Code représentant la valeur par défaut.</returns>
      <param name="defaultValue">Valeur à utiliser comme valeur par défaut.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.String,System.Collections.Generic.IEnumerable{System.Data.Entity.Migrations.Model.MigrationOperation},System.String,System.String,System.String,System.String)">
      <summary>Génère le fichier code-behind avec les métadonnées de migration.</summary>
      <returns>Code généré.</returns>
      <param name="migrationId">Identificateur unique de la migration.</param>
      <param name="operations">Opérations devant être effectuées par la migration.</param>
      <param name="sourceModel">Modèle source à stocker dans les métadonnées de migration.</param>
      <param name="targetModel">Modèle cible à stocker dans les métadonnées de migration.</param>
      <param name="namespace">Espace de noms dans lequel le code doit être généré.</param>
      <param name="className">Nom de la classe qui doit être générée.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.String,System.String,System.String,System.String,System.String)">
      <summary>Génère le fichier code-behind avec les métadonnées de migration.</summary>
      <returns>Code généré.</returns>
      <param name="migrationId">Identificateur unique de la migration.</param>
      <param name="sourceModel">Modèle source à stocker dans les métadonnées de migration.</param>
      <param name="targetModel">Modèle cible à stocker dans les métadonnées de migration.</param>
      <param name="namespace">Espace de noms dans lequel le code doit être généré.</param>
      <param name="className">Nom de la classe qui doit être générée.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.TimeSpan)">
      <summary>Génère le code permettant de spécifier la valeur par défaut d'une colonne <see cref="T:System.TimeSpan" />.</summary>
      <returns>Code représentant la valeur par défaut.</returns>
      <param name="defaultValue">Valeur à utiliser comme valeur par défaut.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.GenerateInline(System.Data.Entity.Migrations.Model.AddForeignKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Génère le code permettant d'effectuer une <see cref="T:System.Data.Entity.Migrations.Model.AddForeignKeyOperation" /> dans le cadre d'une <see cref="T:System.Data.Entity.Migrations.Model.CreateTableOperation" />.</summary>
      <param name="addForeignKeyOperation">Opération pour laquelle le code doit être généré.</param>
      <param name="writer">Writer de texte auquel ajouter le code généré.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.GenerateInline(System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Génère le code permettant d'effectuer une <see cref="T:System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation" /> dans le cadre d'une <see cref="T:System.Data.Entity.Migrations.Model.CreateTableOperation" />.</summary>
      <param name="addPrimaryKeyOperation">Opération pour laquelle le code doit être généré.</param>
      <param name="writer">Writer de texte auquel ajouter le code généré.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.GenerateInline(System.Data.Entity.Migrations.Model.CreateIndexOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Génère le code permettant d'effectuer une <see cref="T:System.Data.Entity.Migrations.Model.CreateIndexOperation" /> dans le cadre d'une <see cref="T:System.Data.Entity.Migrations.Model.CreateTableOperation" />.</summary>
      <param name="createIndexOperation">Opération pour laquelle le code doit être généré.</param>
      <param name="writer">Writer de texte auquel ajouter le code généré.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Quote(System.String)">
      <summary>Met entre guillemets un identificateur en utilisant l'échappement approprié pour lui permettre d'être stocké dans une chaîne.</summary>
      <returns>Identificateur entre guillemets.</returns>
      <param name="identifier">Identificateur à mettre entre guillemets.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.ScrubName(System.String)">
      <summary>Supprime les caractères non valides du nom d'un artefact de base de données.</summary>
      <returns>Nom modifié.</returns>
      <param name="name">Nom à modifier.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.TranslateColumnType(System.Data.Metadata.Edm.PrimitiveTypeKind)">
      <summary>Obtient le nom de type à utiliser pour une colonne du type de données spécifique.</summary>
      <returns>Nom de type à utiliser dans la migration générée.</returns>
      <param name="primitiveTypeKind">Type de données à traduire.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.WriteClassEnd(System.String,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Génère le code de fermeture d'une classe qui commençait par WriteClassStart.</summary>
      <param name="namespace">Espace de noms dans lequel le code doit être généré.</param>
      <param name="writer">Writer de texte auquel ajouter le code généré.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.WriteClassStart(System.String,System.String,System.Data.Entity.Migrations.Utilities.IndentedTextWriter,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.String})">
      <summary>Génère un espace de noms en utilisant des instructions et une définition de classe.</summary>
      <param name="namespace">Espace de noms dans lequel le code doit être généré.</param>
      <param name="className">Nom de la classe qui doit être générée.</param>
      <param name="writer">Writer de texte auquel ajouter le code généré.</param>
      <param name="base">Classe de base de la classe générée.</param>
      <param name="designer">Valeur indiquant si cette classe est générée pour un fichier code-behind.</param>
      <param name="namespaces">Espaces de noms pour lesquels des directives d'utilisation seront ajoutées. Si la valeur est Null, les espaces de noms retournés par GetDefaultNamespaces sont utilisés.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.WriteProperty(System.String,System.String,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Génère une propriété pour retourner le modèle source ou le modèle cible dans le fichier code-behind.</summary>
      <param name="name">Nom de la propriété.</param>
      <param name="writer">Writer de texte auquel ajouter le code généré.</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.Design.MigrationCodeGenerator">
      <summary>Classe de base pour les fournisseurs qui génèrent le code des migrations basées sur le code.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.MigrationCodeGenerator.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Migrations.Design.MigrationCodeGenerator" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.MigrationCodeGenerator.Generate(System.String,System.Collections.Generic.IEnumerable{System.Data.Entity.Migrations.Model.MigrationOperation},System.String,System.String,System.String,System.String)">
      <summary>     Génère le code qui doit être ajouté au projet utilisateur. </summary>
      <returns>Code généré.</returns>
      <param name="migrationId">Identificateur unique de la migration.</param>
      <param name="operations">Opérations devant être effectuées par la migration.</param>
      <param name="sourceModel">Modèle source à stocker dans les métadonnées de migration.</param>
      <param name="targetModel">Modèle cible à stocker dans les métadonnées de migration.</param>
      <param name="namespace">Espace de noms dans lequel le code doit être généré.</param>
      <param name="className">Nom de la classe qui doit être générée.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.MigrationCodeGenerator.GetDefaultNamespaces(System.Boolean)">
      <summary> Obtient les espaces de noms par défaut qui doivent être affichés en sortie comme directives d'utilisation ou d'importation pour tout code généré. </summary>
      <returns>Liste ordonnée de noms d'espaces de noms.</returns>
      <param name="designer">Valeur indiquant si cette classe est générée pour un fichier code-behind.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.MigrationCodeGenerator.GetNamespaces(System.Collections.Generic.IEnumerable{System.Data.Entity.Migrations.Model.MigrationOperation})">
      <summary> Obtient les espaces de noms qui doivent être affichés en sortie comme directives d'utilisation ou d'importation pour traiter le code généré par les opérations spécifiques. </summary>
      <returns>Liste ordonnée de noms d'espaces de noms.</returns>
      <param name="operations">Opérations pour lesquelles du code va être généré.</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.Design.MigrationScaffolder">
      <summary>Crée à l'aide de la génération de modèle automatique des migrations basées sur le code pour appliquer les modifications de modèle en attente à la base de données.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.MigrationScaffolder.#ctor(System.Data.Entity.Migrations.DbMigrationsConfiguration)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Migrations.Design.MigrationScaffolder" />. </summary>
      <param name="migrationsConfiguration">Configuration à utiliser pour la génération de modèle automatique.</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Design.MigrationScaffolder.Namespace">
      <summary> Obtient ou définit l'espace de noms utilisé dans le code généré de la migration.  Par défaut, cet espace de noms est identique à MigrationsNamespace dans l'objet de configuration des migrations transmis au constructeur. Pour les projets VB.NET, cette valeur doit être mise à jour afin de prendre en compte l'espace de noms racine du projet. </summary>
      <returns>Espace de noms utilisé dans le code généré de la migration.  </returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.MigrationScaffolder.Scaffold(System.String)">
      <summary>     Crée à l'aide de la génération de modèle automatique une migration basée sur le code pour appliquer toutes les modifications de modèle en attente à la base de données. </summary>
      <returns>Migration créée à l'aide de la génération de modèle automatique.</returns>
      <param name="migrationName">Nom à utiliser pour la migration créée à l'aide de la génération de modèle automatique.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.MigrationScaffolder.Scaffold(System.String,System.Boolean)">
      <summary>Crée à l'aide de la génération de modèle automatique une migration basée sur le code pour appliquer toutes les modifications de modèle en attente à la base de données.</summary>
      <returns>Migration créée à l'aide de la génération de modèle automatique.</returns>
      <param name="migrationName">Nom à utiliser pour la migration créée à l'aide de la génération de modèle automatique.</param>
      <param name="ignoreChanges">true pour exclure les modifications de modèle ; sinon, false.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.MigrationScaffolder.ScaffoldInitialCreate">
      <summary> Crée à l'aide de la génération de modèle automatique la migration basée sur le code initiale correspondant à un initialiseur de base de données précédemment exécuté.</summary>
      <returns>Migration créée à l'aide de la génération de modèle automatique.</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Design.ScaffoldedMigration">
      <summary>   Représente une migration basée sur le code qui a été créée à l'aide de la génération de modèle automatique et qui est prête à être écrite dans un fichier.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ScaffoldedMigration.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Migrations.Design.ScaffoldedMigration" />.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Design.ScaffoldedMigration.DesignerCode">
      <summary>     Obtient ou définit le code de migration créé à l'aide de la génération de modèle automatique qui doit être stocké dans un fichier code-behind. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Design.ScaffoldedMigration.Directory">
      <summary>     Obtient ou définit le sous-répertoire du projet utilisateur dans lequel cette migration doit être enregistrée. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Design.ScaffoldedMigration.Language">
      <summary>     Obtient ou définit le langage de programmation utilisé pour cette migration.     Cette valeur est généralement utilisée pour l'extension de fichier du code généré. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Design.ScaffoldedMigration.MigrationId">
      <summary>     Obtient ou définit l'identificateur unique de cette migration.     Cette valeur est généralement utilisée pour le nom de fichier du code généré. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Design.ScaffoldedMigration.UserCode">
      <summary>     Obtient ou définit le code de migration créé à l'aide de la génération de modèle automatique que l'utilisateur peut modifier. </summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Design.ToolingException">
      <summary>Représente une exception qui s'est produite pendant l'exécution d'une opération dans un autre AppDomain de la <see cref="T:System.Data.Entity.Migrations.Design.ToolingFacade" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Migrations.Design.ToolingException" /> avec des données sérialisées.</summary>
      <param name="info">Données d'objet sérialisées sur l'exception levée.</param>
      <param name="context">Informations contextuelles sur la source ou la destination.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingException.#ctor(System.String,System.String,System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Migrations.Design.ToolingException" /> avec une erreur spécifiée, le type d'exception interne et la trace de la pile.</summary>
      <param name="message">Message d'erreur qui explique la cause de l'exception.</param>
      <param name="innerType">Type de l'exception qui a été levée.</param>
      <param name="innerStackTrace">Trace de la pile de l'exception qui a été levée.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Remplit les <see cref="T:System.Runtime.Serialization.SerializationInfo" /> avec les données nécessaires pour sérialiser l'objet cible.</summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> à remplir de données.</param>
      <param name="context">Cible de cette sérialisation.</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Design.ToolingException.InnerStackTrace">
      <summary>Obtient la trace de la pile de l'exception qui a été levée. </summary>
      <returns>Trace de la pile de l'exception qui a été levée.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Design.ToolingException.InnerType">
      <summary>Obtient le type de l'exception qui a été levée. </summary>
      <returns>Type de l'exception qui a été levée.</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Design.ToolingFacade">
      <summary>Représente une classe d'assistance utilisée par les outils au moment de la conception pour exécuter les commandes relatives aux migrations qui doivent interagir avec une application en cours de modification dans Visual Studio.Étant donné que l'application est en cours de modification, les assemblys doivent être chargés dans un AppDomain distinct pour garantir le chargement systématique de la dernière version. Le fichier App/Web.config du projet de démarrage est également copié pour garantir l'application d'une configuration.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.#ctor(System.String,System.String,System.String,System.String,System.String,System.Data.Entity.Infrastructure.DbConnectionInfo)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Migrations.Design.ToolingFacade" />. </summary>
      <param name="assemblyName">Nom de l'assembly qui contient la configuration des migrations à utiliser. </param>
      <param name="configurationTypeName">Nom qualifié de l'espace de noms de la configuration des migrations à utiliser. </param>
      <param name="workingDirectory">Répertoire de travail contenant les assemblys compilés. </param>
      <param name="configurationFilePath">Chemin d'accès au fichier de configuration à partir du projet de démarrage. </param>
      <param name="dataDirectory">Chemin d'accès au répertoire des données d'application à partir du projet de démarrage. Il s'agit généralement du répertoire App_Data pour les applications Web ou du répertoire de travail des exécutables. </param>
      <param name="connectionStringInfo">Connexion à la base de données à migrer. Si une valeur Null est fournie, la connexion par défaut pour le contexte est utilisée. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.Dispose">
      <summary>Libère toutes les ressources utilisées par <see cref="T:System.Data.Entity.Migrations.Design.ToolingFacade" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.Dispose(System.Boolean)">
      <summary>Libère toutes les ressources utilisées par <see cref="T:System.Data.Entity.Migrations.Design.ToolingFacade" />.</summary>
      <param name="disposing">true pour libérer à la fois les ressources managées et non managées ; false pour libérer uniquement les ressources non managées. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.Finalize">
      <summary>Libère toutes les ressources non managées utilisées par la façade. </summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.GetContextTypes">
      <summary>Obtient le nom complet de tous les types dérivés de <see cref="T:System.Data.Entity.DbContext" />. </summary>
      <returns>Tous les types de contexte trouvés.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.GetDatabaseMigrations">
      <summary>Obtient la liste de toutes les migrations qui ont été appliquées à la base de données. </summary>
      <returns>ID des migrations appliquées.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.GetPendingMigrations">
      <summary>Obtient la liste de toutes les migrations qui n'ont pas été appliquées à la base de données. </summary>
      <returns>ID des migrations en attente.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Design.ToolingFacade.LogInfoDelegate">
      <summary>Obtient ou définit une action à exécuter pour consigner des informations. </summary>
      <returns>Action à exécuter pour consigner des informations.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Design.ToolingFacade.LogVerboseDelegate">
      <summary>Obtient ou définit une action à exécuter pour consigner des informations détaillées. </summary>
      <returns>Action à exécuter pour consigner des informations détaillées.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Design.ToolingFacade.LogWarningDelegate">
      <summary>Obtient ou définit une action à exécuter pour consigner des avertissements. </summary>
      <returns>Action à exécuter pour consigner des avertissements.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.Scaffold(System.String,System.String,System.String,System.Boolean)">
      <summary>Crée à l'aide de la génération de modèle automatique une migration basée sur le code pour appliquer toutes les modifications de modèle en attente.</summary>
      <returns>Migration créée à l'aide de la génération de modèle automatique.</returns>
      <param name="migrationName">Nom de la migration générée.</param>
      <param name="language">Langage de programmation de la migration générée.</param>
      <param name="rootNamespace">Espace de noms racine du projet auquel la migration va être ajoutée.</param>
      <param name="ignoreChanges">true pour exclure les modifications de modèle ; sinon, false.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.ScaffoldInitialCreate(System.String,System.String)">
      <summary>Crée à l'aide de la génération de modèle automatique la migration basée sur le code initiale correspondant à un initialiseur de base de données précédemment exécuté. </summary>
      <returns>Migration créée à l'aide de la génération de modèle automatique.</returns>
      <param name="language">Langage de programmation de la migration générée.</param>
      <param name="rootNamespace">Espace de noms racine du projet auquel la migration va être ajoutée.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.ScriptUpdate(System.String,System.String,System.Boolean)">
      <summary>Génère un script SQL pour migrer entre deux migrations. </summary>
      <returns>Script SQL généré.</returns>
      <param name="sourceMigration">Migration à partir de laquelle effectuer la mise à jour. Si une valeur Null est fournie, un script permettant de mettre à jour la base de données en cours est créé. </param>
      <param name="targetMigration">Migration vers laquelle effectuer la mise à jour. Si une valeur Null est fournie, un script permettant d'effectuer la mise à jour vers la dernière migration est créé. </param>
      <param name="force">Valeur indiquant si la perte de données est acceptable pendant la migration automatique.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.Update(System.String,System.Boolean)">
      <summary>Met à jour la base de données vers la migration spécifiée. </summary>
      <param name="targetMigration">ID de la migration vers laquelle effectuer la migration. Si une valeur Null est fournie, la base de données est mise à jour vers la dernière migration. </param>
      <param name="force">Valeur indiquant si la perte de données est acceptable pendant la migration automatique.</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator">
      <summary>Génère le code .Net Visual Basic d'une migration basée sur le code.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Byte)">
      <summary>Génère le code permettant de spécifier la valeur par défaut d'une colonne <see cref="T:System.Byte" />. </summary>
      <returns>Code représentant la valeur par défaut.</returns>
      <param name="defaultValue">Valeur à utiliser comme valeur par défaut.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Byte[])">
      <summary>Génère le code permettant de spécifier la valeur par défaut d'une colonne <see cref="T:System.Byte[]" />. </summary>
      <returns>Code représentant la valeur par défaut.</returns>
      <param name="defaultValue">Valeur à utiliser comme valeur par défaut.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Collections.Generic.IEnumerable{System.Data.Entity.Migrations.Model.MigrationOperation},System.String,System.String)">
      <summary>Génère le fichier de code principal que l'utilisateur peut afficher et modifier.</summary>
      <returns>Code généré.</returns>
      <param name="operations">Opérations devant être effectuées par la migration.</param>
      <param name="namespace">Espace de noms dans lequel le code doit être généré.</param>
      <param name="className">Nom de la classe qui doit être générée.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Collections.Generic.IEnumerable{System.String},System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Génère le code permettant de spécifier un ensemble de noms de colonnes à l'aide d'une expression lambda.</summary>
      <param name="columns">Colonnes pour lesquelles le code doit être généré.</param>
      <param name="writer">Writer de texte auquel ajouter le code généré.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.AddColumnOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Génère le code permettant d'effectuer une <see cref="T:System.Data.Entity.Migrations.Model.AddColumnOperation" />.</summary>
      <param name="addColumnOperation">Opération pour laquelle le code doit être généré.</param>
      <param name="writer">Writer de texte auquel ajouter le code généré.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.AddForeignKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Génère le code permettant d'effectuer une <see cref="T:System.Data.Entity.Migrations.Model.AddForeignKeyOperation" />.</summary>
      <param name="addForeignKeyOperation">Opération pour laquelle le code doit être généré.</param>
      <param name="writer">Writer de texte auquel ajouter le code généré.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Génère le code permettant d'effectuer une <see cref="T:System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation" />. </summary>
      <param name="addPrimaryKeyOperation">Opération pour laquelle le code doit être généré.</param>
      <param name="writer">Writer de texte auquel ajouter le code généré.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.AlterColumnOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Génère le code permettant d'effectuer une <see cref="T:System.Data.Entity.Migrations.Model.AlterColumnOperation" />.</summary>
      <param name="alterColumnOperation">Opération pour laquelle le code doit être généré.</param>
      <param name="writer">Writer de texte auquel ajouter le code généré.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.ColumnModel,System.Data.Entity.Migrations.Utilities.IndentedTextWriter,System.Boolean)">
      <summary>Génère le code permettant de spécifier la définition d'un <see cref="T:System.Data.Entity.Migrations.Model.ColumnModel" />. </summary>
      <param name="column">Définition de colonne pour laquelle le code doit être généré.</param>
      <param name="writer">Writer de texte auquel ajouter le code généré.</param>
      <param name="emitName">Valeur indiquant si le nom de la colonne doit être inclus dans la définition.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.CreateIndexOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Génère le code permettant d'effectuer une <see cref="T:System.Data.Entity.Migrations.Model.CreateIndexOperation" />.</summary>
      <param name="createIndexOperation">Opération pour laquelle le code doit être généré.</param>
      <param name="writer">Writer de texte auquel ajouter le code généré.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.CreateTableOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Génère le code permettant d'effectuer une <see cref="T:System.Data.Entity.Migrations.Model.CreateTableOperation" />.</summary>
      <param name="createTableOperation">Opération pour laquelle le code doit être généré.</param>
      <param name="writer">Writer de texte auquel ajouter le code généré.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropColumnOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Génère le code permettant d'effectuer une <see cref="T:System.Data.Entity.Migrations.Model.DropColumnOperation" />.</summary>
      <param name="dropColumnOperation">Opération pour laquelle le code doit être généré.</param>
      <param name="writer">Writer de texte auquel ajouter le code généré.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropForeignKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>     Génère le code permettant d'effectuer une <see cref="T:System.Data.Entity.Migrations.Model.DropForeignKeyOperation" />. </summary>
      <param name="dropForeignKeyOperation">Opération pour laquelle le code doit être généré.</param>
      <param name="writer">Writer de texte auquel ajouter le code généré.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropIndexOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>     Génère le code permettant d'effectuer une <see cref="T:System.Data.Entity.Migrations.Model.DropIndexOperation" />. </summary>
      <param name="dropIndexOperation">Opération pour laquelle le code doit être généré.</param>
      <param name="writer">Writer de texte auquel ajouter le code généré.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropPrimaryKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>     Génère le code permettant d'effectuer une <see cref="T:System.Data.Entity.Migrations.Model.DropPrimaryKeyOperation" />. </summary>
      <param name="dropPrimaryKeyOperation">Opération pour laquelle le code doit être généré.</param>
      <param name="writer">Writer de texte auquel ajouter le code généré.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropTableOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>     Génère le code permettant d'effectuer une <see cref="T:System.Data.Entity.Migrations.Model.DropTableOperation" />. </summary>
      <param name="dropTableOperation">Opération pour laquelle le code doit être généré.</param>
      <param name="writer">Writer de texte auquel ajouter le code généré.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.MoveTableOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>     Génère le code permettant d'effectuer une <see cref="T:System.Data.Entity.Migrations.Model.MoveTableOperation" />. </summary>
      <param name="moveTableOperation">Opération pour laquelle le code doit être généré.</param>
      <param name="writer">Writer de texte auquel ajouter le code généré.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.RenameColumnOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>     Génère le code permettant d'effectuer une <see cref="T:System.Data.Entity.Migrations.Model.RenameColumnOperation" />. </summary>
      <param name="renameColumnOperation">Opération pour laquelle le code doit être généré.</param>
      <param name="writer">Writer de texte auquel ajouter le code généré.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.RenameTableOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>     Génère le code permettant d'effectuer une <see cref="T:System.Data.Entity.Migrations.Model.RenameTableOperation" />. </summary>
      <param name="renameTableOperation">Opération pour laquelle le code doit être généré.</param>
      <param name="writer">Writer de texte auquel ajouter le code généré.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.SqlOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>     Génère le code permettant d'effectuer une <see cref="T:System.Data.Entity.Migrations.Model.SqlOperation" />. </summary>
      <param name="sqlOperation">Opération pour laquelle le code doit être généré.</param>
      <param name="writer">Writer de texte auquel ajouter le code généré.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Spatial.DbGeography)">
      <summary>     Génère le code permettant de spécifier la valeur par défaut d'une colonne <see cref="T:System.Data.Spatial.DbGeography" />. </summary>
      <returns>Code représentant la valeur par défaut.</returns>
      <param name="defaultValue">Valeur à utiliser comme valeur par défaut.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Spatial.DbGeometry)">
      <summary>     Génère le code permettant de spécifier la valeur par défaut d'une colonne <see cref="T:System.Data.Spatial.DbGeometry" />. </summary>
      <returns>Code représentant la valeur par défaut.</returns>
      <param name="defaultValue">Valeur à utiliser comme valeur par défaut.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.DateTime)">
      <summary>     Génère le code permettant de spécifier la valeur par défaut d'une colonne <see cref="T:System.DateTime" />. </summary>
      <returns>Code représentant la valeur par défaut.</returns>
      <param name="defaultValue">Valeur à utiliser comme valeur par défaut.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.DateTimeOffset)">
      <summary>     Génère le code permettant de spécifier la valeur par défaut d'une colonne <see cref="T:System.DateTimeOffset" />. </summary>
      <returns>Code représentant la valeur par défaut.</returns>
      <param name="defaultValue">Valeur à utiliser comme valeur par défaut.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Decimal)">
      <summary>     Génère le code permettant de spécifier la valeur par défaut d'une colonne <see cref="T:System.Decimal" />. </summary>
      <returns>Code représentant la valeur par défaut.</returns>
      <param name="defaultValue">Valeur à utiliser comme valeur par défaut.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Guid)">
      <summary>     Génère le code permettant de spécifier la valeur par défaut d'une colonne <see cref="T:System.Guid" />. </summary>
      <returns>Code représentant la valeur par défaut.</returns>
      <param name="defaultValue">Valeur à utiliser comme valeur par défaut.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Int64)">
      <summary>     Génère le code permettant de spécifier la valeur par défaut d'une colonne <see cref="T:System.Int64" />. </summary>
      <returns>Code représentant la valeur par défaut.</returns>
      <param name="defaultValue">Valeur à utiliser comme valeur par défaut.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Object)">
      <summary>     Génère le code permettant de spécifier la valeur par défaut d'une colonne dont le type de données est inconnu. </summary>
      <returns>Code représentant la valeur par défaut.</returns>
      <param name="defaultValue">Valeur à utiliser comme valeur par défaut.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Single)">
      <summary>     Génère le code permettant de spécifier la valeur par défaut d'une colonne <see cref="T:System.Single" />. </summary>
      <returns>Code représentant la valeur par défaut.</returns>
      <param name="defaultValue">Valeur à utiliser comme valeur par défaut.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.String)">
      <summary>     Génère le code permettant de spécifier la valeur par défaut d'une colonne <see cref="T:System.String" />. </summary>
      <returns>Code représentant la valeur par défaut.</returns>
      <param name="defaultValue">Valeur à utiliser comme valeur par défaut.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.String,System.Collections.Generic.IEnumerable{System.Data.Entity.Migrations.Model.MigrationOperation},System.String,System.String,System.String,System.String)">
      <summary>Génère le fichier code-behind avec les métadonnées de migration. </summary>
      <returns>Code généré.</returns>
      <param name="migrationId">Identificateur unique de la migration.</param>
      <param name="operations">Opérations devant être effectuées par la migration.</param>
      <param name="sourceModel">Modèle source à stocker dans les métadonnées de migration.</param>
      <param name="targetModel">Modèle cible à stocker dans les métadonnées de migration.</param>
      <param name="namespace">Espace de noms dans lequel le code doit être généré.</param>
      <param name="className">Nom de la classe qui doit être générée.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.String,System.String,System.String,System.String,System.String)">
      <summary>Génère le fichier code-behind avec les métadonnées de migration. </summary>
      <returns>Code généré.</returns>
      <param name="migrationId">Identificateur unique de la migration.</param>
      <param name="sourceModel">Modèle source à stocker dans les métadonnées de migration.</param>
      <param name="targetModel">Modèle cible à stocker dans les métadonnées de migration.</param>
      <param name="namespace">Espace de noms dans lequel le code doit être généré.</param>
      <param name="className">Nom de la classe qui doit être générée.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.TimeSpan)">
      <summary>     Génère le code permettant de spécifier la valeur par défaut d'une colonne <see cref="T:System.TimeSpan" />. </summary>
      <returns>Code représentant la valeur par défaut.</returns>
      <param name="defaultValue">Valeur à utiliser comme valeur par défaut.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.GenerateInline(System.Data.Entity.Migrations.Model.AddForeignKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>     Génère le code permettant d'effectuer une <see cref="T:System.Data.Entity.Migrations.Model.AddForeignKeyOperation" /> dans le cadre d'une <see cref="T:System.Data.Entity.Migrations.Model.CreateTableOperation" />. </summary>
      <param name="addForeignKeyOperation">Opération pour laquelle le code doit être généré.</param>
      <param name="writer">Writer de texte auquel ajouter le code généré.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.GenerateInline(System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>     Génère le code permettant d'effectuer une <see cref="T:System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation" /> dans le cadre d'une <see cref="T:System.Data.Entity.Migrations.Model.CreateTableOperation" />. </summary>
      <param name="addPrimaryKeyOperation">Opération pour laquelle le code doit être généré.</param>
      <param name="writer">Writer de texte auquel ajouter le code généré.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.GenerateInline(System.Data.Entity.Migrations.Model.CreateIndexOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>     Génère le code permettant d'effectuer une <see cref="T:System.Data.Entity.Migrations.Model.CreateIndexOperation" /> dans le cadre d'une <see cref="T:System.Data.Entity.Migrations.Model.CreateTableOperation" />. </summary>
      <param name="createIndexOperation">Opération pour laquelle le code doit être généré.</param>
      <param name="writer">Writer de texte auquel ajouter le code généré.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Quote(System.String)">
      <summary>     Met entre guillemets un identificateur en utilisant l'échappement approprié pour lui permettre d'être stocké dans une chaîne. </summary>
      <returns>Identificateur entre guillemets.</returns>
      <param name="identifier">Identificateur à mettre entre guillemets.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.ScrubName(System.String)">
      <summary>     Supprime les caractères non valides du nom d'un artefact de base de données. </summary>
      <returns>Nom modifié.</returns>
      <param name="name">Nom à modifier.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.TranslateColumnType(System.Data.Metadata.Edm.PrimitiveTypeKind)">
      <summary>     Obtient le nom de type à utiliser pour une colonne du type de données spécifique. </summary>
      <returns>Nom de type à utiliser dans la migration générée.</returns>
      <param name="primitiveTypeKind">Type de données à traduire.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.WriteClassEnd(System.String,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary> Génère le code de fermeture d'une classe qui commençait par WriteClassStart. </summary>
      <param name="namespace">Espace de noms dans lequel le code doit être généré.</param>
      <param name="writer">Writer de texte auquel ajouter le code généré.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.WriteClassStart(System.String,System.String,System.Data.Entity.Migrations.Utilities.IndentedTextWriter,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.String})">
      <summary>     Génère un espace de noms en utilisant des instructions et une définition de classe. </summary>
      <param name="namespace">Espace de noms dans lequel le code doit être généré.</param>
      <param name="className">Nom de la classe qui doit être générée.</param>
      <param name="writer">Writer de texte auquel ajouter le code généré.</param>
      <param name="base">Classe de base de la classe générée.</param>
      <param name="designer">Valeur indiquant si cette classe est générée pour un fichier code-behind.</param>
      <param name="namespaces">Espaces de noms pour lesquels des directives d'importation seront ajoutées. Si la valeur est Null, les espaces de noms retournés par GetDefaultNamespaces sont utilisés.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.WriteProperty(System.String,System.String,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>     Génère une propriété pour retourner le modèle source ou le modèle cible dans le fichier code-behind. </summary>
      <param name="name">Nom de la propriété.</param>
      <param name="writer">Writer de texte auquel ajouter le code généré.</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.History.HistoryRow">
      <summary>   Cette classe est utilisée par Migrations Code First pour lire et écrire l'historique des migrations depuis la base de données. Elle n'est pas conçue pour être utilisée par un autre code et n'est publique qu'afin d'être accessible par Entity Framework lors d'une exécution dans un environnement de confiance partielle. Elle est susceptible d'être modifiée ou supprimée à l'avenir.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.History.HistoryRow.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Migrations.History.HistoryRow" />.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.History.HistoryRow.CreatedOn">
      <summary>     Obtient ou définit la date et l'heure de création de cette entrée dans l'historique des migrations. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.History.HistoryRow.MigrationId">
      <summary>     Obtient ou définit l'ID de la migration que cette ligne représente. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.History.HistoryRow.Model">
      <summary>     Obtient ou définit l'état du modèle après l'application de cette migration. </summary>
      <returns>Retourne <see cref="T:System.Byte" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.History.HistoryRow.ProductVersion">
      <summary>     Obtient ou définit la version d'Entity Framework qui a créé cette entrée. </summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Infrastructure.AutomaticDataLossException">
      <summary>Représente une erreur qui se produit lorsqu'une migration automatique aboutirait à une perte de données.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.AutomaticDataLossException.#ctor(System.String)">
      <summary>     Initialise une nouvelle instance de la classe AutomaticDataLossException. </summary>
      <param name="message">Message décrivant l'erreur.</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.Infrastructure.AutomaticMigrationsDisabledException">
      <summary>Représente une erreur qui se produit lorsqu'il y a des modifications de modèle en attente après l'application de la dernière migration et que la migration automatique est désactivée.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.AutomaticMigrationsDisabledException.#ctor(System.String)">
      <summary>     Initialise une nouvelle instance de la classe AutomaticMigrationsDisabledException. </summary>
      <param name="message">Message décrivant l'erreur.</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.Infrastructure.IMigrationMetadata">
      <summary>Fournit des métadonnées supplémentaires concernant une migration basée sur le code.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Infrastructure.IMigrationMetadata.Id">
      <summary>     Obtient l'identificateur unique de la migration. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Infrastructure.IMigrationMetadata.Source">
      <summary>     Obtient l'état du modèle avant l'exécution de cette migration. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Infrastructure.IMigrationMetadata.Target">
      <summary>     Obtient l'état du modèle après l'exécution de cette migration. </summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Infrastructure.MigrationsException">
      <summary>Représente les erreurs qui se produisent dans le pipeline Migrations Code First.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigrationsException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary> Initialise une nouvelle instance de la classe MigrationsException avec les données sérialisées. </summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> qui contient les données d'objet sérialisées concernant l'exception levée.</param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" /> qui contient des informations contextuelles sur la source ou la destination.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigrationsException.#ctor(System.String)">
      <summary> Initialise une nouvelle instance de la classe MigrationsException. </summary>
      <param name="message">Message décrivant l'erreur.</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.Infrastructure.MigrationsLogger">
      <summary>Classe de base pour les journaux qui peuvent être utilisés dans le cadre du processus de migration.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigrationsLogger.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Migrations.Infrastructure.MigrationsLogger" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigrationsLogger.Info(System.String)">
      <summary>     Consigne un message d'information. </summary>
      <param name="message">Message à consigner.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigrationsLogger.Verbose(System.String)">
      <summary>     Consigne certaines informations supplémentaires qui ne doivent être présentées à l'utilisateur que s'il demande une sortie détaillée. </summary>
      <param name="message">Message à consigner.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigrationsLogger.Warning(System.String)">
      <summary>     Consigne un avertissement dont l'utilisateur doit avoir connaissance. </summary>
      <param name="message">Message à consigner.</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.Infrastructure.MigratorBase">
      <summary>Classe de base pour les éléments décoratifs qui encapsulent la classe principale <see cref="T:System.Data.Entity.Migrations.DbMigrator" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigratorBase.#ctor(System.Data.Entity.Migrations.Infrastructure.MigratorBase)">
      <summary>     Initialise une nouvelle instance de la classe MigratorBase. </summary>
      <param name="innerMigrator">Classe Migrator que cet élément décoratif encapsule.</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Infrastructure.MigratorBase.Configuration">
      <summary>     Obtient la configuration utilisée pour le processus de migration. </summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigratorBase.GetDatabaseMigrations">
      <summary>     Obtient la liste des migrations qui ont été appliquées à la base de données. </summary>
      <returns>Liste des ID de migration.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigratorBase.GetLocalMigrations">
      <summary>     Obtient la liste des migrations qui sont définies dans l'assembly. </summary>
      <returns>Liste des ID de migration.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigratorBase.GetPendingMigrations">
      <summary>     Obtient la liste des migrations en attente qui n'ont pas été appliquées à la base de données. </summary>
      <returns>Liste des ID de migration.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigratorBase.Update">
      <summary>     Met à jour la base de données cible vers la dernière migration. </summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigratorBase.Update(System.String)">
      <summary>     Met à jour la base de données cible vers une migration spécifique. </summary>
      <param name="targetMigration">Migration vers laquelle effectuer la mise à niveau ou rétrogradation.</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.Infrastructure.MigratorLoggingDecorator">
      <summary>Élément décoratif permettant la journalisation pendant les opérations de migration.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigratorLoggingDecorator.#ctor(System.Data.Entity.Migrations.Infrastructure.MigratorBase,System.Data.Entity.Migrations.Infrastructure.MigrationsLogger)">
      <summary>     Initialise une nouvelle instance de la classe MigratorLoggingDecorator. </summary>
      <param name="innerMigrator">Classe Migrator que cet élément décoratif encapsule.</param>
      <param name="logger">Journal dans lequel les messages doivent être écrits.</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.Infrastructure.MigratorScriptingDecorator">
      <summary>Représente un élément décoratif permettant de produire un script SQL au lieu d'appliquer des modifications à la base de données. L'utilisation de cet élément décoratif pour encapsuler <see cref="T:System.Data.Entity.Migrations.DbMigrator" /> va empêcher <see cref="T:System.Data.Entity.Migrations.DbMigrator" /> d'appliquer des modifications à la base de données cible.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigratorScriptingDecorator.#ctor(System.Data.Entity.Migrations.Infrastructure.MigratorBase)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Migrations.Infrastructure.MigratorScriptingDecorator" />. </summary>
      <param name="innerMigrator">Classe Migrator que cet élément décoratif encapsule.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigratorScriptingDecorator.ScriptUpdate(System.String,System.String)">
      <summary>Met à jour la base de données vers la migration cible.</summary>
      <returns>Script SQL généré.</returns>
      <param name="sourceMigration">Migration source.</param>
      <param name="targetMigration">Migration vers laquelle effectuer la mise à niveau ou rétrogradation.</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.AddColumnOperation">
      <summary>Représente une colonne ajoutée à une table.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.AddColumnOperation.#ctor(System.String,System.Data.Entity.Migrations.Model.ColumnModel,System.Object)">
      <summary>     Initialise une nouvelle instance de la classe AddColumnOperation. </summary>
      <param name="table">Nom de la table dans laquelle la colonne doit être ajoutée.</param>
      <param name="column">Détails de la colonne ajoutée.</param>
      <param name="anonymousArguments">     Arguments supplémentaires qui peuvent être traités par les fournisseurs.      Utilisez une syntaxe de type anonyme pour spécifier les arguments, par exemple « new { SampleArgument = "MyValue" } ». </param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AddColumnOperation.Column">
      <summary>     Obtient les détails de la colonne ajoutée. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AddColumnOperation.Inverse">
      <summary>     Obtient une opération qui représente la suppression de la colonne ajoutée. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AddColumnOperation.IsDestructiveChange">
      <summary>Obtient {insérer le texte ici}.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AddColumnOperation.Table">
      <summary>     Obtient le nom de la table dans laquelle la colonne doit être ajoutée. </summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.AddForeignKeyOperation">
      <summary>Représente une contrainte de clé étrangère ajoutée à une table.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.AddForeignKeyOperation.#ctor(System.Object)">
      <summary>     Initialise une nouvelle instance de la classe AddForeignKeyOperation.     Les propriétés PrincipalTable, PrincipalColumns, DependentTable et DependentColumns doivent également être remplies. </summary>
      <param name="anonymousArguments">     Arguments supplémentaires qui peuvent être traités par les fournisseurs.      Utilisez une syntaxe de type anonyme pour spécifier les arguments, par exemple « new { SampleArgument = "MyValue" } ». </param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AddForeignKeyOperation.CascadeDelete">
      <summary>     Obtient ou définit une valeur indiquant si la suppression en cascade doit être configurée sur la contrainte de clé étrangère. </summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.AddForeignKeyOperation.CreateCreateIndexOperation">
      <summary>     Obtient une opération permettant de créer un index sur les colonnes de clé étrangère. </summary>
      <returns>Opération permettant d'ajouter l'index.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AddForeignKeyOperation.Inverse">
      <summary>     Obtient une opération permettant de supprimer la contrainte de clé étrangère. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AddForeignKeyOperation.IsDestructiveChange">
      <summary>Obtient une valeur indiquant si une modification est destructrice.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AddForeignKeyOperation.PrincipalColumns">
      <summary>     Nom des colonnes que la contrainte de clé étrangère doit cibler. </summary>
      <returns>Noms de colonnes.</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation">
      <summary>Représente l'ajout d'une clé primaire à une table.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation.#ctor(System.Object)">
      <summary>     Initialise une nouvelle instance de la classe AddPrimaryKeyOperation.     Les propriétés Table et Columns doivent également être remplies. </summary>
      <param name="anonymousArguments">     Arguments supplémentaires qui peuvent être traités par les fournisseurs.      Utilisez une syntaxe de type anonyme pour spécifier les arguments, par exemple « new { SampleArgument = "MyValue" } ». </param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation.Inverse">
      <summary>     Obtient une opération permettant de supprimer la clé primaire. </summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.AlterColumnOperation">
      <summary>Représente la modification d'une colonne existante.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.AlterColumnOperation.#ctor(System.String,System.Data.Entity.Migrations.Model.ColumnModel,System.Boolean,System.Data.Entity.Migrations.Model.AlterColumnOperation,System.Object)">
      <summary>     Initialise une nouvelle instance de la classe AlterColumnOperation. </summary>
      <param name="table">Nom de la table à laquelle la colonne appartient.</param>
      <param name="column">Détails de la modification de la colonne.</param>
      <param name="isDestructiveChange">Valeur indiquant si cette modification va entraîner une perte de données.</param>
      <param name="inverse">Opération permettant d'annuler cette modification de la colonne.</param>
      <param name="anonymousArguments">     Arguments supplémentaires qui peuvent être traités par les fournisseurs.      Utilisez une syntaxe de type anonyme pour spécifier les arguments, par exemple « new { SampleArgument = "MyValue" } ». </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.AlterColumnOperation.#ctor(System.String,System.Data.Entity.Migrations.Model.ColumnModel,System.Boolean,System.Object)">
      <summary>     Initialise une nouvelle instance de la classe AlterColumnOperation. </summary>
      <param name="table">Nom de la table à laquelle la colonne appartient.</param>
      <param name="column">Détails de la modification de la colonne.</param>
      <param name="isDestructiveChange">Valeur indiquant si cette modification va entraîner une perte de données.</param>
      <param name="anonymousArguments">     Arguments supplémentaires qui peuvent être traités par les fournisseurs.      Utilisez une syntaxe de type anonyme pour spécifier les arguments, par exemple « new { SampleArgument = "MyValue" } ». </param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AlterColumnOperation.Column">
      <summary>     Obtient la nouvelle définition de la colonne. </summary>
      <returns>Définition de la colonne.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AlterColumnOperation.Inverse">
      <summary>     Obtient une opération qui représente l'annulation de la modification.     L'opération inverse ne peut pas être calculée automatiquement ; si elle n'a pas été fournie au constructeur, cette propriété retourne une valeur Null. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AlterColumnOperation.IsDestructiveChange">
      <summary>Obtient une valeur indiquant si la modification est destructrice.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AlterColumnOperation.Table">
      <summary>     Obtient le nom de la table à laquelle la colonne appartient. </summary>
      <returns>Nom de la table.</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.ColumnModel">
      <summary>Représente les informations relatives à une colonne.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.ColumnModel.#ctor(System.Data.Metadata.Edm.PrimitiveTypeKind)">
      <summary>     Initialise une nouvelle instance de la classe. </summary>
      <param name="type">Type de données de cette colonne.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.ColumnModel.#ctor(System.Data.Metadata.Edm.PrimitiveTypeKind,System.Data.Metadata.Edm.TypeUsage)">
      <summary>     Initialise une nouvelle instance de la classe. </summary>
      <param name="type">Type de données de cette colonne.</param>
      <param name="typeUsage">     Détails supplémentaires sur le type de données.     Parmi ces détails figurent notamment la longueur maximale, l'acceptation des valeurs Null, etc. </param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ColumnModel.ClrDefaultValue">
      <summary>     Obtient la valeur par défaut du type CLR correspondant au type de base de données de cette colonne. </summary>
      <returns>Valeur par défaut.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ColumnModel.ClrType">
      <summary>     Obtient le type CLR correspondant au type de base de données de cette colonne. </summary>
      <returns>Type CLR.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ColumnModel.DefaultValue">
      <summary>     Obtient ou définit une valeur constante à utiliser comme valeur par défaut de cette colonne. </summary>
      <returns>Valeur par défaut de la colonne.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ColumnModel.DefaultValueSql">
      <summary>     Obtient ou définit une expression SQL utilisée comme valeur par défaut de cette colonne. </summary>
      <returns>Valeur par défaut de la colonne.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ColumnModel.IsFixedLength">
      <summary>     Obtient ou définit une valeur indiquant si cette colonne est de longueur fixe.     Valide uniquement pour les données de type tableau. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ColumnModel.IsIdentity">
      <summary>     Obtient ou définit une valeur indiquant si les valeurs de cette colonne vont être générées par la base de données à l'aide du modèle d'identité. </summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.ColumnModel.IsNarrowerThan(System.Data.Entity.Migrations.Model.ColumnModel,System.Data.Common.DbProviderManifest)">
      <summary>     Détermine si le type de données de cette colonne est plus restreint que celui d'une autre colonne.     Cette valeur permet de déterminer si le remplacement de la définition de colonne fournie par cette définition va entraîner une perte de données. </summary>
      <returns>true si le type de données de cette colonne est plus restreint.</returns>
      <param name="column">Colonne de comparaison.</param>
      <param name="providerManifest">Détails du fournisseur de base de données utilisé.</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ColumnModel.IsNullable">
      <summary>     Obtient ou définit une valeur indiquant si cette colonne peut stocker des valeurs Null. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ColumnModel.IsTimestamp">
      <summary>     Obtient ou définit une valeur indiquant si cette colonne doit être configurée comme un horodatage. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ColumnModel.IsUnicode">
      <summary>     Obtient ou définit une valeur indiquant si cette colonne prend en charge les caractères Unicode.     Valide uniquement pour les données de type texte. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ColumnModel.MaxLength">
      <summary>     Obtient ou définit la longueur maximale de cette colonne.     Valide uniquement pour les données de type tableau. </summary>
      <returns>Longueur maximale.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ColumnModel.Name">
      <summary>     Obtient ou définit le nom de la colonne. </summary>
      <returns>Nom.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ColumnModel.Precision">
      <summary>     Obtient ou définit la précision de cette colonne.     Valide uniquement pour les données de type décimal. </summary>
      <returns>Précision.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ColumnModel.Scale">
      <summary>     Obtient ou définit l'échelle de cette colonne.     Valide uniquement pour les données de type décimal. </summary>
      <returns>Échelle.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ColumnModel.StoreType">
      <summary>     Obtient ou définit un type de données spécifique du fournisseur à utiliser pour cette colonne. </summary>
      <returns>Type de données.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ColumnModel.Type">
      <summary>     Obtient le type de données de cette colonne. </summary>
      <returns>Type de données.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ColumnModel.TypeUsage">
      <summary>     Obtient des détails supplémentaires sur le type de données de cette colonne.     Parmi ces détails figurent notamment la longueur maximale, l'acceptation des valeurs Null, etc. </summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.CreateIndexOperation">
      <summary>Représente la création d'un index de base de données.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.CreateIndexOperation.#ctor(System.Object)">
      <summary>     Initialise une nouvelle instance de la classe CreateIndexOperation.     Les propriétés Table et Columns doivent également être remplies. </summary>
      <param name="anonymousArguments">     Arguments supplémentaires qui peuvent être traités par les fournisseurs.      Utilisez une syntaxe de type anonyme pour spécifier les arguments, par exemple « new { SampleArgument = "MyValue" } ». </param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.CreateIndexOperation.Inverse">
      <summary>     Obtient une opération permettant de supprimer cet index. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.CreateIndexOperation.IsDestructiveChange">
      <summary>Obtient une valeur indiquant si la modification est destructrice.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.CreateIndexOperation.IsUnique">
      <summary>     Obtient ou définit une valeur indiquant s'il s'agit d'un index unique. </summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.CreateTableOperation">
      <summary>Représente la création d'une table.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.CreateTableOperation.#ctor(System.String,System.Object)">
      <summary>     Initialise une nouvelle instance de la classe CreateTableOperation. </summary>
      <param name="name">Nom de la table à créer.</param>
      <param name="anonymousArguments">     Arguments supplémentaires qui peuvent être traités par les fournisseurs.      Utilisez une syntaxe de type anonyme pour spécifier les arguments, par exemple « new { SampleArgument = "MyValue" } ». </param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.CreateTableOperation.Columns">
      <summary>     Obtient les colonnes à inclure dans la nouvelle table. </summary>
      <returns>Colonnes à inclure.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.CreateTableOperation.Inverse">
      <summary>     Obtient une opération permettant de supprimer la table. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.CreateTableOperation.IsDestructiveChange">
      <summary>Obtient une valeur indiquant si la modification est destructrice.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.CreateTableOperation.Name">
      <summary>     Obtient le nom de la table à créer. </summary>
      <returns>Nom.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.CreateTableOperation.PrimaryKey">
      <summary>     Obtient ou définit la clé primaire de la nouvelle table. </summary>
      <returns>Clé primaire.</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.DeleteHistoryOperation">
      <summary>Représente la suppression d'un nouvel enregistrement de la table de l'historique des migrations. La table de l'historique des migrations permet de stocker un journal des migrations qui ont été appliquées à la base de données.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DeleteHistoryOperation.#ctor(System.String,System.String,System.Object)">
      <summary>     Initialise une nouvelle instance de la classe DeleteHistoryOperation. </summary>
      <param name="table">Nom de la table de l'historique des migrations.</param>
      <param name="migrationId">ID de l'enregistrement de migration à supprimer.</param>
      <param name="anonymousArguments">     Arguments supplémentaires qui peuvent être traités par les fournisseurs.      Utilisez une syntaxe de type anonyme pour spécifier les arguments, par exemple « new { SampleArgument = "MyValue" } ». </param>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.DropColumnOperation">
      <summary>Représente une colonne supprimée d'une table.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DropColumnOperation.#ctor(System.String,System.String,System.Data.Entity.Migrations.Model.AddColumnOperation,System.Object)">
      <summary>     Initialise une nouvelle instance de la classe DropColumnOperation. </summary>
      <param name="table">Nom de la table dans laquelle la colonne doit être supprimée.</param>
      <param name="name">Nom de la colonne à supprimer.</param>
      <param name="inverse">Opération qui représente l'annulation de l'opération de suppression.</param>
      <param name="anonymousArguments">     Arguments supplémentaires qui peuvent être traités par les fournisseurs.      Utilisez une syntaxe de type anonyme pour spécifier les arguments, par exemple « new { SampleArgument = "MyValue" } ». </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DropColumnOperation.#ctor(System.String,System.String,System.Object)">
      <summary>     Initialise une nouvelle instance de la classe DropColumnOperation. </summary>
      <param name="table">Nom de la table dans laquelle la colonne doit être supprimée.</param>
      <param name="name">Nom de la colonne à supprimer.</param>
      <param name="anonymousArguments">     Arguments supplémentaires qui peuvent être traités par les fournisseurs.      Utilisez une syntaxe de type anonyme pour spécifier les arguments, par exemple « new { SampleArgument = "MyValue" } ». </param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropColumnOperation.Inverse">
      <summary>     Obtient une opération qui représente l'annulation de la suppression de la colonne.     L'opération inverse ne peut pas être calculée automatiquement ; si elle n'a pas été fournie au constructeur, cette propriété retourne une valeur Null. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropColumnOperation.IsDestructiveChange">
      <summary>Obtient une valeur indiquant si la modification est destructrice.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropColumnOperation.Name">
      <summary>     Obtient le nom de la colonne à supprimer. </summary>
      <returns>Nom de colonne.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropColumnOperation.Table">
      <summary>     Obtient le nom de la table dans laquelle la colonne doit être supprimée. </summary>
      <returns>Nom de la table.</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.DropForeignKeyOperation">
      <summary>Représente une contrainte de clé étrangère supprimée d'une table.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DropForeignKeyOperation.#ctor(System.Data.Entity.Migrations.Model.AddForeignKeyOperation,System.Object)">
      <summary>     Initialise une nouvelle instance de la classe DropForeignKeyOperation. </summary>
      <param name="inverse">Opération représentant l'annulation de la suppression de la contrainte de clé étrangère.</param>
      <param name="anonymousArguments">     Arguments supplémentaires qui peuvent être traités par les fournisseurs.      Utilisez une syntaxe de type anonyme pour spécifier les arguments, par exemple « new { SampleArgument = "MyValue" } ». </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DropForeignKeyOperation.#ctor(System.Object)">
      <summary>     Initialise une nouvelle instance de la classe DropForeignKeyOperation.     Les propriétés PrincipalTable, DependentTable et DependentColumns doivent également être remplies. </summary>
      <param name="anonymousArguments">     Arguments supplémentaires qui peuvent être traités par les fournisseurs.      Utilisez une syntaxe de type anonyme pour spécifier les arguments, par exemple « new { SampleArgument = "MyValue" } ». </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DropForeignKeyOperation.CreateDropIndexOperation">
      <summary>     Obtient une opération permettant de supprimer l'index associé sur les colonnes de clé étrangère. </summary>
      <returns>Opération permettant de supprimer l'index.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropForeignKeyOperation.Inverse">
      <summary>     Obtient une opération représentant l'annulation de la suppression de la contrainte de clé étrangère.     L'opération inverse ne peut pas être calculée automatiquement ; si elle n'a pas été fournie au constructeur, cette propriété retourne une valeur Null. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropForeignKeyOperation.IsDestructiveChange">
      <summary>Obtient une valeur indiquant si la modification est destructrice.</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.DropIndexOperation">
      <summary>Représente la suppression d'un index existant.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DropIndexOperation.#ctor(System.Data.Entity.Migrations.Model.CreateIndexOperation,System.Object)">
      <summary>     Initialise une nouvelle instance de la classe DropIndexOperation. </summary>
      <param name="inverse">Opération qui représente l'annulation de la suppression de l'index.</param>
      <param name="anonymousArguments">     Arguments supplémentaires qui peuvent être traités par les fournisseurs.      Utilisez une syntaxe de type anonyme pour spécifier les arguments, par exemple « new { SampleArgument = "MyValue" } ». </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DropIndexOperation.#ctor(System.Object)">
      <summary>     Initialise une nouvelle instance de la classe DropIndexOperation. </summary>
      <param name="anonymousArguments">     Arguments supplémentaires qui peuvent être traités par les fournisseurs.      Utilisez une syntaxe de type anonyme pour spécifier les arguments, par exemple « new { SampleArgument = "MyValue" } ». </param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropIndexOperation.Inverse">
      <summary>     Obtient une opération qui représente l'annulation de la suppression de l'index.     L'opération inverse ne peut pas être calculée automatiquement ; si elle n'a pas été fournie au constructeur, cette propriété retourne une valeur Null. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropIndexOperation.IsDestructiveChange">
      <summary>Obtient une valeur indiquant si une modification est destructrice.</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.DropPrimaryKeyOperation">
      <summary>Représente la suppression d'une clé primaire d'une table.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DropPrimaryKeyOperation.#ctor(System.Object)">
      <summary>     Initialise une nouvelle instance de la classe DropPrimaryKeyOperation.     Les propriétés Table et Columns doivent également être remplies. </summary>
      <param name="anonymousArguments">     Arguments supplémentaires qui peuvent être traités par les fournisseurs.      Utilisez une syntaxe de type anonyme pour spécifier les arguments, par exemple « new { SampleArgument = "MyValue" } ». </param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropPrimaryKeyOperation.Inverse">
      <summary>     Obtient une opération permettant d'ajouter la clé primaire. </summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.DropTableOperation">
      <summary>Représente la suppression d'une table existante.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DropTableOperation.#ctor(System.String,System.Data.Entity.Migrations.Model.CreateTableOperation,System.Object)">
      <summary>     Initialise une nouvelle instance de la classe DropTableOperation. </summary>
      <param name="name">Nom de la table à supprimer.</param>
      <param name="inverse">Opération qui représente l'annulation de la suppression de la table.</param>
      <param name="anonymousArguments">     Arguments supplémentaires qui peuvent être traités par les fournisseurs.      Utilisez une syntaxe de type anonyme pour spécifier les arguments, par exemple « new { SampleArgument = "MyValue" } ». </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DropTableOperation.#ctor(System.String,System.Object)">
      <summary>     Initialise une nouvelle instance de la classe DropTableOperation. </summary>
      <param name="name">Nom de la table à supprimer.</param>
      <param name="anonymousArguments">     Arguments supplémentaires qui peuvent être traités par les fournisseurs.      Utilisez une syntaxe de type anonyme pour spécifier les arguments, par exemple « new { SampleArgument = "MyValue" } ». </param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropTableOperation.Inverse">
      <summary>     Obtient une opération qui représente l'annulation de la suppression de la table.     L'opération inverse ne peut pas être calculée automatiquement ; si elle n'a pas été fournie au constructeur, cette propriété retourne une valeur Null. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropTableOperation.IsDestructiveChange">
      <summary>Obtient une valeur indiquant si la modification est destructrice.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropTableOperation.Name">
      <summary>     Obtient le nom de la table à supprimer. </summary>
      <returns>Nom de la table.</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.ForeignKeyOperation">
      <summary>Classe de base pour les modifications qui affectent les contraintes de clé étrangère.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.ForeignKeyOperation.#ctor(System.Object)">
      <summary>     Initialise une nouvelle instance de la classe ForeignKeyOperation. </summary>
      <param name="anonymousArguments">     Arguments supplémentaires qui peuvent être traités par les fournisseurs.      Utilisez une syntaxe de type anonyme pour spécifier les arguments, par exemple « new { SampleArgument = "MyValue" } ». </param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ForeignKeyOperation.DependentColumns">
      <summary>     Noms des colonnes de clé étrangère. </summary>
      <returns>Noms de colonnes.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ForeignKeyOperation.DependentTable">
      <summary>     Obtient ou définit le nom de la table dans laquelle se trouvent les colonnes de clé étrangère. </summary>
      <returns>Nom de la table.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ForeignKeyOperation.HasDefaultName">
      <summary>     Obtient une valeur indiquant si un nom spécifique a été fourni pour cette contrainte de clé étrangère. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ForeignKeyOperation.Name">
      <summary>     Obtient ou définit le nom de cette contrainte de clé étrangère.     Si aucun nom n'est fourni, un nom par défaut est déterminé. </summary>
      <returns>Nom de la contrainte.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ForeignKeyOperation.PrincipalTable">
      <summary>     Obtient ou définit le nom de la table ciblée par les contraintes de clé étrangère. </summary>
      <returns>Nom de la table.</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.HistoryOperation">
      <summary>Classe de base commune pour les opérations qui affectent la table de l'historique des migrations.  La table de l'historique des migrations permet de stocker un journal des migrations qui ont été appliquées à la base de données.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.HistoryOperation.#ctor(System.String,System.String,System.Object)">
      <summary>     Initialise une nouvelle instance de la classe HistoryOperation. </summary>
      <param name="table">Nom de la table de l'historique des migrations.</param>
      <param name="migrationId">Nom de la migration affectée.</param>
      <param name="anonymousArguments">     Arguments supplémentaires qui peuvent être traités par les fournisseurs.      Utilisez une syntaxe de type anonyme pour spécifier les arguments, par exemple « new { SampleArgument = "MyValue" } ». </param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.HistoryOperation.IsDestructiveChange">
      <summary>Obtient une valeur indiquant si la modification est destructrice.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.HistoryOperation.MigrationId">
      <summary>     Obtient le nom de la migration affectée. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.HistoryOperation.Table">
      <summary>     Obtient le nom de la table de l'historique des migrations. </summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.IndexOperation">
      <summary>Classe de base commune des opérations affectant les index.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.IndexOperation.#ctor(System.Object)">
      <summary>     Initialise une nouvelle instance de la classe IndexOperation. </summary>
      <param name="anonymousArguments">     Arguments supplémentaires qui peuvent être traités par les fournisseurs.      Utilisez une syntaxe de type anonyme pour spécifier les arguments, par exemple « new { SampleArgument = "MyValue" } ». </param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.IndexOperation.Columns">
      <summary>     Obtient ou définit les colonnes indexées. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.IndexOperation.HasDefaultName">
      <summary>     Obtient une valeur indiquant si un nom spécifique a été fourni pour cet index. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.IndexOperation.Name">
      <summary>     Obtient ou définit le nom de cet index.     Si aucun nom n'est fourni, un nom par défaut est déterminé. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.IndexOperation.Table">
      <summary>     Obtient ou définit la table à laquelle appartient l'index. </summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.InsertHistoryOperation">
      <summary>Représente l'insertion d'un nouvel enregistrement dans la table de l'historique des migrations. La table de l'historique des migrations permet de stocker un journal des migrations qui ont été appliquées à la base de données.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.InsertHistoryOperation.#ctor(System.String,System.String,System.Byte[],System.Object)">
      <summary>     Initialise une nouvelle instance de la classe InsertHistoryOperation. </summary>
      <param name="table">Nom de la table de l'historique des migrations.</param>
      <param name="migrationId">ID de l'enregistrement de migration à insérer.</param>
      <param name="model">Valeur à stocker dans la colonne du modèle.</param>
      <param name="anonymousArguments">     Arguments supplémentaires qui peuvent être traités par les fournisseurs.      Utilisez une syntaxe de type anonyme pour spécifier les arguments, par exemple « new { SampleArgument = "MyValue" } ». </param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.InsertHistoryOperation.IsDestructiveChange">
      <summary>Obtient {insérer le texte ici}.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.InsertHistoryOperation.Model">
      <summary>     Obtient la valeur à stocker dans la table de l'historique représentant le modèle cible de la migration. </summary>
      <returns>Retourne <see cref="T:System.Byte" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.InsertHistoryOperation.ProductVersion">
      <summary>     Obtient la valeur à stocker dans la table de l'historique indiquant la version d'Entity Framework utilisée pour produire cette migration. </summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.MigrationOperation">
      <summary>Représente une opération permettant de modifier un schéma de base de données.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.MigrationOperation.#ctor(System.Object)">
      <summary>     Initialise une nouvelle instance de la classe MigrationOperation. </summary>
      <param name="anonymousArguments">       Utilisez une syntaxe de type anonyme pour spécifier les arguments, par exemple « new { SampleArgument = "MyValue" } ». </param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.MigrationOperation.AnonymousArguments">
      <summary>     Obtient les arguments supplémentaires qui peuvent être traités par les fournisseurs. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.MigrationOperation.Inverse">
      <summary>     Obtient une opération qui va annuler cette opération. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.MigrationOperation.IsDestructiveChange">
      <summary>     Obtient une valeur indiquant si cette opération peut entraîner une perte de données. </summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.MoveTableOperation">
      <summary>Représente le déplacement d'une table d'un schéma vers un autre.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.MoveTableOperation.#ctor(System.String,System.String,System.Object)">
      <summary>     Initialise une nouvelle instance de la classe MoveTableOperation. </summary>
      <param name="name">Nom de la table à déplacer.</param>
      <param name="newSchema">Nom du schéma vers lequel la table doit être déplacée.</param>
      <param name="anonymousArguments">     Arguments supplémentaires qui peuvent être traités par les fournisseurs.      Utilisez une syntaxe de type anonyme pour spécifier les arguments, par exemple « new { SampleArgument = "MyValue" } ». </param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.MoveTableOperation.Inverse">
      <summary>     Obtient une opération qui redéplace la table vers son schéma d'origine. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.MoveTableOperation.IsDestructiveChange">
      <summary>Obtient une valeur indiquant si la modification est destructrice.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.MoveTableOperation.Name">
      <summary>     Obtient le nom de la table à déplacer. </summary>
      <returns>Nom.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.MoveTableOperation.NewSchema">
      <summary>     Obtient le nom du schéma vers lequel la table doit être déplacée. </summary>
      <returns>Nom du schéma.</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.PrimaryKeyOperation">
      <summary>Classe de base commune pour représenter les opérations affectant les clés primaires.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.PrimaryKeyOperation.#ctor(System.Object)">
      <summary>     Initialise une nouvelle instance de la classe PrimaryKeyOperation. </summary>
      <param name="anonymousArguments">     Arguments supplémentaires qui peuvent être traités par les fournisseurs.      Utilisez une syntaxe de type anonyme pour spécifier les arguments, par exemple « new { SampleArgument = "MyValue" } ». </param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.PrimaryKeyOperation.Columns">
      <summary>     Obtient les colonnes qui constituent la clé primaire. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.PrimaryKeyOperation.HasDefaultName">
      <summary>     Obtient une valeur indiquant si un nom spécifique a été fourni pour cette clé primaire. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.PrimaryKeyOperation.IsDestructiveChange">
      <summary>Obtient une valeur indiquant si cette opération peut entraîner une perte de données.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.PrimaryKeyOperation.Name">
      <summary>     Obtient ou définit le nom de cette clé primaire.     Si aucun nom n'est fourni, un nom par défaut est déterminé. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.PrimaryKeyOperation.Table">
      <summary>     Obtient ou définit le nom de la table qui contient la clé primaire. </summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.RenameColumnOperation">
      <summary>Représente le changement de nom d'une colonne existante.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.RenameColumnOperation.#ctor(System.String,System.String,System.String,System.Object)">
      <summary>     Initialise une nouvelle instance de la classe RenameColumnOperation. </summary>
      <param name="table">Nom de la table à laquelle la colonne appartient.</param>
      <param name="name">Nom de la colonne à renommer.</param>
      <param name="newName">Nouveau nom de la colonne.</param>
      <param name="anonymousArguments">     Arguments supplémentaires qui peuvent être traités par les fournisseurs.      Utilisez une syntaxe de type anonyme pour spécifier les arguments, par exemple « new { SampleArgument = "MyValue" } ». </param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameColumnOperation.Inverse">
      <summary>     Obtient une opération qui annule le changement de nom. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameColumnOperation.IsDestructiveChange">
      <summary>Obtient une valeur indiquant si la modification est destructrice.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameColumnOperation.Name">
      <summary>     Obtient le nom de la colonne à renommer. </summary>
      <returns>Nom.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameColumnOperation.NewName">
      <summary>     Obtient le nouveau nom de la colonne. </summary>
      <returns>Nouveau nom.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameColumnOperation.Table">
      <summary>     Obtient le nom de la table à laquelle la colonne appartient. </summary>
      <returns>Nom de la table.</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.RenameTableOperation">
      <summary>  Représente le changement de nom d'une table existante.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.RenameTableOperation.#ctor(System.String,System.String,System.Object)">
      <summary>     Initialise une nouvelle instance de la classe RenameTableOperation. </summary>
      <param name="name">Nom de la table à renommer.</param>
      <param name="newName">Nouveau nom de la table.</param>
      <param name="anonymousArguments">     Arguments supplémentaires qui peuvent être traités par les fournisseurs.      Utilisez une syntaxe de type anonyme pour spécifier les arguments, par exemple « new { SampleArgument = "MyValue" } ». </param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameTableOperation.Inverse">
      <summary>     Obtient une opération qui annule le changement de nom. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameTableOperation.IsDestructiveChange">
      <summary>Obtient une valeur indiquant si la modification est destructrice.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameTableOperation.Name">
      <summary>     Obtient le nom de la table à renommer. </summary>
      <returns>Nom.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameTableOperation.NewName">
      <summary>     Obtient le nouveau nom de la table. </summary>
      <returns>Nouveau nom.</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.SqlOperation">
      <summary>Représente une instruction SQL spécifique du fournisseur à exécuter directement par rapport à la base de données cible.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.SqlOperation.#ctor(System.String,System.Object)">
      <summary>     Initialise une nouvelle instance de la classe SqlOperation. </summary>
      <param name="sql">Instruction SQL à exécuter.</param>
      <param name="anonymousArguments">     Arguments supplémentaires qui peuvent être traités par les fournisseurs.      Utilisez une syntaxe de type anonyme pour spécifier les arguments, par exemple « new { SampleArgument = "MyValue" } ». </param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.SqlOperation.IsDestructiveChange">
      <summary>Obtient une valeur indiquant si cette opération peut entraîner une perte de données.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.SqlOperation.Sql">
      <summary>     Obtient l'instruction SQL à exécuter. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.SqlOperation.SuppressTransaction">
      <summary>     Obtient ou définit une valeur indiquant si cette instruction doit être exécutée en-dehors de l'étendue de transaction utilisée pour rendre le processus de migration transactionnel.     Si cette option a la valeur true, cette opération n'est pas annulée en cas d'échec du processus de migration. </summary>
      <returns>true si l'opération n'est pas annulée en cas d'échec de la migration.</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Sql.MigrationSqlGenerator">
      <summary>   Classe de base commune pour les fournisseurs qui convertissent des opérations de migration indépendantes du fournisseur en commandes SQL propres au fournisseur de base de données.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.MigrationSqlGenerator.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Migrations.Sql.MigrationSqlGenerator" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.MigrationSqlGenerator.Generate(System.Collections.Generic.IEnumerable{System.Data.Entity.Migrations.Model.MigrationOperation},System.String)">
      <summary>     Convertit un jeu d'opérations de migration en code SQL propre au fournisseur de base de données. </summary>
      <returns>Liste d'instructions SQL à exécuter pour effectuer les opérations de migration.</returns>
      <param name="migrationOperations">Opérations à convertir.</param>
      <param name="providerManifestToken">Jeton représentant la version de la base de données ciblée.</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.Sql.MigrationStatement">
      <summary>Représente une opération de migration qui a été convertie en instruction SQL.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.MigrationStatement.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Migrations.Sql.MigrationStatement" />.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Sql.MigrationStatement.Sql">
      <summary>     Obtient ou définit le code SQL à exécuter pour effectuer cette opération de migration. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Sql.MigrationStatement.SuppressTransaction">
      <summary>     Obtient ou définit une valeur indiquant si cette instruction doit être exécutée en-dehors de l'étendue de transaction utilisée pour rendre le processus de migration transactionnel.     Si cette option a la valeur true, cette opération n'est pas annulée en cas d'échec du processus de migration. </summary>
      <returns>true si l'opération n'est pas annulée en cas d'échec du processus de migration ;sinon, false.</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Sql.SqlCeMigrationSqlGenerator">
      <summary>Représente un fournisseur pour convertir des opérations de migration indépendantes du fournisseur en commandes SQL pouvant être exécutées dans Microsoft SQL Server Compact Edition.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlCeMigrationSqlGenerator.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Migrations.Sql.SqlCeMigrationSqlGenerator" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlCeMigrationSqlGenerator.CreateConnection">
      <summary>Crée une connexion vide pour le fournisseur actuel. Permet aux fournisseurs dérivés d'utiliser une autre connexion que <see cref="T:System.Data.SqlClient.SqlConnection" />.</summary>
      <returns>Connexion vide pour le fournisseur actuel.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlCeMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.AlterColumnOperation)">
      <summary>Génère le code SQL pour une opération <see cref="T:System.Data.Entity.Migrations.Model.AlterColumnOperation" />.     Le code SQL généré doit être ajouté à l'aide de la méthode Statement.</summary>
      <param name="alterColumnOperation">Opération pour laquelle le code SQL doit être produit.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlCeMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.DropColumnOperation)">
      <summary>Génère le code SQL pour une opération <see cref="T:System.Data.Entity.Migrations.Model.DropColumnOperation" />.     Le code SQL généré doit être ajouté à l'aide de la méthode Statement.</summary>
      <param name="dropColumnOperation">Opération pour laquelle le code SQL doit être produit.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlCeMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.DropIndexOperation)">
      <summary>Génère le code SQL pour une opération <see cref="T:System.Data.Entity.Migrations.Model.DropIndexOperation" />.     Le code SQL généré doit être ajouté à l'aide de la méthode Statement.</summary>
      <param name="dropIndexOperation">Opération pour laquelle le code SQL doit être produit.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlCeMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.MoveTableOperation)">
      <summary>Génère le code SQL pour une opération <see cref="T:System.Data.Entity.Migrations.Model.MoveTableOperation" />.     Le code SQL généré doit être ajouté à l'aide de la méthode Statement.</summary>
      <param name="moveTableOperation">Opération pour laquelle le code SQL doit être produit.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlCeMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.RenameColumnOperation)">
      <summary>Génère le code SQL pour une opération <see cref="T:System.Data.Entity.Migrations.Model.RenameColumnOperation" />.     Le code SQL généré doit être ajouté à l'aide de la méthode Statement.</summary>
      <param name="renameColumnOperation">Opération pour laquelle le code SQL doit être produit.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlCeMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.RenameTableOperation)">
      <summary>Génère le code SQL pour une opération <see cref="T:System.Data.Entity.Migrations.Model.RenameTableOperation" />.     Le code SQL généré doit être ajouté à l'aide de la méthode Statement.</summary>
      <param name="renameTableOperation">Opération pour laquelle le code SQL doit être produit.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlCeMigrationSqlGenerator.Generate(System.DateTime)">
      <summary>Génère le code SQL permettant de spécifier la valeur DateTime constante par défaut définie sur une colonne.     Cette méthode génère uniquement la valeur réelle, non le code SQL permettant de définir la valeur par défaut.</summary>
      <returns>Code SQL représentant la valeur par défaut.</returns>
      <param name="defaultValue">Valeur à définir.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlCeMigrationSqlGenerator.GenerateCreateSchema(System.String)">
      <summary>Génère le code SQL permettant de créer un schéma de base de données. Le code SQL généré doit être ajouté à l'aide de la méthode Statement.</summary>
      <param name="schema">Schéma de base de données à créer.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlCeMigrationSqlGenerator.GenerateMakeSystemTable(System.Data.Entity.Migrations.Model.CreateTableOperation)">
      <summary>Génère le code SQL permettant de marquer une table comme une table système. Le code SQL généré doit être ajouté à l'aide de la méthode Statement.</summary>
      <param name="createTableOperation">Opération pour laquelle le code SQL doit être produit.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlCeMigrationSqlGenerator.Name(System.String)">
      <summary>Génère un nom entre guillemets. Le nom fourni peut contenir ou non le schéma.</summary>
      <returns>Nom entre guillemets.</returns>
      <param name="name">Nom à mettre entre guillemets.</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator">
      <summary>Représente un fournisseur pour convertir des opérations de migration indépendantes du fournisseur en commandes SQL pouvant être exécutées dans Microsoft SQL.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.BuildColumnType(System.Data.Entity.Migrations.Model.ColumnModel)">
      <summary>Génère le code SQL pour spécifier le type de données d'une colonne. Cette méthode génère uniquement le type réel, non le code SQL permettant de créer la colonne. </summary>
      <returns>Code SQL représentant le type de données.</returns>
      <param name="column">Colonne dans laquelle le code SQL est généré.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.CreateConnection">
      <summary>Crée une connexion vide pour le fournisseur actuel. Permet aux fournisseurs dérivés d'utiliser une autre connexion que <see cref="T:System.Data.SqlClient.SqlConnection" />.</summary>
      <returns>Connexion vide pour le fournisseur actuel.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Boolean)">
      <summary>Génère le code SQL permettant de spécifier une valeur booléenne constante par défaut définie sur une colonne. Cette méthode génère uniquement la valeur réelle, non le code SQL permettant de définir la valeur par défaut.</summary>
      <returns>Code SQL représentant la valeur par défaut.</returns>
      <param name="defaultValue">Valeur à définir.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Byte[])">
      <summary>Génère le code SQL permettant de spécifier une valeur d'octet constante par défaut définie sur une colonne. Cette méthode génère uniquement la valeur réelle, non le code SQL permettant de définir la valeur par défaut. </summary>
      <returns>Code SQL représentant la valeur par défaut.</returns>
      <param name="defaultValue">Valeur à définir.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Collections.Generic.IEnumerable{System.Data.Entity.Migrations.Model.MigrationOperation},System.String)">
      <summary>Convertit un jeu d'opérations de migration en code SQL propre à Microsoft SQL Server. </summary>
      <returns>Liste d'instructions SQL à exécuter pour effectuer les opérations de migration.</returns>
      <param name="migrationOperations">Opérations à convertir.</param>
      <param name="providerManifestToken">Jeton représentant la version de SQL Server ciblée (par exemple, 2005, 2008).</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.AddColumnOperation)">
      <summary>Génère le code SQL pour une opération <see cref="T:System.Data.Entity.Migrations.Model.AddColumnOperation" />.     Le code SQL généré doit être ajouté à l'aide de la méthode Statement. </summary>
      <param name="addColumnOperation">Opération pour laquelle le code SQL doit être produit.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.AddForeignKeyOperation)">
      <summary>Génère le code SQL pour une opération <see cref="T:System.Data.Entity.Migrations.Model.AddForeignKeyOperation" />.     Le code SQL généré doit être ajouté à l'aide de la méthode Statement. </summary>
      <param name="addForeignKeyOperation">Opération pour laquelle le code SQL doit être produit.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation)">
      <summary>Génère le code SQL pour une opération <see cref="T:System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation" />.     Le code SQL généré doit être ajouté à l'aide de la méthode Statement. </summary>
      <param name="addPrimaryKeyOperation">Opération pour laquelle le code SQL doit être produit.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.AlterColumnOperation)">
      <summary>Génère le code SQL pour une opération <see cref="T:System.Data.Entity.Migrations.Model.AlterColumnOperation" />.     Le code SQL généré doit être ajouté à l'aide de la méthode Statement. </summary>
      <param name="alterColumnOperation">Opération pour laquelle le code SQL doit être produit.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.CreateIndexOperation)">
      <summary>Génère le code SQL pour une opération <see cref="T:System.Data.Entity.Migrations.Model.CreateIndexOperation" />.     Le code SQL généré doit être ajouté à l'aide de la méthode Statement. </summary>
      <param name="createIndexOperation">Opération pour laquelle le code SQL doit être produit.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.CreateTableOperation)">
      <summary>Génère le code SQL pour une opération <see cref="T:System.Data.Entity.Migrations.Model.CreateTableOperation" />.     Le code SQL généré doit être ajouté à l'aide de la méthode Statement. </summary>
      <param name="createTableOperation">Opération pour laquelle le code SQL doit être produit.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.DeleteHistoryOperation)">
      <summary>Génère le code SQL pour une opération <see cref="T:System.Data.Entity.Migrations.Model.DeleteHistoryOperation" />.     Le code SQL généré doit être ajouté à l'aide de la méthode Statement. </summary>
      <param name="deleteHistoryOperation">Opération pour laquelle le code SQL doit être produit.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.DropColumnOperation)">
      <summary>Génère le code SQL pour une opération <see cref="T:System.Data.Entity.Migrations.Model.DropColumnOperation" />.     Le code SQL généré doit être ajouté à l'aide de la méthode Statement. </summary>
      <param name="dropColumnOperation">Opération pour laquelle le code SQL doit être produit.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.DropForeignKeyOperation)">
      <summary>Génère le code SQL pour une opération <see cref="T:System.Data.Entity.Migrations.Model.DropForeignKeyOperation" />.     Le code SQL généré doit être ajouté à l'aide de la méthode Statement. </summary>
      <param name="dropForeignKeyOperation">Opération pour laquelle le code SQL doit être produit.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.DropIndexOperation)">
      <summary>Génère le code SQL pour une opération <see cref="T:System.Data.Entity.Migrations.Model.DropIndexOperation" />.     Le code SQL généré doit être ajouté à l'aide de la méthode Statement. </summary>
      <param name="dropIndexOperation">Opération pour laquelle le code SQL doit être produit.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.DropPrimaryKeyOperation)">
      <summary>Génère le code SQL pour une opération <see cref="T:System.Data.Entity.Migrations.Model.DropPrimaryKeyOperation" />.     Le code SQL généré doit être ajouté à l'aide de la méthode Statement. </summary>
      <param name="dropPrimaryKeyOperation">Opération pour laquelle le code SQL doit être produit.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.DropTableOperation)">
      <summary>Génère le code SQL pour une opération <see cref="T:System.Data.Entity.Migrations.Model.DropTableOperation" />.     Le code SQL généré doit être ajouté à l'aide de la méthode Statement. </summary>
      <param name="dropTableOperation">Opération pour laquelle le code SQL doit être produit.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.InsertHistoryOperation)">
      <summary>Génère le code SQL pour une opération <see cref="T:System.Data.Entity.Migrations.Model.InsertHistoryOperation" />.     Le code SQL généré doit être ajouté à l'aide de la méthode Statement. </summary>
      <param name="insertHistoryOperation">Opération pour laquelle le code SQL doit être produit.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.MoveTableOperation)">
      <summary>Génère le code SQL pour une opération <see cref="T:System.Data.Entity.Migrations.Model.MoveTableOperation" />.     Le code SQL généré doit être ajouté à l'aide de la méthode Statement. </summary>
      <param name="moveTableOperation">Opération pour laquelle le code SQL doit être produit.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.RenameColumnOperation)">
      <summary>Génère le code SQL pour une opération <see cref="T:System.Data.Entity.Migrations.Model.RenameColumnOperation" />.     Le code SQL généré doit être ajouté à l'aide de la méthode Statement. </summary>
      <param name="renameColumnOperation">Opération pour laquelle le code SQL doit être produit.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.RenameTableOperation)">
      <summary>Génère le code SQL pour une opération <see cref="T:System.Data.Entity.Migrations.Model.RenameTableOperation" />.     Le code SQL généré doit être ajouté à l'aide de la méthode Statement. </summary>
      <param name="renameTableOperation">Opération pour laquelle le code SQL doit être produit.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.SqlOperation)">
      <summary>Génère le code SQL pour une opération <see cref="T:System.Data.Entity.Migrations.Model.SqlOperation" />.     Le code SQL généré doit être ajouté à l'aide de la méthode Statement. </summary>
      <param name="sqlOperation">Opération pour laquelle le code SQL doit être produit.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Data.Spatial.DbGeography)">
      <summary>Génère le code SQL permettant de spécifier la valeur de géographie constante par défaut définie sur une colonne. Cette méthode génère uniquement la valeur réelle, non le code SQL permettant de définir la valeur par défaut. </summary>
      <returns>Code SQL représentant la valeur par défaut.</returns>
      <param name="defaultValue">Valeur à définir.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Data.Spatial.DbGeometry)">
      <summary>Génère le code SQL permettant de spécifier la valeur de géométrie constante par défaut définie sur une colonne. Cette méthode génère uniquement la valeur réelle, non le code SQL permettant de définir la valeur par défaut. </summary>
      <returns>Code SQL représentant la valeur par défaut.</returns>
      <param name="defaultValue">Valeur à définir.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.DateTime)">
      <summary>Génère le code SQL permettant de spécifier la valeur DateTime constante par défaut définie sur une colonne. Cette méthode génère uniquement la valeur réelle, non le code SQL permettant de définir la valeur par défaut. </summary>
      <returns>Code SQL représentant la valeur par défaut.</returns>
      <param name="defaultValue">Valeur à définir.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.DateTimeOffset)">
      <summary>Génère le code SQL permettant de spécifier une valeur DateTimeOffset constante par défaut définie sur une colonne. Cette méthode génère uniquement la valeur réelle, non le code SQL permettant de définir la valeur par défaut. </summary>
      <returns>Code SQL représentant la valeur par défaut.</returns>
      <param name="defaultValue">Valeur à définir.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Guid)">
      <summary>Génère le code SQL permettant de spécifier une valeur Guid constante par défaut définie sur une colonne. Cette méthode génère uniquement la valeur réelle, non le code SQL permettant de définir la valeur par défaut. </summary>
      <returns>Code SQL représentant la valeur par défaut.</returns>
      <param name="defaultValue">Valeur à définir.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.Object)">
      <summary>Génère le code SQL permettant de spécifier une valeur constante par défaut définie sur une colonne.     Cette méthode génère uniquement la valeur réelle, non le code SQL permettant de définir la valeur par défaut. </summary>
      <returns>Code SQL représentant la valeur par défaut.</returns>
      <param name="defaultValue">Valeur à définir.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.String)">
      <summary>Génère le code SQL permettant de spécifier la valeur de type chaîne constante par défaut définie sur une colonne. Cette méthode génère uniquement la valeur réelle, non le code SQL permettant de définir la valeur par défaut. </summary>
      <returns>Code SQL représentant la valeur par défaut.</returns>
      <param name="defaultValue">Valeur à définir.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Generate(System.TimeSpan)">
      <summary>Génère le code SQL permettant de spécifier la valeur TimeSpan constante par défaut définie sur une colonne. Cette méthode génère uniquement la valeur réelle, non le code SQL permettant de définir la valeur par défaut. </summary>
      <returns>Code SQL représentant la valeur par défaut.</returns>
      <param name="defaultValue">Valeur à définir.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.GenerateCreateSchema(System.String)">
      <summary>Génère le code SQL permettant de créer un schéma de base de données. Le code SQL généré doit être ajouté à l'aide de la méthode Statement. </summary>
      <param name="schema">Schéma de base de données à créer.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.GenerateMakeSystemTable(System.Data.Entity.Migrations.Model.CreateTableOperation)">
      <summary>Génère le code SQL permettant de marquer une table comme une table système. Le code SQL généré doit être ajouté à l'aide de la méthode Statement. </summary>
      <param name="createTableOperation">Table à marquer comme table système.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Name(System.String)">
      <summary>Génère un nom entre guillemets. Le nom fourni peut contenir ou non le schéma. </summary>
      <returns>Nom entre guillemets généré.</returns>
      <param name="name">Nom à mettre entre guillemets.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Quote(System.String)">
      <summary>Met entre guillemets un identificateur pour SQL Server. </summary>
      <returns>Identificateur entre guillemets pour SQL Server.</returns>
      <param name="identifier">Identificateur à mettre entre guillemets.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Statement(System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Ajoute une instruction à exécuter sur la base de données. </summary>
      <param name="writer">Writer contenant le code SQL à exécuter.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Statement(System.String,System.Boolean)">
      <summary>Ajoute une instruction à exécuter sur la base de données. </summary>
      <param name="sql">Instruction à exécuter.</param>
      <param name="suppressTransaction">Valeur indiquant si cette instruction doit être exécutée hors de l'étendue de la transaction utilisée pour rendre le processus de migration transactionnel. Si cette option a la valeur true, cette opération n'est pas annulée en cas d'échec du processus de migration.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.SqlServerMigrationSqlGenerator.Writer">
      <summary>Obtient un nouveau <see cref="T:System.Data.Entity.Migrations.Utilities.IndentedTextWriter" /> susceptible d'être utilisé pour créer du code SQL. Il s'agit simplement d'une méthode d'assistance permettant de créer un writer. L'écriture dans le writer n'entraîne pas l'enregistrement du SQL en vue de son exécution. Vous devez transmettre le code SQL généré à la méthode Statement. </summary>
      <returns>Writer de texte vide à utiliser pour la génération du code SQL.</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Utilities.IndentedTextWriter">
      <summary>  La même instance que T:System.CodeDom.Compiler.IndentedTextWriter mais qui fonctionne en situation de confiance partielle.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.#ctor(System.IO.TextWriter)">
      <summary>     Initialise une nouvelle instance de la classe IndentedTextWriter avec le writer de texte spécifié et la chaîne de tabulation par défaut. </summary>
      <param name="writer">
        <see cref="T:System.IO.TextWriter" /> à utiliser pour la sortie. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.#ctor(System.IO.TextWriter,System.String)">
      <summary>     Initialise une nouvelle instance de la classe IndentedTextWriter avec le writer de texte spécifié et la chaîne de tabulation. </summary>
      <param name="writer">
        <see cref="T:System.IO.TextWriter" /> à utiliser pour la sortie. </param>
      <param name="tabString">Chaîne de tabulation à utiliser pour la mise en retrait. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Close">
      <summary>     Ferme le document en cours d'écriture. </summary>
    </member>
    <member name="F:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.DefaultTabString">
      <summary>     Spécifie la chaîne de tabulation par défaut. Ce champ est constant. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Encoding">
      <summary>     Obtient l'encodage pour le writer de texte à utiliser. </summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Flush">
      <summary>     Vide le flux. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Indent">
      <summary>     Obtient ou définit le nombre d'espaces à mettre en retrait. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.InnerWriter">
      <summary>     Obtient le <see cref="T:System.IO.TextWriter" /> à utiliser. </summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.NewLine">
      <summary>     Obtient ou définit le caractère de nouvelle ligne à utiliser. </summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.OutputTabs">
      <summary>     Génère une chaîne de tabulation pour chaque niveau de mise en retrait défini par la propriété <see cref="P:System.CodeDom.Compiler.IndentedTextWriter.Indent" />. </summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.Boolean)">
      <summary>     Écrit dans le flux de texte la représentation textuelle d'une valeur booléenne. </summary>
      <param name="value">Valeur booléenne à écrire. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.Char)">
      <summary>     Écrit un caractère dans le flux de texte. </summary>
      <param name="value">Caractère à écrire. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.Char[])">
      <summary>     Écrit un tableau de caractères dans le flux de texte. </summary>
      <param name="buffer">Tableau de caractères à écrire. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.Char[],System.Int32,System.Int32)">
      <summary>     Écrit un sous-tableau de caractères dans le flux de texte. </summary>
      <param name="buffer">Tableau de caractères à partir duquel les données doivent être écrites. </param>
      <param name="index">Index de début dans la mémoire tampon. </param>
      <param name="count">Nombre de caractères à écrire. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.Double)">
      <summary>     Écrit dans le flux de texte la représentation textuelle d'une valeur de type Double. </summary>
      <param name="value">Valeur double à écrire. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.Int32)">
      <summary>     Écrit dans le flux de texte la représentation textuelle d'un nombre entier. </summary>
      <param name="value">Entier à écrire. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.Int64)">
      <summary>     Écrit dans le flux de texte la représentation textuelle d'un nombre entier 8 octets. </summary>
      <param name="value">Entier 8 octets à écrire. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.Object)">
      <summary>     Écrit dans le flux de texte la représentation textuelle d'un objet. </summary>
      <param name="value">Objet à écrire. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.Single)">
      <summary>     Écrit dans le flux de texte la représentation textuelle d'une valeur de type Single. </summary>
      <param name="value">Valeur de type Single à écrire. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.String)">
      <summary>     Écrit la chaîne spécifiée dans le flux de texte. </summary>
      <param name="s">Chaîne à écrire. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.String,System.Object)">
      <summary>     Écrit une chaîne mise en forme, en utilisant la sémantique spécifiée. </summary>
      <param name="format">Chaîne de mise en forme. </param>
      <param name="arg0">Objet à écrire dans la chaîne mise en forme. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.String,System.Object,System.Object)">
      <summary>     Écrit une chaîne mise en forme, en utilisant la sémantique spécifiée. </summary>
      <param name="format">Chaîne de mise en forme à utiliser. </param>
      <param name="arg0">Premier objet à écrire dans la chaîne mise en forme. </param>
      <param name="arg1">Deuxième objet à écrire dans la chaîne mise en forme. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.String,System.Object[])">
      <summary>     Écrit une chaîne mise en forme, en utilisant la sémantique spécifiée. </summary>
      <param name="format">Chaîne de mise en forme à utiliser. </param>
      <param name="arg">Tableau d'arguments à utiliser en sortie. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine">
      <summary>     Écrit une marque de fin de ligne. </summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.Boolean)">
      <summary>     Écrit dans le flux de texte la représentation textuelle d'une valeur booléenne, suivie d'une marque de fin de ligne. </summary>
      <param name="value">Valeur booléenne à écrire. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.Char)">
      <summary>     Écrit un caractère, suivi d'une marque de fin de ligne, dans le flux de texte. </summary>
      <param name="value">Caractère à écrire. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.Char[])">
      <summary>     Écrit un tableau de caractères, suivi d'une marque de fin de ligne, dans le flux de texte. </summary>
      <param name="buffer">Tableau de caractères à écrire. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.Char[],System.Int32,System.Int32)">
      <summary>     Écrit un sous-tableau de caractères, suivi d'un terminateur de ligne, dans le flux de texte. </summary>
      <param name="buffer">Tableau de caractères à partir duquel les données doivent être écrites. </param>
      <param name="index">Index de début dans la mémoire tampon. </param>
      <param name="count">Nombre de caractères à écrire. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.Double)">
      <summary>     Écrit dans le flux de texte la représentation textuelle d'une valeur double, suivie d'une marque de fin de ligne. </summary>
      <param name="value">Valeur double à écrire. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.Int32)">
      <summary>     Écrit dans le flux de texte la représentation textuelle d'un entier, suivie d'une marque de fin de ligne. </summary>
      <param name="value">Entier à écrire. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.Int64)">
      <summary>     Écrit dans le flux de texte la représentation textuelle d'un entier 8 octets, suivie d'une marque de fin de ligne. </summary>
      <param name="value">Entier 8 octets à écrire. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.Object)">
      <summary>     Écrit dans le flux de texte la représentation textuelle d'un objet, suivie d'une marque de fin de ligne. </summary>
      <param name="value">Objet à écrire. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.Single)">
      <summary>     Écrit dans le flux de texte la représentation textuelle d'une valeur de type Single, suivie d'une marque de fin de ligne. </summary>
      <param name="value">Valeur de type Single à écrire. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.String)">
      <summary>     Écrit la chaîne spécifiée, suivie d'une marque de fin de ligne, dans le flux de texte. </summary>
      <param name="s">Chaîne à écrire. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.String,System.Object)">
      <summary>     Écrit une chaîne mise en forme, suivie d'une marque de fin de ligne, avec les sémantiques spécifiées. </summary>
      <param name="format">Chaîne de mise en forme. </param>
      <param name="arg0">Objet à écrire dans la chaîne mise en forme. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.String,System.Object,System.Object)">
      <summary>     Écrit une chaîne mise en forme, suivie d'une marque de fin de ligne, avec les sémantiques spécifiées. </summary>
      <param name="format">Chaîne de mise en forme à utiliser. </param>
      <param name="arg0">Premier objet à écrire dans la chaîne mise en forme. </param>
      <param name="arg1">Deuxième objet à écrire dans la chaîne mise en forme. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.String,System.Object[])">
      <summary>     Écrit une chaîne mise en forme, suivie d'une marque de fin de ligne, avec les sémantiques spécifiées. </summary>
      <param name="format">Chaîne de mise en forme à utiliser. </param>
      <param name="arg">Tableau d'arguments à utiliser en sortie. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.UInt32)">
      <summary>     Écrit dans le flux de texte la représentation textuelle d'une valeur de type UInt32, suivie d'une marque de fin de ligne. </summary>
      <param name="value">Valeur UInt32 à utiliser en sortie. </param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLineNoTabs(System.String)">
      <summary>     Écrit la chaîne spécifiée dans une ligne sans tabulation. </summary>
      <param name="s">Chaîne à écrire. </param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.ComplexTypeConfiguration`1">
      <summary> Autorise l'exécution de la configuration pour un type complexe dans un modèle.  Un <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.Types.ComplexTypeConfiguration" /> peut être obtenu à l'aide de la méthode <see cref="M:System.Data.Entity.DbModelBuilder.ComplexType``1" /> ou un type personnalisé dérivé de <see cref="T:System.Data.Entity.ModelConfiguration.ComplexTypeConfiguration`1" /> peut être enregistré en utilisant la propriété <see cref="P:System.Data.Entity.DbModelBuilder.Configurations" />. </summary>
      <typeparam name="TComplexType">Type complexe à configurer.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.ComplexTypeConfiguration`1.#ctor">
      <summary> Initialise une nouvelle instance de <see cref="T:System.Data.Entity.ModelConfiguration.ComplexTypeConfiguration`1" />.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.ComplexTypeConfiguration`1.Equals(System.Object)">
      <summary>Détermine si l'objet spécifié est identique à l'objet actuel. Cette méthode n'apparaît pas dans IntelliSense.</summary>
      <returns>true si les objets sont identiques ; sinon, false.</returns>
      <param name="obj">Objet.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.ComplexTypeConfiguration`1.GetHashCode">
      <summary>Sert de fonction de hachage pour un type particulier. Cette méthode n'apparaît pas dans IntelliSense.</summary>
      <returns>Code de hachage pour le type actuel.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.ComplexTypeConfiguration`1.GetType">
      <summary>Obtient le type de l'instance actuelle. Cette méthode n'apparaît pas dans IntelliSense.</summary>
      <returns>Type exact de l'instance actuelle au moment de l'exécution.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.ComplexTypeConfiguration`1.ToString">
      <summary>Retourne une chaîne qui représente l'objet actuel. Cette méthode n'apparaît pas dans IntelliSense.</summary>
      <returns>Chaîne qui représente l'objet actuel.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1">
      <summary>Autorise l'exécution de la configuration pour un type d'entité dans un modèle.  Un <see cref="T:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1" /> peut être obtenu à l'aide de la méthode Entity sur <see cref="T:System.Data.Entity.DbModelBuilder" /> ou un type personnalisé dérivé de <see cref="T:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1" /> peut être enregistré à l'aide de la propriété Configurations sur <see cref="T:System.Data.Entity.DbModelBuilder" />. </summary>
      <typeparam name="TEntityType">Représente le type d'entité.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.#ctor">
      <summary>Initialise une nouvelle instance de <see cref="T:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1" />.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.Equals(System.Object)">
      <summary>Détermine si l'objet spécifié est identique à l'objet actuel. Cette méthode n'apparaît pas dans IntelliSense.</summary>
      <returns>true si les objets sont identiques ; sinon, false.</returns>
      <param name="obj">Objet.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.GetHashCode">
      <summary>Sert de fonction de hachage pour un type particulier. Cette méthode n'apparaît pas dans IntelliSense.</summary>
      <returns>Code de hachage pour le type actuel.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.GetType">
      <summary>Obtient le type de l'instance actuelle. Cette méthode n'apparaît pas dans IntelliSense.</summary>
      <returns>Type exact de l'instance actuelle au moment de l'exécution.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.HasEntitySetName(System.String)">
      <summary> Configure le nom du jeu d'entités à utiliser pour ce type d'entité. Le nom du jeu d'entités peut uniquement être configuré pour le type de base dans chaque jeu. </summary>
      <returns>Même instance <see cref="T:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1" /> qui permet de chaîner plusieurs appels.</returns>
      <param name="entitySetName">Nom du jeu d'entités.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.HasKey``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary> Configure les propriétés de clé primaire pour ce type d'entité. </summary>
      <returns>Même instance <see cref="T:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1" /> qui permet de chaîner plusieurs appels.</returns>
      <param name="keyExpression"> Expression lambda représentant la propriété à utiliser comme clé primaire.  Par exemple, t =&gt; t.Id     en C# et Function(t) t.Id en Visual Basic .Net.  Si la clé primaire est composée de plusieurs propriétés, indiquez un type anonyme incluant les propriétés.  Par exemple, t =&gt; new { t.Id1, t.Id2 } en C# et Function(t) New From { t.Id1, t.Id2 } en Visual Basic .Net.</param>
      <typeparam name="TKey">Type de la clé.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.HasMany``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.ICollection{``0}}})">
      <summary> Configure une relation de type plusieurs à partir de ce type d'entité. </summary>
      <returns>Objet de configuration qui peut être utilisé pour configurer davantage la relation.</returns>
      <param name="navigationPropertyExpression"> Expression lambda représentant la propriété de navigation de la relation. Par exemple, t =&gt; t.MyProperty en C# et Function(t) t.MyProperty en Visual Basic .Net.</param>
      <typeparam name="TTargetEntity">Type de l'entité à l'autre terminaison de la relation.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.HasOptional``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary> Configure une relation facultative à partir de ce type d'entité. Les instances du type d'entité peuvent être enregistrées dans la base de données sans que cette relation ne soit spécifiée. La clé étrangère de la base de données autorise la valeur Null. </summary>
      <returns>Objet de configuration qui peut être utilisé pour configurer davantage la relation.</returns>
      <param name="navigationPropertyExpression"> Expression lambda représentant la propriété de navigation de la relation. Par exemple, t =&gt; t.MyProperty en C# et Function(t) t.MyProperty en Visual Basic .Net.</param>
      <typeparam name="TTargetEntity">Type de l'entité à l'autre terminaison de la relation.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.HasRequired``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary> Configure une relation obligatoire à partir de ce type d'entité. Les instances du type d'entité ne peuvent pas être enregistrées dans la base de données à moins que cette relation ne soit spécifiée. La clé étrangère de la base de données n'autorise pas la valeur Null. </summary>
      <returns>Objet de configuration qui peut être utilisé pour configurer davantage la relation.</returns>
      <param name="navigationPropertyExpression"> Expression lambda représentant la propriété de navigation de la relation. Par exemple, t =&gt; t.MyProperty en C# et Function(t) t.MyProperty en Visual Basic .Net. </param>
      <typeparam name="TTargetEntity">Type de l'entité à l'autre terminaison de la relation.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.Map``1(System.Action{System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration{``0}})">
      <summary> Autorise la configuration avancée liée à la manière dont un type d'entité dérivé est mappé au schéma de base de données. Les appels à cette méthode sont cumulés et les appels suivants ne remplacent pas la configuration déjà exécutée par les appels précédents à cette méthode. </summary>
      <returns>Même instance <see cref="T:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1" /> qui permet de chaîner plusieurs appels.</returns>
      <param name="derivedTypeMapConfigurationAction">Action qui exécute une configuration selon un <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1" />.</param>
      <typeparam name="TDerived">Type d'entité dérivé à configurer.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.Map(System.Action{System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration{`0}})">
      <summary> Autorise la configuration avancée liée à la manière dont ce type d'entité est mappé au schéma de base de données. Par défaut, toutes les configurations s'appliquent aussi à tous les types dérivés de ce type d'entité.  Les types dérivés peuvent être configurés à l'aide de la surcharge spécifique de cette méthode qui permet de configurer un type dérivé ou en utilisant un <see cref="T:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1" /> pour le type dérivé.  Les propriétés d'une entité peuvent être fractionnées entre plusieurs tables en utilisant plusieurs appels à cette méthode.  Les appels sont cumulés et les appels suivants ne remplacent pas la configuration déjà exécutée par les appels précédents à cette méthode. </summary>
      <returns>Même instance <see cref="T:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1" /> qui permet de chaîner plusieurs appels.</returns>
      <param name="entityMappingConfigurationAction">Action qui exécute une configuration selon un <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1" />.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.ToString">
      <summary>Retourne une chaîne qui représente l'objet actuel. Cette méthode n'apparaît pas dans IntelliSense.</summary>
      <returns>Chaîne qui représente l'objet actuel.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.ToTable(System.String)">
      <summary>Configure le nom de la table auquel ce type d'entité est mappé. </summary>
      <param name="tableName">Nom de la table.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.ToTable(System.String,System.String)">
      <summary> Configure le nom de la table auquel ce type d'entité est mappé. </summary>
      <param name="tableName">Nom de la table.</param>
      <param name="schemaName">Schéma de base de données de la table.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.ModelValidationException">
      <summary> Exception levée par <see cref="T:System.Data.Entity.DbModelBuilder" /> lors de la création du modèle lorsqu'un modèle non valide est généré. </summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.ModelValidationException.#ctor">
      <summary> Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.ModelConfiguration.ModelValidationException" />.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.ModelValidationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.ModelConfiguration.ModelValidationException" />.</summary>
      <param name="info">Informations de sérialisation.</param>
      <param name="context">Contexte.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.ModelValidationException.#ctor(System.String)">
      <summary> Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.ModelConfiguration.ModelValidationException" />. </summary>
      <param name="message">Message d'exception.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.ModelValidationException.#ctor(System.String,System.Exception)">
      <summary> Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.ModelConfiguration.ModelValidationException" />. </summary>
      <param name="message">Message d'exception.</param>
      <param name="innerException">Exception interne.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.AssociationMappingConfiguration">
      <summary> Classe de base pour l'exécution de la configuration d'une relation. Cette fonctionnalité de configuration est exposée par l'API Fluent Code First, voir <see cref="T:System.Data.Entity.DbModelBuilder" />. </summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.AssociationMappingConfiguration.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.AssociationMappingConfiguration" />.</summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration">
      <summary> Permet de configurer une propriété <see cref="T:System.byte[]" /> d'un type d'entité ou d'un type complexe. Cette fonctionnalité de configuration est exposée par l'API Fluent Code First, voir <see cref="T:System.Data.Entity.DbModelBuilder" />. </summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.Equals(System.Object)">
      <summary>Détermine si l'objet spécifié est identique à l'objet actuel. Cette méthode n'apparaît pas dans IntelliSense.</summary>
      <returns>true si les objets sont identiques ; sinon, false.</returns>
      <param name="obj">Objet.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.GetHashCode">
      <summary>Sert de fonction de hachage pour un type particulier. Cette méthode n'apparaît pas dans IntelliSense.</summary>
      <returns>Code de hachage pour le type actuel.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.GetType">
      <summary>Obtient le type de l'instance actuelle. Cette méthode n'apparaît pas dans IntelliSense.</summary>
      <returns>Type exact de l'instance actuelle au moment de l'exécution.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.HasColumnName(System.String)">
      <summary> Configure le nom de la colonne de base de données utilisée pour stocker la propriété. </summary>
      <returns>Même instance <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration" /> qui permet de chaîner plusieurs appels.</returns>
      <param name="columnName">Nom de la colonne.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.HasColumnOrder(System.Nullable{System.Int32})">
      <summary> Configure l'ordre de la colonne de base de données utilisée pour stocker la propriété. Cette méthode est également utilisée pour indiquer l'ordre des clés lorsqu'un type d'entité possède une clé composite. </summary>
      <returns>Même instance <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration" /> qui permet de chaîner plusieurs appels.</returns>
      <param name="columnOrder">Ordre dans lequel cette colonne doit apparaître dans la table de base de données.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.HasColumnType(System.String)">
      <summary> Configure le type de données de la colonne de base de données utilisée pour stocker la propriété. </summary>
      <returns>Même instance <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration" /> qui permet de chaîner plusieurs appels.</returns>
      <param name="columnType">Nom du type de données spécifique du fournisseur de base de données.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.HasDatabaseGeneratedOption(System.Nullable{System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption})">
      <summary>     Configure la manière dont les valeurs pour la propriété sont générées par la base de données. </summary>
      <returns>La même instance de BinaryPropertyConfiguration pour que plusieurs appels puissent être chaînés.</returns>
      <param name="databaseGeneratedOption">     Modèle utilisé pour générer des valeurs pour la propriété dans la base de données.     L'affectation de la valeur Null supprime de la propriété la facette du modèle générée par la base de données.     L'affectation de la valeur Null entraîne le même comportement au moment de l'exécution que la spécification de la valeur None. </param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.HasMaxLength(System.Nullable{System.Int32})">
      <summary> Configure la propriété pour qu'elle atteigne la longueur maximale spécifiée. </summary>
      <returns>Même instance <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration" /> qui permet de chaîner plusieurs appels.</returns>
      <param name="value"> Longueur maximale pour la propriété. L'affectation de la valeur Null supprime les restrictions sur la longueur maximale de la propriété. </param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.IsConcurrencyToken">
      <summary> Indique que la propriété doit être utilisée comme jeton d'accès concurrentiel optimiste. </summary>
      <returns>Même instance <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration" /> qui permet de chaîner plusieurs appels.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.IsConcurrencyToken(System.Nullable{System.Boolean})">
      <summary> Indique si la propriété doit être utilisée comme jeton d'accès concurrentiel optimiste. </summary>
      <returns>Même instance <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration" /> qui permet de chaîner plusieurs appels.</returns>
      <param name="concurrencyToken"> Valeur indiquant si la propriété est un jeton d'accès concurrentiel ou non. L'affectation de la valeur Null supprime la facette du jeton d'accès concurrentiel de la propriété. L'affectation de la valeur Null entraîne le même comportement au moment de l'exécution que la spécification de la valeur false. </param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.IsFixedLength">
      <summary> Configure la propriété pour qu'elle soit de longueur fixe. Utilisez la valeur HasMaxLength pour définir la longueur de la propriété. </summary>
      <returns>Même instance <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration" /> qui permet de chaîner plusieurs appels.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.IsMaxLength">
      <summary> Configure la propriété pour qu'elle autorise la longueur maximale prise en charge par le fournisseur de base de données. </summary>
      <returns>Même instance <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration" /> qui permet de chaîner plusieurs appels.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.IsOptional">
      <summary> Configure la propriété pour qu'elle soit de type facultatif. La colonne de base de données utilisée pour stocker cette propriété autorise la valeur Null. Par défaut, les propriétés <see cref="T:System.byte[]" /> sont facultatives. </summary>
      <returns>Même instance <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration" /> qui permet de chaîner plusieurs appels.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.IsRequired">
      <summary> Configure la propriété pour qu'elle soit de type obligatoire. La colonne de base de données utilisée pour stocker cette propriété n'autorise pas la valeur Null. </summary>
      <returns>Même instance <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration" /> qui permet de chaîner plusieurs appels.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.IsRowVersion">
      <summary> Configure la propriété pour qu'elle soit une version de ligne dans la base de données. Le type de données réel varie en fonction du fournisseur de base de données utilisé. La configuration de la propriété en version de ligne la configure automatiquement comme jeton d'accès concurrentiel optimiste. </summary>
      <returns>Même instance <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration" /> qui permet de chaîner plusieurs appels.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.IsVariableLength">
      <summary> Configure la propriété pour qu'elle soit de longueur variable. Par défaut, les propriétés <see cref="T:System.byte[]" /> sont de longueur variable. </summary>
      <returns>Même instance <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration" /> qui permet de chaîner plusieurs appels.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.ToString">
      <summary>Retourne une chaîne qui représente l'objet actuel. Cette méthode n'apparaît pas dans IntelliSense.</summary>
      <returns>Chaîne qui représente l'objet actuel.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.CascadableNavigationPropertyConfiguration">
      <summary> Configure une relation qui peut prendre en charge une fonctionnalité de suppression en cascade. </summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.CascadableNavigationPropertyConfiguration.Equals(System.Object)">
      <summary>Détermine si l'objet spécifié est identique à l'objet actuel. Cette méthode n'apparaît pas dans IntelliSense.</summary>
      <returns>true si les objets sont identiques ; sinon, false.</returns>
      <param name="obj">Objet.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.CascadableNavigationPropertyConfiguration.GetHashCode">
      <summary>Sert de fonction de hachage pour un type particulier. Cette méthode n'apparaît pas dans IntelliSense.</summary>
      <returns>Code de hachage pour le type actuel.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.CascadableNavigationPropertyConfiguration.GetType">
      <summary>Obtient le type de l'instance actuelle. Cette méthode n'apparaît pas dans IntelliSense.</summary>
      <returns>Type exact de l'instance actuelle au moment de l'exécution.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.CascadableNavigationPropertyConfiguration.ToString">
      <summary>Retourne une chaîne qui représente l'objet actuel. Cette méthode n'apparaît pas dans IntelliSense.</summary>
      <returns>Chaîne qui représente l'objet actuel.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.CascadableNavigationPropertyConfiguration.WillCascadeOnDelete">
      <summary> Active la suppression en cascade pour la relation. </summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.CascadableNavigationPropertyConfiguration.WillCascadeOnDelete(System.Boolean)">
      <summary> Indique si la suppression en cascade est activée ou non pour la relation. </summary>
      <param name="value">true si la suppression en cascade est activée ; sinon, false.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ConfigurationRegistrar">
      <summary> Autorise les classes de configuration dérivées pour les types des entités et complexes à enregistrer avec un <see cref="T:System.Data.Entity.DbModelBuilder" />. </summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConfigurationRegistrar.Add``1(System.Data.Entity.ModelConfiguration.ComplexTypeConfiguration{``0})">
      <summary> Ajoute un <see cref="T:System.Data.Entity.ModelConfiguration.ComplexTypeConfiguration`1" /> à <see cref="T:System.Data.Entity.DbModelBuilder" />. Un seul <see cref="T:System.Data.Entity.ModelConfiguration.ComplexTypeConfiguration`1" /> peut être ajouté pour chaque type dans un modèle. </summary>
      <returns>Même instance <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConfigurationRegistrar" /> qui permet de chaîner plusieurs appels.</returns>
      <param name="complexTypeConfiguration">Configuration du type complexe à ajouter.</param>
      <typeparam name="TComplexType">Type complexe configuré.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConfigurationRegistrar.Add``1(System.Data.Entity.ModelConfiguration.EntityTypeConfiguration{``0})">
      <summary> Ajoute un <see cref="T:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1" /> à <see cref="T:System.Data.Entity.DbModelBuilder" />. Un seul <see cref="T:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1" /> peut être ajouté pour chaque type dans un modèle. </summary>
      <returns>Même instance <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConfigurationRegistrar" /> qui permet de chaîner plusieurs appels.</returns>
      <param name="entityTypeConfiguration">Configuration du type d'entité à ajouter.</param>
      <typeparam name="TEntityType">Type d'entité configuré.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConfigurationRegistrar.Equals(System.Object)">
      <summary>Détermine si l'objet spécifié est identique à l'objet actuel. Cette méthode n'apparaît pas dans IntelliSense.</summary>
      <returns>true si les objets sont identiques ; sinon, false.</returns>
      <param name="obj">Objet.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConfigurationRegistrar.GetHashCode">
      <summary>Sert de fonction de hachage pour un type particulier. Cette méthode n'apparaît pas dans IntelliSense.</summary>
      <returns>Code de hachage pour le type actuel.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConfigurationRegistrar.GetType">
      <summary>Obtient le type de l'instance actuelle. Cette méthode n'apparaît pas dans IntelliSense.</summary>
      <returns>Type exact de l'instance actuelle au moment de l'exécution.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConfigurationRegistrar.ToString">
      <summary>Retourne une chaîne qui représente l'objet actuel. Cette méthode n'apparaît pas dans IntelliSense.</summary>
      <returns>Chaîne qui représente l'objet actuel.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionsConfiguration">
      <summary> Autorise la personnalisation des conventions utilisées par une instance <see cref="T:System.Data.Entity.DbModelBuilder" />. La suppression d'une ou plusieurs conventions par défaut est la seule opération prise en charge actuellement. Les conventions par défaut se trouvent dans l'espace de noms <see cref="N:System.Data.Entity.ModelConfiguration.Conventions" />. </summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionsConfiguration.Equals(System.Object)">
      <summary>Détermine si l'objet spécifié est identique à l'objet actuel. Cette méthode n'apparaît pas dans IntelliSense.</summary>
      <returns>true si les objets sont identiques ; sinon, false.</returns>
      <param name="obj">Objet.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionsConfiguration.GetHashCode">
      <summary>Sert de fonction de hachage pour un type particulier. Cette méthode n'apparaît pas dans IntelliSense.</summary>
      <returns>Code de hachage pour le type actuel.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionsConfiguration.GetType">
      <summary>Obtient le type de l'instance actuelle. Cette méthode n'apparaît pas dans IntelliSense.</summary>
      <returns>Type exact de l'instance actuelle au moment de l'exécution.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionsConfiguration.Remove``1">
      <summary>Désactive une convention pour le <see cref="T:System.Data.Entity.DbModelBuilder" />. Les conventions par défaut pouvant être supprimées se trouvent dans l'espace de noms <see cref="N:System.Data.Entity.ModelConfiguration.Conventions" />. </summary>
      <typeparam name="TConvention">Type de la convention à désactiver.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionsConfiguration.ToString">
      <summary>Retourne une chaîne qui représente l'objet actuel. Cette méthode n'apparaît pas dans IntelliSense.</summary>
      <returns>Chaîne qui représente l'objet actuel.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration">
      <summary> Permet de configurer une propriété <see cref="T:System.DateTime" /> d'un type d'entité ou d'un type complexe. Cette fonctionnalité de configuration est exposée par l'API Fluent Code First. Pour plus d'informations, voir <see cref="T:System.Data.Entity.DbModelBuilder" />. </summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.Equals(System.Object)">
      <summary>Détermine si l'objet spécifié est identique à l'objet actuel. Cette méthode n'apparaît pas dans IntelliSense.</summary>
      <returns>true si les objets sont identiques ; sinon, false.</returns>
      <param name="obj">Objet.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.GetHashCode">
      <summary>Sert de fonction de hachage pour un type particulier. Cette méthode n'apparaît pas dans IntelliSense.</summary>
      <returns>Code de hachage pour le type actuel.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.GetType">
      <summary>Obtient le type de l'instance actuelle. Cette méthode n'apparaît pas dans IntelliSense.</summary>
      <returns>Type exact de l'instance actuelle au moment de l'exécution.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.HasColumnName(System.String)">
      <summary> Configure le nom de la colonne de base de données utilisée pour stocker la propriété. </summary>
      <returns>Même instance <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration" /> qui permet de chaîner plusieurs appels.</returns>
      <param name="columnName">Nom de la colonne.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.HasColumnOrder(System.Nullable{System.Int32})">
      <summary> Configure l'ordre de la colonne de base de données utilisée pour stocker la propriété. Cette méthode est également utilisée pour indiquer l'ordre des clés lorsqu'un type d'entité possède une clé composite. </summary>
      <returns>Même instance <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration" /> qui permet de chaîner plusieurs appels.</returns>
      <param name="columnOrder">Ordre dans lequel cette colonne doit apparaître dans la table de base de données.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.HasColumnType(System.String)">
      <summary> Configure le type de données de la colonne de base de données utilisée pour stocker la propriété. </summary>
      <returns>Même instance <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration" /> qui permet de chaîner plusieurs appels.</returns>
      <param name="columnType">Nom du type de données spécifique du fournisseur de base de données.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.HasDatabaseGeneratedOption(System.Nullable{System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption})">
      <summary>     Configure la manière dont les valeurs pour la propriété sont générées par la base de données. </summary>
      <returns>La même instance de DateTimePropertyConfiguration pour que plusieurs appels puissent être chaînés.</returns>
      <param name="databaseGeneratedOption">     Modèle utilisé pour générer des valeurs pour la propriété dans la base de données.     L'affectation de la valeur Null supprime de la propriété la facette du modèle générée par la base de données.     L'affectation de la valeur Null entraîne le même comportement au moment de l'exécution que la spécification de la valeur None. </param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.HasPrecision(System.Byte)">
      <summary> Configure la précision de la propriété. Si le fournisseur de base de données ne prend pas en charge la précision pour le type de données de la colonne, cette valeur est ignorée. </summary>
      <returns>Même instance <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration" /> qui permet de chaîner plusieurs appels.</returns>
      <param name="value">Précision de la propriété.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.IsConcurrencyToken">
      <summary> Indique que la propriété doit être utilisée comme jeton d'accès concurrentiel optimiste. </summary>
      <returns>Même instance <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration" /> qui permet de chaîner plusieurs appels.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.IsConcurrencyToken(System.Nullable{System.Boolean})">
      <summary> Indique si la propriété doit être utilisée comme jeton d'accès concurrentiel optimiste. </summary>
      <returns>Même instance <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration" /> qui permet de chaîner plusieurs appels.</returns>
      <param name="concurrencyToken"> Valeur indiquant si la propriété est un jeton d'accès concurrentiel ou non. L'affectation de la valeur Null supprime la facette du jeton d'accès concurrentiel de la propriété. L'affectation de la valeur Null entraîne le même comportement au moment de l'exécution que la spécification de la valeur false. </param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.IsOptional">
      <summary> Configure la propriété pour qu'elle soit de type facultatif. La colonne de base de données utilisée pour stocker cette propriété autorise la valeur Null. </summary>
      <returns>Même instance <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration" /> qui permet de chaîner plusieurs appels.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.IsRequired">
      <summary> Configure la propriété pour qu'elle soit de type obligatoire. La colonne de base de données utilisée pour stocker cette propriété n'autorise pas la valeur Null. Les propriétés <see cref="T:System.DateTime" /> sont obligatoires par défaut. </summary>
      <returns>Même instance <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration" /> qui permet de chaîner plusieurs appels.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.ToString">
      <summary>Retourne une chaîne qui représente l'objet actuel. Cette méthode n'apparaît pas dans IntelliSense.</summary>
      <returns>Chaîne qui représente l'objet actuel.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration">
      <summary> Permet de configurer une propriété <see cref="T:System.decimal" /> d'un type d'entité ou d'un type complexe.  Cette fonctionnalité de configuration est exposée par l'API Fluent Code First, voir <see cref="T:System.Data.Entity.DbModelBuilder" />. </summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.Equals(System.Object)">
      <summary>Détermine si l'objet spécifié est identique à l'objet actuel. Cette méthode n'apparaît pas dans IntelliSense.</summary>
      <returns>true si les objets sont identiques ; sinon, false.</returns>
      <param name="obj">Objet.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.GetHashCode">
      <summary>Sert de fonction de hachage pour un type particulier. Cette méthode n'apparaît pas dans IntelliSense.</summary>
      <returns>Code de hachage pour le type actuel.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.GetType">
      <summary>Obtient le type de l'instance actuelle. Cette méthode n'apparaît pas dans IntelliSense.</summary>
      <returns>Type exact de l'instance actuelle au moment de l'exécution.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.HasColumnName(System.String)">
      <summary> Configure le nom de la colonne de base de données utilisée pour stocker la propriété. </summary>
      <returns>Même instance <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration" /> qui permet de chaîner plusieurs appels.</returns>
      <param name="columnName">Nom de la colonne.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.HasColumnOrder(System.Nullable{System.Int32})">
      <summary> Configure l'ordre de la colonne de base de données utilisée pour stocker la propriété. Cette méthode est également utilisée pour indiquer l'ordre des clés lorsqu'un type d'entité possède une clé composite. </summary>
      <returns>Même instance <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration" /> qui permet de chaîner plusieurs appels.</returns>
      <param name="columnOrder">Ordre dans lequel cette colonne doit apparaître dans la table de base de données.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.HasColumnType(System.String)">
      <summary> Configure le type de données de la colonne de base de données utilisée pour stocker la propriété. </summary>
      <returns>Même instance <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration" /> qui permet de chaîner plusieurs appels.</returns>
      <param name="columnType">Nom du type de données spécifique du fournisseur de base de données.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.HasDatabaseGeneratedOption(System.Nullable{System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption})">
      <summary>     Configure la manière dont les valeurs pour la propriété sont générées par la base de données. </summary>
      <returns>La même instance DecimalPropertyConfiguration afin que plusieurs appels puissent être chaînés.</returns>
      <param name="databaseGeneratedOption">     Modèle utilisé pour générer des valeurs pour la propriété dans la base de données.     L'affectation de la valeur Null supprime de la propriété la facette du modèle générée par la base de données.     L'affectation de la valeur Null entraîne le même comportement au moment de l'exécution que la spécification de la valeur None. </param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.HasPrecision(System.Byte,System.Byte)">
      <summary> Configure la précision et l'échelle de la propriété. </summary>
      <returns>Même instance <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration" /> qui permet de chaîner plusieurs appels.</returns>
      <param name="precision">Précision de la propriété.</param>
      <param name="scale">Échelle de la propriété.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.IsConcurrencyToken">
      <summary> Indique que la propriété doit être utilisée comme jeton d'accès concurrentiel optimiste. </summary>
      <returns>Même instance <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration" /> qui permet de chaîner plusieurs appels.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.IsConcurrencyToken(System.Nullable{System.Boolean})">
      <summary> Indique si la propriété doit être utilisée comme jeton d'accès concurrentiel optimiste. </summary>
      <returns>Même instance <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration" /> qui permet de chaîner plusieurs appels.</returns>
      <param name="concurrencyToken"> Valeur indiquant si la propriété est un jeton d'accès concurrentiel ou non. L'affectation de la valeur Null supprime la facette du jeton d'accès concurrentiel de la propriété. L'affectation de la valeur Null entraîne le même comportement au moment de l'exécution que la spécification de la valeur false. </param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.IsOptional">
      <summary> Configure la propriété pour qu'elle soit de type facultatif. La colonne de base de données utilisée pour stocker cette propriété autorise la valeur Null. </summary>
      <returns>Même instance <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration" /> qui permet de chaîner plusieurs appels.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.IsRequired">
      <summary> Configure la propriété pour qu'elle soit de type obligatoire. La colonne de base de données utilisée pour stocker cette propriété n'autorise pas la valeur Null. Les propriétés <see cref="T:System.decimal" /> sont obligatoires par défaut. </summary>
      <returns>Même instance <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration" /> qui permet de chaîner plusieurs appels.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.ToString">
      <summary>Retourne une chaîne qui représente l'objet actuel. Cette méthode n'apparaît pas dans IntelliSense.</summary>
      <returns>Chaîne qui représente l'objet actuel.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.DependentNavigationPropertyConfiguration`1">
      <summary> Configure une relation qui peut prendre en charge les propriétés de clé étrangère qui sont exposées dans le modèle objet. Cette fonctionnalité de configuration est exposée par l'API Fluent Code First, voir <see cref="T:System.Data.Entity.DbModelBuilder" />. </summary>
      <typeparam name="TDependentEntityType">Type d'entité dépendant.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DependentNavigationPropertyConfiguration`1.Equals(System.Object)">
      <summary>Détermine si l'objet spécifié est identique à l'objet actuel. Cette méthode n'apparaît pas dans IntelliSense.</summary>
      <returns>true si les objets sont identiques ; sinon, false.</returns>
      <param name="obj">Objet.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DependentNavigationPropertyConfiguration`1.GetHashCode">
      <summary>Sert de fonction de hachage pour un type particulier. Cette méthode n'apparaît pas dans IntelliSense.</summary>
      <returns>Code de hachage pour le type actuel.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DependentNavigationPropertyConfiguration`1.GetType">
      <summary>Obtient le type de l'instance actuelle. Cette méthode n'apparaît pas dans IntelliSense.</summary>
      <returns>Type exact de l'instance actuelle au moment de l'exécution.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DependentNavigationPropertyConfiguration`1.HasForeignKey``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary> Configure la relation pour qu'elle utilise les propriétés de clé étrangère exposées dans le modèle objet. Si les propriétés de clé étrangère ne sont pas exposées dans le modèle objet, utilisez la méthode de mappage.</summary>
      <returns>Objet de configuration qui peut être utilisé pour configurer davantage la relation.</returns>
      <param name="foreignKeyExpression">Expression lambda représentant la propriété à utiliser comme clé étrangère. Si la clé étrangère est composée de plusieurs propriétés, indiquez un type anonyme incluant les propriétés. Lors de l'utilisation de plusieurs propriétés de clé étrangère, les propriétés doivent être indiquées dans l'ordre dans lequel les propriétés de clé primaire ont été configurées pour le type d'entité principal.</param>
      <typeparam name="TKey">Type de la clé.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DependentNavigationPropertyConfiguration`1.ToString">
      <summary>Retourne une chaîne qui représente l'objet actuel. Cette méthode n'apparaît pas dans IntelliSense.</summary>
      <returns>Chaîne qui représente l'objet actuel.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1">
      <summary> Configure le mappage de tables et de colonnes pour un type d'entité ou un sous-ensemble de propriétés d'un type d'entité. Cette fonctionnalité de configuration est exposée par l'API Fluent Code First, voir <see cref="T:System.Data.Entity.DbModelBuilder" />. </summary>
      <typeparam name="TEntityType">Type d'entité à mapper.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1" />.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Equals(System.Object)">
      <summary>Détermine si l'objet spécifié est identique à l'objet actuel. Cette méthode n'apparaît pas dans IntelliSense.</summary>
      <returns>true si les objets sont identiques ; sinon, false.</returns>
      <param name="obj">Objet.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.GetHashCode">
      <summary>Sert de fonction de hachage pour un type particulier. Cette méthode n'apparaît pas dans IntelliSense.</summary>
      <returns>Code de hachage pour le type actuel.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.GetType">
      <summary>Obtient le type de l'instance actuelle. Cette méthode n'apparaît pas dans IntelliSense.</summary>
      <returns>Type exact de l'instance actuelle au moment de l'exécution.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.MapInheritedProperties">
      <summary> Remappe toutes les propriétés héritées des types de base.  Lorsque vous configurez un type dérivé pour le mapper dans une table séparée, toutes les propriétés sont incluses dans la table et non seulement les propriétés non héritées. C'est ce que l'on appelle le mappage de tables par type concret. </summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Properties``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary> Configure les propriétés à inclure dans ce fragment de mappage. Si cette méthode n'est pas appelée, alors toutes les propriétés qui n'ont pas encore été incluses dans un fragment de mappage seront configurées. </summary>
      <param name="propertiesExpression"> Expression lambda dans un type anonyme qui contient les propriétés à mapper.</param>
      <typeparam name="TObject">Type anonyme incluant les propriétés à mapper.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Requires``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary> Configure la condition de discriminateur utilisée pour distinguer les types dans une hiérarchie d'héritage. </summary>
      <returns>Objet de configuration pouvant être utilisé pour configurer davantage la condition de discriminateur.</returns>
      <param name="property"> Expression lambda représentant la propriété utilisée pour distinguer les types. </param>
      <typeparam name="TProperty">Type de la propriété qui est utilisée pour distinguer des types.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Requires(System.String)">
      <summary> Configure la colonne de discriminateur utilisée pour distinguer les types dans une hiérarchie d'héritage. </summary>
      <returns>Objet de configuration pouvant être utilisé pour configurer davantage la colonne et les valeurs de discriminateur.</returns>
      <param name="discriminator">Nom de la colonne de discriminateur.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.ToString">
      <summary>Retourne une chaîne qui représente l'objet actuel. Cette méthode n'apparaît pas dans IntelliSense.</summary>
      <returns>Chaîne qui représente l'objet actuel.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.ToTable(System.String)">
      <summary> Configure le nom de la table vers laquelle le mappage doit être effectué. </summary>
      <param name="tableName">Nom de la table.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.ToTable(System.String,System.String)">
      <summary> Configure le nom et le schéma de la table vers lesquels le mappage doit être effectué. </summary>
      <param name="tableName">Nom de la table.</param>
      <param name="schemaName">Schéma de la table.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration">
      <summary>Représente une configuration de mappage pour une association de clé étrangère.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration.Equals(System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration)">
      <summary>Détermine si l'objet <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration" /> spécifié est identique à l'objet actuel.</summary>
      <returns>true si les objets sont identiques ; sinon, false.</returns>
      <param name="other">Objet <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration" /> à comparer à l'objet actuel.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration.Equals(System.Object)">
      <summary>Détermine si l'objet spécifié est identique à l'objet actuel. Cette méthode n'apparaît pas dans IntelliSense.</summary>
      <returns>true si les objets sont identiques ; sinon, false.</returns>
      <param name="obj">Un objet à comparer à l'objet actuel.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration.GetHashCode">
      <summary>Sert de fonction de hachage pour un type particulier. Cette méthode n'apparaît pas dans IntelliSense.</summary>
      <returns>Code de hachage pour le type actuel.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration.GetType">
      <summary>Obtient le type de l'instance actuelle. Cette méthode n'apparaît pas dans IntelliSense.</summary>
      <returns>Type exact de l'instance actuelle au moment de l'exécution.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration.MapKey(System.String[])">
      <summary> Configure le nom de la colonne pour la clé étrangère. </summary>
      <returns>Même instance <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration" /> qui permet de chaîner plusieurs appels.</returns>
      <param name="keyColumnNames"> Noms des colonnes de clé étrangère. Lors de l'utilisation de plusieurs propriétés de clé étrangère, les propriétés doivent être indiquées dans l'ordre dans lequel les propriétés de clé primaire ont été configurées pour le type d'entité cible. </param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration.ToString">
      <summary>Retourne une chaîne qui représente l'objet actuel. Cette méthode n'apparaît pas dans IntelliSense.</summary>
      <returns>Chaîne qui représente l'objet actuel.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration.ToTable(System.String)">
      <summary>Configure le nom de la table dans laquelle réside la colonne de clé étrangère.</summary>
      <returns>Même instance <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration" /> qui permet de chaîner plusieurs appels.</returns>
      <param name="tableName">Nom de la table à configurer.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration.ToTable(System.String,System.String)">
      <summary>Configure le nom et le schéma de la table dans laquelle réside la colonne de clé étrangère. </summary>
      <returns>Même instance <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration" /> qui permet de chaîner plusieurs appels.</returns>
      <param name="tableName">Nom de la table.</param>
      <param name="schemaName">Schéma de la table.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyNavigationPropertyConfiguration">
      <summary>Configure une relation qui ne peut prendre en charge que les propriétés de clé étrangère qui ne sont pas exposées dans le modèle objet. Cette fonctionnalité de configuration est exposée par l'API Fluent Code First, voir <see cref="T:System.Data.Entity.DbModelBuilder" />. </summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyNavigationPropertyConfiguration.Equals(System.Object)">
      <summary>Détermine si l'objet spécifié est identique à l'objet actuel. Cette méthode n'apparaît pas dans IntelliSense.</summary>
      <returns>true si les objets sont identiques ; sinon, false.</returns>
      <param name="obj">Objet.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyNavigationPropertyConfiguration.GetHashCode">
      <summary>Sert de fonction de hachage pour un type particulier. Cette méthode n'apparaît pas dans IntelliSense.</summary>
      <returns>Code de hachage pour le type actuel.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyNavigationPropertyConfiguration.GetType">
      <summary>Obtient le type de l'instance actuelle. Cette méthode n'apparaît pas dans IntelliSense.</summary>
      <returns>Type exact de l'instance actuelle au moment de l'exécution.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyNavigationPropertyConfiguration.Map(System.Action{System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration})">
      <summary>Configure la relation pour qu'elle utilise les propriétés de clé étrangère qui ne sont pas exposées dans le modèle objet. Les colonnes et la table peuvent être personnalisées en indiquant une action de configuration. Si une action de configuration vide est spécifiée, le ou les noms de colonne seront générés par convention. Si les propriétés de clé étrangère sont exposées dans le modèle objet, utilisez la méthode HasForeignKey. Toutes les relations ne prennent pas en charge l'exposition de propriétés de clé étrangère dans le modèle objet.</summary>
      <returns>Objet de configuration qui peut être utilisé pour configurer davantage la relation.</returns>
      <param name="configurationAction">Action qui configure la table et les colonnes de clé étrangère.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyNavigationPropertyConfiguration.ToString">
      <summary>Retourne une chaîne qui représente l'objet actuel. Cette méthode n'apparaît pas dans IntelliSense.</summary>
      <returns>Chaîne qui représente l'objet actuel.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration">
      <summary> Permet de configurer une colonne avec des facettes de longueur pour un type d'entité ou un type complexe.  Cette fonctionnalité de configuration est exposée par l'API Fluent Code First, voir <see cref="T:System.Data.Entity.DbModelBuilder" />. </summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration.Equals(System.Object)">
      <summary>Détermine si l'objet spécifié est identique à l'objet actuel. Cette méthode n'apparaît pas dans IntelliSense.</summary>
      <returns>true si les objets sont identiques ; sinon, false.</returns>
      <param name="obj">Objet.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration.GetHashCode">
      <summary>Sert de fonction de hachage pour un type particulier. Cette méthode n'apparaît pas dans IntelliSense.</summary>
      <returns>Code de hachage pour le type actuel.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration.GetType">
      <summary>Obtient le type de l'instance actuelle. Cette méthode n'apparaît pas dans IntelliSense.</summary>
      <returns>Type exact de l'instance actuelle au moment de l'exécution.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration.HasMaxLength(System.Nullable{System.Int32})">
      <summary> Configure la colonne pour qu'elle atteigne la longueur maximale spécifiée. </summary>
      <returns>Même instance <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration" /> qui permet de chaîner plusieurs appels.</returns>
      <param name="value"> Longueur maximale de la colonne. L'affectation de la valeur Null supprime les restrictions sur la longueur maximale de la colonne et une longueur par défaut est utilisée pour la colonne de base de données. </param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration.IsFixedLength">
      <summary>Configure la colonne pour qu'elle soit de longueur fixe. </summary>
      <returns>true si la colonne est de longueur fixe ; sinon, false.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration.IsMaxLength">
      <summary> Configure la colonne pour qu'elle autorise la longueur maximale prise en charge par le fournisseur de base de données. </summary>
      <returns>Même instance <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration" /> qui permet de chaîner plusieurs appels.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration.IsVariableLength">
      <summary> Configure la colonne pour qu'elle soit de longueur variable. </summary>
      <returns>true si la colonne est de longueur variable ; sinon, false.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration.ToString">
      <summary>Retourne une chaîne qui représente l'objet actuel. Cette méthode n'apparaît pas dans IntelliSense.</summary>
      <returns>Chaîne qui représente l'objet actuel.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.LengthPropertyConfiguration">
      <summary> Permet de configurer une propriété avec des facettes de longueur pour un type d'entité ou un type complexe.  Cette fonctionnalité de configuration est disponible via l'API Fluent Code First, voir <see cref="T:System.Data.Entity.DbModelBuilder" />. </summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthPropertyConfiguration.Equals(System.Object)">
      <summary>Détermine si l'objet spécifié est identique à l'objet actuel. Cette méthode n'apparaît pas dans IntelliSense.</summary>
      <returns>true si les objets sont identiques ; sinon, false.</returns>
      <param name="obj">Objet.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthPropertyConfiguration.GetHashCode">
      <summary>Sert de fonction de hachage pour un type particulier. Cette méthode n'apparaît pas dans IntelliSense.</summary>
      <returns>Code de hachage pour le type actuel.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthPropertyConfiguration.GetType">
      <summary>Obtient le type de l'instance actuelle. Cette méthode n'apparaît pas dans IntelliSense.</summary>
      <returns>Type exact de l'instance actuelle au moment de l'exécution.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthPropertyConfiguration.HasMaxLength(System.Nullable{System.Int32})">
      <summary> Configure la propriété pour qu'elle atteigne la longueur maximale spécifiée. </summary>
      <returns>Même instance <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.LengthPropertyConfiguration" /> qui permet de chaîner plusieurs appels.</returns>
      <param name="value"> Longueur maximale pour la propriété. L'affectation de la valeur Null supprime les restrictions sur la longueur maximale de la propriété et une longueur par défaut est utilisée pour la colonne de base de données.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthPropertyConfiguration.IsFixedLength">
      <summary> Configure la propriété pour qu'elle soit de longueur fixe. Utilisez la valeur HasMaxLength pour définir la longueur de la propriété. </summary>
      <returns>Même instance <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.LengthPropertyConfiguration" /> qui permet de chaîner plusieurs appels.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthPropertyConfiguration.IsMaxLength">
      <summary> Configure la propriété pour qu'elle autorise la longueur maximale prise en charge par le fournisseur de base de données. </summary>
      <returns>Même instance <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.LengthPropertyConfiguration" /> qui permet de chaîner plusieurs appels.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthPropertyConfiguration.IsVariableLength">
      <summary> Configure la propriété pour qu'elle soit de longueur variable. </summary>
      <returns>Même instance <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.LengthPropertyConfiguration" /> qui permet de chaîner plusieurs appels.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthPropertyConfiguration.ToString">
      <summary>Retourne une chaîne qui représente l'objet actuel. Cette méthode n'apparaît pas dans IntelliSense.</summary>
      <returns>Chaîne qui représente l'objet actuel.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2">
      <summary> Configure une relation de type plusieurs à partir d'un type d'entité. </summary>
      <typeparam name="TEntityType">Type d'entité d'où provient la relation.</typeparam>
      <typeparam name="TTargetEntityType">Type d'entité ciblé par la relation.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2.Equals(System.Object)">
      <summary>Détermine si l'objet spécifié est identique à l'objet actuel. Cette méthode n'apparaît pas dans IntelliSense.</summary>
      <returns>true si les objets sont identiques ; sinon, false.</returns>
      <param name="obj">Objet.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2.GetHashCode">
      <summary>Sert de fonction de hachage pour un type particulier. Cette méthode n'apparaît pas dans IntelliSense.</summary>
      <returns>Code de hachage pour le type actuel.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2.GetType">
      <summary>Obtient le type de l'instance actuelle. Cette méthode n'apparaît pas dans IntelliSense.</summary>
      <returns>Type exact de l'instance actuelle au moment de l'exécution.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2.ToString">
      <summary>Retourne une chaîne qui représente l'objet actuel. Cette méthode n'apparaît pas dans IntelliSense.</summary>
      <returns>Chaîne qui représente l'objet actuel.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2.WithMany">
      <summary> Configure la relation pour qu'elle soit de type plusieurs:plusieurs sans propriété de navigation à l'autre extrémité de la relation. </summary>
      <returns>Objet de configuration qui peut être utilisé pour configurer davantage la relation.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2.WithMany(System.Linq.Expressions.Expression{System.Func{`1,System.Collections.Generic.ICollection{`0}}})">
      <summary> Configure la relation pour qu'elle soit de type plusieurs:plusieurs avec une propriété de navigation à l'autre extrémité de la relation. </summary>
      <returns>Objet de configuration qui peut être utilisé pour configurer davantage la relation.</returns>
      <param name="navigationPropertyExpression"> Expression lambda représentant la propriété de navigation à l'autre extrémité de la relation. Par exemple, t =&gt; t.MyProperty en C# et Function(t) t.MyProperty en Visual Basic .Net.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2.WithOptional">
      <summary> Configure la relation pour qu'elle soit de type plusieurs:facultatif sans propriété de navigation à l'autre extrémité de la relation. </summary>
      <returns>Objet de configuration qui peut être utilisé pour configurer davantage la relation.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2.WithOptional(System.Linq.Expressions.Expression{System.Func{`1,`0}})">
      <summary> Configure la relation pour qu'elle soit de type plusieurs:facultatif avec une propriété de navigation à l'autre extrémité de la relation. </summary>
      <returns>Objet de configuration qui peut être utilisé pour configurer davantage la relation.</returns>
      <param name="navigationPropertyExpression"> Expression lambda représentant la propriété de navigation à l'autre extrémité de la relation. Par exemple, t =&gt; t.MyProperty en C# et Function(t) t.MyProperty en Visual Basic .Net. </param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2.WithRequired">
      <summary> Configure la relation pour qu'elle soit de type plusieurs:obligatoire sans propriété de navigation à l'autre extrémité de la relation. </summary>
      <returns>Objet de configuration qui peut être utilisé pour configurer davantage la relation.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2.WithRequired(System.Linq.Expressions.Expression{System.Func{`1,`0}})">
      <summary> Configure la relation pour qu'elle soit de type plusieurs:obligatoire avec une propriété de navigation à l'autre extrémité de la relation. </summary>
      <returns>Objet de configuration qui peut être utilisé pour configurer davantage la relation.</returns>
      <param name="navigationPropertyExpression"> Expression lambda représentant la propriété de navigation à l'autre extrémité de la relation. Par exemple, t =&gt; t.MyProperty en C# et Function(t) t.MyProperty en Visual Basic .Net. </param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration">
      <summary> Configure le mappage de tables et de colonnes d'une relation de type plusieurs:plusieurs. Cette fonctionnalité de configuration est exposée par l'API Fluent Code First, voir <see cref="T:System.Data.Entity.DbModelBuilder" />. </summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration.Equals(System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration)">
      <summary>Détermine si l'objet <see cref="System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration.IndependentAssociationMappingConfiguration" /> spécifié est identique à l'objet actuel.</summary>
      <returns>true si les objets sont identiques ; sinon, false.</returns>
      <param name="other">Objet <see cref="System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration.IndependentAssociationMappingConfiguration" />.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration.Equals(System.Object)">
      <summary>Détermine si l'objet spécifié est identique à l'objet actuel. Cette méthode n'apparaît pas dans IntelliSense.</summary>
      <returns>true si les objets sont identiques ; sinon, false.</returns>
      <param name="obj">Objet.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration.GetHashCode">
      <summary>Sert de fonction de hachage pour un type particulier. Cette méthode n'apparaît pas dans IntelliSense.</summary>
      <returns>Code de hachage pour le type actuel.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration.GetType">
      <summary>Obtient le type de l'instance actuelle. Cette méthode n'apparaît pas dans IntelliSense.</summary>
      <returns>Type exact de l'instance actuelle au moment de l'exécution.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration.MapLeftKey(System.String[])">
      <summary> Configure le nom de la colonne pour la clé étrangère de gauche. La clé étrangère de gauche représente la propriété de navigation indiquée dans l'appel à HasMany sur <see cref="T:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1" />. </summary>
      <returns>Même instance <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration" /> qui permet de chaîner plusieurs appels.</returns>
      <param name="keyColumnNames"> Noms des colonnes de clé étrangère. Lors de l'utilisation de plusieurs propriétés de clé étrangère, les propriétés doivent être indiquées dans l'ordre dans lequel les propriétés de clé primaire ont été configurées pour le type d'entité cible. </param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration.MapRightKey(System.String[])">
      <summary> Configure le nom de la colonne pour la clé étrangère de droite. La clé étrangère de droite représente la propriété de navigation indiquée dans l'appel à WithMany. </summary>
      <returns>Même instance <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration" /> qui permet de chaîner plusieurs appels.</returns>
      <param name="keyColumnNames"> Noms des colonnes de clé étrangère. Lors de l'utilisation de plusieurs propriétés de clé étrangère, les propriétés doivent être indiquées dans l'ordre dans lequel les propriétés de clé primaire ont été configurées pour le type d'entité cible. </param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration.ToString">
      <summary>Retourne une chaîne qui représente l'objet actuel. Cette méthode n'apparaît pas dans IntelliSense.</summary>
      <returns>Chaîne qui représente l'objet actuel.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration.ToTable(System.String)">
      <summary> Configure le nom de la table de jointures pour la relation. </summary>
      <returns>Même instance <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration" /> qui permet de chaîner plusieurs appels.</returns>
      <param name="tableName">Nom de la table.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration.ToTable(System.String,System.String)">
      <summary> Configure le nom et le schéma de la table de jointures pour la relation. </summary>
      <returns>Même instance <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration" /> qui permet de chaîner plusieurs appels.</returns>
      <param name="tableName">Nom de la table.</param>
      <param name="schemaName">Schéma de la table.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyNavigationPropertyConfiguration">
      <summary> Configure une relation de type plusieurs:plusieurs. Cette fonctionnalité de configuration est exposée par l'API Fluent Code First, voir <see cref="T:System.Data.Entity.DbModelBuilder" />. </summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyNavigationPropertyConfiguration.Equals(System.Object)">
      <summary>Détermine si l'objet spécifié est identique à l'objet actuel. Cette méthode n'apparaît pas dans IntelliSense.</summary>
      <returns>true si les objets sont identiques ; sinon, false.</returns>
      <param name="obj">Objet.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyNavigationPropertyConfiguration.GetHashCode">
      <summary>Sert de fonction de hachage pour un type particulier. Cette méthode n'apparaît pas dans IntelliSense.</summary>
      <returns>Code de hachage pour le type actuel.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyNavigationPropertyConfiguration.GetType">
      <summary>Obtient le type de l'instance actuelle. Cette méthode n'apparaît pas dans IntelliSense.</summary>
      <returns>Type exact de l'instance actuelle au moment de l'exécution.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyNavigationPropertyConfiguration.Map(System.Action{System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration})">
      <summary> Configure la table et les colonnes de clés étrangères utilisées pour stocker la relation. </summary>
      <param name="configurationAction">Action qui configure la table et les colonnes de clé étrangère.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyNavigationPropertyConfiguration.ToString">
      <summary>Retourne une chaîne qui représente l'objet actuel. Cette méthode n'apparaît pas dans IntelliSense.</summary>
      <returns>Chaîne qui représente l'objet actuel.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.NotNullConditionConfiguration">
      <summary> Configure une condition utilisée pour distinguer les types dans une hiérarchie d'héritage basée sur les valeurs affectées à une propriété. Cette fonctionnalité de configuration est exposée par l'API Fluent Code First, voir <see cref="T:System.Data.Entity.DbModelBuilder" />. </summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.NotNullConditionConfiguration.Equals(System.Object)">
      <summary>Détermine si l'objet spécifié est identique à l'objet actuel. Cette méthode n'apparaît pas dans IntelliSense.</summary>
      <returns>true si les objets sont identiques ; sinon, false.</returns>
      <param name="obj">Objet.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.NotNullConditionConfiguration.GetHashCode">
      <summary>Sert de fonction de hachage pour un type particulier. Cette méthode n'apparaît pas dans IntelliSense.</summary>
      <returns>Code de hachage pour le type actuel.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.NotNullConditionConfiguration.GetType">
      <summary>Obtient le type de l'instance actuelle. Cette méthode n'apparaît pas dans IntelliSense.</summary>
      <returns>Type exact de l'instance actuelle au moment de l'exécution.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.NotNullConditionConfiguration.HasValue">
      <summary> Configure la condition pour exiger une valeur dans la propriété.  Les lignes qui n'ont pas de valeur affectée à la colonne dans laquelle cette propriété est stockée sont supposées être du type de base de ce type d'entité. </summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.NotNullConditionConfiguration.ToString">
      <summary>Retourne une chaîne qui représente l'objet actuel. Cette méthode n'apparaît pas dans IntelliSense.</summary>
      <returns>Chaîne qui représente l'objet actuel.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2">
      <summary>Configure une relation de type facultatif à partir d'un type d'entité. </summary>
      <typeparam name="TEntityType">Type d'entité d'où provient la relation.</typeparam>
      <typeparam name="TTargetEntityType">Type d'entité ciblé par la relation.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.Equals(System.Object)">
      <summary>Détermine si l'objet spécifié est identique à l'objet actuel. Cette méthode n'apparaît pas dans IntelliSense.</summary>
      <returns>true si les objets sont identiques ; sinon, false.</returns>
      <param name="obj">Objet.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.GetHashCode">
      <summary>Sert de fonction de hachage pour un type particulier. Cette méthode n'apparaît pas dans IntelliSense.</summary>
      <returns>Code de hachage pour le type actuel.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.GetType">
      <summary>Obtient le type de l'instance actuelle. Cette méthode n'apparaît pas dans IntelliSense.</summary>
      <returns>Type exact de l'instance actuelle au moment de l'exécution.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.ToString">
      <summary>Retourne une chaîne qui représente l'objet actuel. Cette méthode n'apparaît pas dans IntelliSense.</summary>
      <returns>Chaîne qui représente l'objet actuel.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.WithMany">
      <summary> Configure la relation pour qu'elle soit de type facultatif:plusieurs sans propriété de navigation à l'autre extrémité de la relation. </summary>
      <returns>Objet de configuration qui peut être utilisé pour configurer davantage la relation.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.WithMany(System.Linq.Expressions.Expression{System.Func{`1,System.Collections.Generic.ICollection{`0}}})">
      <summary> Configure la relation pour qu'elle soit de type facultatif:plusieurs avec une propriété de navigation à l'autre extrémité de la relation. </summary>
      <returns>Objet de configuration qui peut être utilisé pour configurer davantage la relation.</returns>
      <param name="navigationPropertyExpression"> Expression lambda représentant la propriété de navigation à l'autre extrémité de la relation. Par exemple, t =&gt; t.MyProperty en C# et Function(t) t.MyProperty en Visual Basic .Net. </param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.WithOptionalDependent">
      <summary> Configure la relation pour qu'elle soit de type facultatif:facultatif sans propriété de navigation à l'autre extrémité de la relation. Le type d'entité configuré sera le type d'entité dépendant et contiendra une clé étrangère du type d'entité principal.  Le type d'entité ciblé par la relation représentera le type d'entité principal de la relation. </summary>
      <returns>Objet de configuration qui peut être utilisé pour configurer davantage la relation.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.WithOptionalDependent(System.Linq.Expressions.Expression{System.Func{`1,`0}})">
      <summary> Configure la relation pour qu'elle soit de type facultatif:facultatif avec une propriété de navigation à l'autre extrémité de la relation. Le type d'entité configuré sera le type d'entité dépendant et contiendra une clé étrangère du type d'entité principal.  Le type d'entité ciblé par la relation représentera le type d'entité principal de la relation. </summary>
      <returns>Objet de configuration qui peut être utilisé pour configurer davantage la relation.</returns>
      <param name="navigationPropertyExpression"> Expression lambda représentant la propriété de navigation à l'autre extrémité de la relation. Par exemple, t =&gt; t.MyProperty en C# et Function(t) t.MyProperty en Visual Basic .Net.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.WithOptionalPrincipal">
      <summary> Configure la relation pour qu'elle soit de type facultatif:facultatif sans propriété de navigation à l'autre extrémité de la relation. Le type d'entité configuré représentera le type d'entité principal de la relation.  Le type d'entité ciblé par la relation sera le type d'entité dépendant et contiendra une clé étrangère du type d'entité principal. </summary>
      <returns>Objet de configuration qui peut être utilisé pour configurer davantage la relation.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.WithOptionalPrincipal(System.Linq.Expressions.Expression{System.Func{`1,`0}})">
      <summary> Configure la relation pour qu'elle soit de type facultatif:facultatif avec une propriété de navigation à l'autre extrémité de la relation. Le type d'entité configuré représentera le type d'entité principal de la relation.  Le type d'entité ciblé par la relation sera le type d'entité dépendant et contiendra une clé étrangère du type d'entité principal. </summary>
      <returns>Objet de configuration qui peut être utilisé pour configurer davantage la relation.</returns>
      <param name="navigationPropertyExpression"> Expression lambda représentant la propriété de navigation à l'autre extrémité de la relation. </param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.WithRequired">
      <summary>Configure la terminaison spécifiée de la relation pour qu'elle soit obligatoire sans propriété de navigation à l'autre extrémité de la relation. </summary>
      <returns>Objet de configuration qui peut être utilisé pour configurer davantage la relation.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.WithRequired(System.Linq.Expressions.Expression{System.Func{`1,`0}})">
      <summary>Configure la terminaison spécifiée de la relation pour qu'elle soit obligatoire avec une propriété de navigation à l'autre extrémité de la relation. </summary>
      <returns>Objet de configuration qui peut être utilisé pour configurer davantage la relation.</returns>
      <param name="navigationPropertyExpression"> Expression lambda représentant la propriété de navigation à l'autre extrémité de la relation. Par exemple, t =&gt; t.MyProperty en C# et Function(t) t.MyProperty en Visual Basic .Net.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration">
      <summary>Configure une colonne primitive à partir d'un type d'entité.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration.Equals(System.Object)">
      <summary>Détermine si l'objet spécifié est identique à l'objet actuel. Cette méthode n'apparaît pas dans IntelliSense.</summary>
      <returns>true si les objets sont identiques ; sinon, false.</returns>
      <param name="obj">Objet.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration.GetHashCode">
      <summary>Sert de fonction de hachage pour un type particulier. Cette méthode n'apparaît pas dans IntelliSense.</summary>
      <returns>Code de hachage pour le type actuel.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration.GetType">
      <summary>Obtient le type de l'instance actuelle. Cette méthode n'apparaît pas dans IntelliSense.</summary>
      <returns>Type exact de l'instance actuelle au moment de l'exécution.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration.HasColumnOrder(System.Nullable{System.Int32})">
      <summary> Configure l'ordre de la colonne primitive utilisée pour stocker la propriété. Cette méthode est également utilisée pour indiquer l'ordre des clés lorsqu'un type d'entité possède une clé composite. </summary>
      <returns>Même instance <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration" /> qui permet de chaîner plusieurs appels.</returns>
      <param name="columnOrder">Ordre dans lequel cette colonne doit apparaître dans la table de base de données.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration.HasColumnType(System.String)">
      <summary> Configure le type de données de la colonne primitive utilisée pour stocker la propriété. </summary>
      <returns>Même instance <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration" /> qui permet de chaîner plusieurs appels.</returns>
      <param name="columnType">Nom du type de données spécifique du fournisseur de base de données.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration.IsOptional">
      <summary>Configure la colonne primitive pour qu'elle soit de type facultatif.</summary>
      <returns>true si la colonne est de type facultatif ; sinon, false.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration.IsRequired">
      <summary>Configure la colonne primitive pour qu'elle soit de type obligatoire.</summary>
      <returns>true si la colonne est de type obligatoire ; sinon, false.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration.ToString">
      <summary>Retourne une chaîne qui représente l'objet actuel. Cette méthode n'apparaît pas dans IntelliSense.</summary>
      <returns>Chaîne qui représente l'objet actuel.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration">
      <summary> Permet de configurer une propriété primitive d'un type d'entité ou d'un type complexe.  Cette fonctionnalité de configuration est exposée par l'API Fluent Code First, voir <see cref="T:System.Data.Entity.DbModelBuilder" />. </summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.Equals(System.Object)">
      <summary>Détermine si l'objet spécifié est identique à l'objet actuel. Cette méthode n'apparaît pas dans IntelliSense.</summary>
      <returns>true si les objets sont identiques ; sinon, false.</returns>
      <param name="obj">Objet.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.GetHashCode">
      <summary>Sert de fonction de hachage pour un type particulier. Cette méthode n'apparaît pas dans IntelliSense.</summary>
      <returns>Code de hachage pour le type actuel.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.GetType">
      <summary>Obtient le type de l'instance actuelle. Cette méthode n'apparaît pas dans IntelliSense.</summary>
      <returns>Type exact de l'instance actuelle au moment de l'exécution.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.HasColumnName(System.String)">
      <summary> Configure le nom de la colonne de base de données utilisée pour stocker la propriété. </summary>
      <returns>Même instance <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration" /> qui permet de chaîner plusieurs appels.</returns>
      <param name="columnName">Nom de la colonne.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.HasColumnOrder(System.Nullable{System.Int32})">
      <summary> Configure l'ordre de la colonne de base de données utilisée pour stocker la propriété. Cette méthode est également utilisée pour indiquer l'ordre des clés lorsqu'un type d'entité possède une clé composite. </summary>
      <returns>Même instance <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration" /> qui permet de chaîner plusieurs appels.</returns>
      <param name="columnOrder">Ordre dans lequel cette colonne doit apparaître dans la table de base de données.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.HasColumnType(System.String)">
      <summary> Configure le type de données de la colonne de base de données utilisée pour stocker la propriété. </summary>
      <returns>Même instance <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration" /> qui permet de chaîner plusieurs appels.</returns>
      <param name="columnType">Nom du type de données spécifique du fournisseur de base de données.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.HasDatabaseGeneratedOption(System.Nullable{System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption})">
      <summary>     Configure la manière dont les valeurs pour la propriété sont générées par la base de données. </summary>
      <returns>La même instance PrimitivePropertyConfiguration afin que plusieurs appels puissent être chaînés.</returns>
      <param name="databaseGeneratedOption">     Modèle utilisé pour générer des valeurs pour la propriété dans la base de données.     L'affectation de la valeur Null supprime de la propriété la facette du modèle générée par la base de données.     L'affectation de la valeur Null entraîne le même comportement au moment de l'exécution que la spécification de la valeur None. </param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.IsConcurrencyToken">
      <summary> Indique que la propriété doit être utilisée comme jeton d'accès concurrentiel optimiste. </summary>
      <returns>Même instance <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration" /> qui permet de chaîner plusieurs appels.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.IsConcurrencyToken(System.Nullable{System.Boolean})">
      <summary> Indique si la propriété doit être utilisée comme jeton d'accès concurrentiel optimiste. </summary>
      <returns>Même instance <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration" /> qui permet de chaîner plusieurs appels.</returns>
      <param name="concurrencyToken"> Valeur indiquant si la propriété est un jeton d'accès concurrentiel ou non. L'affectation de la valeur Null supprime la facette du jeton d'accès concurrentiel de la propriété. L'affectation de la valeur Null entraîne le même comportement au moment de l'exécution que la spécification de la valeur false. </param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.IsOptional">
      <summary> Configure la propriété pour qu'elle soit de type facultatif. La colonne de base de données utilisée pour stocker cette propriété autorise la valeur Null. </summary>
      <returns>Même instance <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration" /> qui permet de chaîner plusieurs appels.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.IsRequired">
      <summary> Configure la propriété pour qu'elle soit de type obligatoire. La colonne de base de données utilisée pour stocker cette propriété n'autorise pas la valeur Null. </summary>
      <returns>Même instance <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration" /> qui permet de chaîner plusieurs appels.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.ToString">
      <summary>Retourne une chaîne qui représente l'objet actuel. Cette méthode n'apparaît pas dans IntelliSense.</summary>
      <returns>Chaîne qui représente l'objet actuel.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2">
      <summary> Configure une relation obligatoire à partir d'un type d'entité. </summary>
      <typeparam name="TEntityType">Type d'entité d'où provient la relation.</typeparam>
      <typeparam name="TTargetEntityType">Type d'entité ciblé par la relation.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.Equals(System.Object)">
      <summary>Détermine si l'objet spécifié est identique à l'objet actuel. Cette méthode n'apparaît pas dans IntelliSense.</summary>
      <returns>true si les objets sont identiques ; sinon, false.</returns>
      <param name="obj">Objet.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.GetHashCode">
      <summary>Sert de fonction de hachage pour un type particulier. Cette méthode n'apparaît pas dans IntelliSense.</summary>
      <returns>Code de hachage pour le type actuel.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.GetType">
      <summary>Obtient le type de l'instance actuelle. Cette méthode n'apparaît pas dans IntelliSense.</summary>
      <returns>Type exact de l'instance actuelle au moment de l'exécution.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.ToString">
      <summary>Retourne une chaîne qui représente l'objet actuel. Cette méthode n'apparaît pas dans IntelliSense.</summary>
      <returns>Chaîne qui représente l'objet actuel.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.WithMany">
      <summary> Configure la relation pour qu'elle soit de type obligatoire:plusieurs sans propriété de navigation à l'autre extrémité de la relation. </summary>
      <returns>Objet de configuration qui peut être utilisé pour configurer davantage la relation.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.WithMany(System.Linq.Expressions.Expression{System.Func{`1,System.Collections.Generic.ICollection{`0}}})">
      <summary> Configure la relation pour qu'elle soit de type obligatoire:plusieurs avec une propriété de navigation à l'autre extrémité de la relation. </summary>
      <returns>Objet de configuration qui peut être utilisé pour configurer davantage la relation.</returns>
      <param name="navigationPropertyExpression"> Expression lambda représentant la propriété de navigation à l'autre extrémité de la relation. Par exemple, t =&gt; t.MyProperty en C# et Function(t) t.MyProperty en Visual Basic .Net. </param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.WithOptional">
      <summary> Configure la relation pour qu'elle soit de type obligatoire:facultatif sans propriété de navigation à l'autre extrémité de la relation. </summary>
      <returns>Objet de configuration qui peut être utilisé pour configurer davantage la relation.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.WithOptional(System.Linq.Expressions.Expression{System.Func{`1,`0}})">
      <summary> Configure la relation pour qu'elle soit de type obligatoire:facultatif avec une propriété de navigation à l'autre extrémité de la relation. </summary>
      <returns>Objet de configuration qui peut être utilisé pour configurer davantage la relation.</returns>
      <param name="navigationPropertyExpression"> Expression lambda représentant la propriété de navigation à l'autre extrémité de la relation. Par exemple, t =&gt; t.MyProperty en C# et Function(t) t.MyProperty en Visual Basic .Net.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.WithRequiredDependent">
      <summary> Configure la relation pour qu'elle soit de type obligatoire:obligatoire sans propriété de navigation à l'autre extrémité de la relation. Le type d'entité configuré sera le type d'entité dépendant et contiendra une clé étrangère du type d'entité principal.  Le type d'entité ciblé par la relation représentera le type d'entité principal de la relation. </summary>
      <returns>Objet de configuration qui peut être utilisé pour configurer davantage la relation.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.WithRequiredDependent(System.Linq.Expressions.Expression{System.Func{`1,`0}})">
      <summary> Configure la relation pour qu'elle soit de type obligatoire:obligatoire avec une propriété de navigation à l'autre extrémité de la relation. Le type d'entité configuré sera le type d'entité dépendant et contiendra une clé étrangère du type d'entité principal.  Le type d'entité ciblé par la relation représentera le type d'entité principal de la relation. </summary>
      <returns>Objet de configuration qui peut être utilisé pour configurer davantage la relation.</returns>
      <param name="navigationPropertyExpression"> Expression lambda représentant la propriété de navigation à l'autre extrémité de la relation. Par exemple, t =&gt; t.MyProperty en C# et Function(t) t.MyProperty en Visual Basic .Net.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.WithRequiredPrincipal">
      <summary> Configure la relation pour qu'elle soit de type obligatoire:obligatoire sans propriété de navigation à l'autre extrémité de la relation. Le type d'entité configuré représentera le type d'entité principal de la relation.  Le type d'entité ciblé par la relation sera le type d'entité dépendant et contiendra une clé étrangère du type d'entité principal. </summary>
      <returns>Objet de configuration qui peut être utilisé pour configurer davantage la relation.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.WithRequiredPrincipal(System.Linq.Expressions.Expression{System.Func{`1,`0}})">
      <summary> Configure la relation pour qu'elle soit de type obligatoire:obligatoire avec une propriété de navigation à l'autre extrémité de la relation. Le type d'entité configuré représentera le type d'entité principal de la relation.  Le type d'entité ciblé par la relation sera le type d'entité dépendant et contiendra une clé étrangère du type d'entité principal. </summary>
      <returns>Objet de configuration qui peut être utilisé pour configurer davantage la relation.</returns>
      <param name="navigationPropertyExpression"> Expression lambda représentant la propriété de navigation à l'autre extrémité de la relation. Par exemple, t =&gt; t.MyProperty en C# et Function(t) t.MyProperty en Visual Basic .Net.  </param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration">
      <summary> Configure une colonne de base de données utilisée pour stocker des valeurs de chaîne. Cette fonctionnalité de configuration est exposée par l'API Fluent Code First. Pour plus d'informations, voir <see cref="T:System.Data.Entity.DbModelBuilder" />. </summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.Equals(System.Object)">
      <summary>Détermine si l'objet spécifié est identique à l'objet actuel. Cette méthode n'apparaît pas dans IntelliSense.</summary>
      <returns>true si les objets sont identiques ; sinon, false.</returns>
      <param name="obj">Objet.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.GetHashCode">
      <summary>Sert de fonction de hachage pour un type particulier. Cette méthode n'apparaît pas dans IntelliSense.</summary>
      <returns>Code de hachage pour le type actuel.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.GetType">
      <summary>Obtient le type de l'instance actuelle. Cette méthode n'apparaît pas dans IntelliSense.</summary>
      <returns>Type exact de l'instance actuelle au moment de l'exécution.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.HasColumnOrder(System.Nullable{System.Int32})">
      <summary> Configure l'ordre de la colonne de base de données. </summary>
      <returns>Même instance <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration" /> qui permet de chaîner plusieurs appels.</returns>
      <param name="columnOrder">Ordre dans lequel cette colonne doit apparaître dans la table de base de données.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.HasColumnType(System.String)">
      <summary> Configure le type de données de la colonne de base de données. </summary>
      <returns>Même instance <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration" /> qui permet de chaîner plusieurs appels.</returns>
      <param name="columnType">Nom du type de données spécifique du fournisseur de base de données.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.HasMaxLength(System.Nullable{System.Int32})">
      <summary>Configure la propriété pour qu'elle atteigne la longueur maximale spécifiée.</summary>
      <returns>Même instance <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration" /> qui permet de chaîner plusieurs appels.</returns>
      <param name="value">Longueur maximale pour la propriété. L'affectation de la valeur Null entraîne l'utilisation d'une longueur par défaut pour la colonne.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.IsFixedLength">
      <summary> Configure la colonne pour qu'elle soit de longueur fixe. Utilisez la valeur HasMaxLength pour définir la longueur de la propriété. </summary>
      <returns>Même instance <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration" /> qui permet de chaîner plusieurs appels.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.IsMaxLength">
      <summary> Configure la colonne pour qu'elle autorise la longueur maximale prise en charge par le fournisseur de base de données. </summary>
      <returns>Même instance <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration" /> qui permet de chaîner plusieurs appels.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.IsOptional">
      <summary> Configure la colonne pour qu'elle soit de type facultatif. </summary>
      <returns>Même instance <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration" /> qui permet de chaîner plusieurs appels.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.IsRequired">
      <summary> Configure la colonne pour qu'elle soit de type obligatoire. </summary>
      <returns>Même instance <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration" /> qui permet de chaîner plusieurs appels.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.IsUnicode">
      <summary> Configure la colonne pour qu'elle prenne en charge le contenu de chaîne Unicode. </summary>
      <returns>Même instance <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration" /> qui permet de chaîner plusieurs appels.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.IsUnicode(System.Nullable{System.Boolean})">
      <summary> Indique si la colonne prend en charge le contenu de chaîne Unicode. </summary>
      <returns>Même instance <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration" /> qui permet de chaîner plusieurs appels.</returns>
      <param name="unicode"> Valeur indiquant si la colonne prend en charge le contenu de chaîne Unicode. L'affectation de la valeur Null supprime la facette Unicode de la colonne. L'affectation de la valeur Null entraîne le même comportement au moment de l'exécution que la spécification de la valeur false. </param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.IsVariableLength">
      <summary> Configure la colonne pour qu'elle soit de longueur variable. Par défaut, les colonnes sont de longueur variable. </summary>
      <returns>Même instance <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration" /> qui permet de chaîner plusieurs appels.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.ToString">
      <summary>Retourne une chaîne qui représente l'objet actuel. Cette méthode n'apparaît pas dans IntelliSense.</summary>
      <returns>Chaîne qui représente l'objet actuel.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration">
      <summary>Permet de configurer une propriété <see cref="T:System.string" /> d'un type d'entité ou d'un type complexe. Cette fonctionnalité de configuration est exposée par l'API Fluent Code First, voir <see cref="T:System.Data.Entity.DbModelBuilder" />. </summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.Equals(System.Object)">
      <summary>Détermine si l'objet spécifié est identique à l'objet actuel. Cette méthode n'apparaît pas dans IntelliSense.</summary>
      <returns>true si les objets sont identiques ; sinon, false.</returns>
      <param name="obj">Objet.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.GetHashCode">
      <summary>Sert de fonction de hachage pour un type particulier. Cette méthode n'apparaît pas dans IntelliSense.</summary>
      <returns>Code de hachage pour le type actuel.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.GetType">
      <summary>Obtient le type de l'instance actuelle. Cette méthode n'apparaît pas dans IntelliSense.</summary>
      <returns>Type exact de l'instance actuelle au moment de l'exécution.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.HasColumnName(System.String)">
      <summary>Configure le nom de la colonne de base de données utilisée pour stocker la propriété. </summary>
      <returns>Même instance <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration" /> qui permet de chaîner plusieurs appels.</returns>
      <param name="columnName">Nom de la colonne.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.HasColumnOrder(System.Nullable{System.Int32})">
      <summary> Configure l'ordre de la colonne de base de données utilisée pour stocker la propriété. Cette méthode est également utilisée pour indiquer l'ordre des clés lorsqu'un type d'entité possède une clé composite. </summary>
      <returns>Même instance <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration" /> qui permet de chaîner plusieurs appels.</returns>
      <param name="columnOrder">Ordre dans lequel cette colonne doit apparaître dans la table de base de données.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.HasColumnType(System.String)">
      <summary> Configure le type de données de la colonne de base de données utilisée pour stocker la propriété. </summary>
      <returns>Même instance <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration" /> qui permet de chaîner plusieurs appels.</returns>
      <param name="columnType">Nom du type de données spécifique du fournisseur de base de données.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.HasDatabaseGeneratedOption(System.Nullable{System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption})">
      <summary>     Configure la manière dont les valeurs pour la propriété sont générées par la base de données. </summary>
      <returns>La même instance de StringPropertyConfiguration pour que plusieurs appels puissent être chaînés.</returns>
      <param name="databaseGeneratedOption">     Modèle utilisé pour générer des valeurs pour la propriété dans la base de données.     L'affectation de la valeur Null supprime de la propriété la facette du modèle générée par la base de données.     L'affectation de la valeur Null entraîne le même comportement au moment de l'exécution que la spécification de la valeur None. </param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.HasMaxLength(System.Nullable{System.Int32})">
      <summary>Configure la propriété pour qu'elle atteigne la longueur maximale spécifiée. </summary>
      <returns>Même instance <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration" /> qui permet de chaîner plusieurs appels.</returns>
      <param name="value">Longueur maximale pour la propriété. L'affectation de la valeur Null à cette propriété supprime les restrictions sur la longueur maximale de la propriété et une longueur par défaut est utilisée pour la colonne de base de données. </param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.IsConcurrencyToken">
      <summary> Indique que la propriété doit être utilisée comme jeton d'accès concurrentiel optimiste. </summary>
      <returns>Même instance <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration" /> qui permet de chaîner plusieurs appels.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.IsConcurrencyToken(System.Nullable{System.Boolean})">
      <summary> Indique si la propriété doit être utilisée comme jeton d'accès concurrentiel optimiste. </summary>
      <returns>Même instance <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration" /> qui permet de chaîner plusieurs appels.</returns>
      <param name="concurrencyToken"> Indique si la propriété est un jeton d'accès concurrentiel ou non. L'affectation de la valeur Null supprime la facette du jeton d'accès concurrentiel de la propriété. L'affectation de la valeur Null entraîne le même comportement au moment de l'exécution que la spécification de la valeur false. </param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.IsFixedLength">
      <summary>Configure la propriété pour qu'elle soit de longueur fixe. Utilisez la valeur HasMaxLength pour définir la longueur de la propriété. </summary>
      <returns>Même instance <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration" /> qui permet de chaîner plusieurs appels.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.IsMaxLength">
      <summary>Configure la propriété pour qu'elle autorise la longueur maximale prise en charge par le fournisseur de base de données. </summary>
      <returns>Même instance <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration" /> qui permet de chaîner plusieurs appels.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.IsOptional">
      <summary>Configure la propriété pour qu'elle soit de type facultatif. La colonne de base de données utilisée pour stocker cette propriété autorise la valeur Null. Par défaut, les propriétés <see cref="T:System.string" /> sont facultatives. </summary>
      <returns>Même instance <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration" /> qui permet de chaîner plusieurs appels.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.IsRequired">
      <summary> Configure la propriété pour qu'elle soit de type obligatoire. La colonne de base de données utilisée pour stocker cette propriété n'autorise pas la valeur Null. </summary>
      <returns>Même instance <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration" /> qui permet de chaîner plusieurs appels.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.IsUnicode">
      <summary>Configure la propriété pour prendre en charge le contenu de chaîne Unicode. </summary>
      <returns>Même instance <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration" /> qui permet de chaîner plusieurs appels.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.IsUnicode(System.Nullable{System.Boolean})">
      <summary>Indique si la propriété prend en charge le contenu de chaîne Unicode. </summary>
      <returns>Même instance <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration" /> qui permet de chaîner plusieurs appels.</returns>
      <param name="unicode"> Valeur indiquant si la propriété prend en charge le contenu de chaîne Unicode. L'affectation de la valeur Null supprime la facette Unicode de la propriété. L'affectation de la valeur Null entraîne le même comportement au moment de l'exécution que la spécification de la valeur false. </param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.IsVariableLength">
      <summary>Configure la propriété pour qu'elle soit de longueur variable. Par défaut, les propriétés <see cref="T:System.string" /> sont de longueur variable. </summary>
      <returns>Même instance <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration" /> qui permet de chaîner plusieurs appels.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.ToString">
      <summary>Retourne une chaîne qui représente l'objet actuel. Cette méthode n'apparaît pas dans IntelliSense.</summary>
      <returns>Chaîne qui représente l'objet actuel.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1">
      <summary>Autorise l'exécution de la configuration pour un type dans un modèle. </summary>
      <typeparam name="TStructuralType">Type à configurer.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1" />.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Equals(System.Object)">
      <summary>Détermine si l'objet spécifié est identique à l'objet actuel. Cette méthode n'apparaît pas dans IntelliSense.</summary>
      <returns>true si les objets sont identiques ; sinon, false.</returns>
      <param name="obj">Objet.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.GetHashCode">
      <summary>Sert de fonction de hachage pour un type particulier. Cette méthode n'apparaît pas dans IntelliSense.</summary>
      <returns>Code de hachage pour le type actuel.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.GetType">
      <summary>Obtient le type de l'instance actuelle. Cette méthode n'apparaît pas dans IntelliSense.</summary>
      <returns>Type exact de l'instance actuelle au moment de l'exécution.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Ignore``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary> Exclut une propriété du modèle de manière à ce qu'elle ne soit pas mappée à la base de données. </summary>
      <param name="propertyExpression"> Expression lambda représentant la propriété à configurer. Par exemple, t =&gt; t.MyProperty en C# et Function(t) t.MyProperty en Visual Basic .NET. </param>
      <typeparam name="TProperty">Type de la propriété à ignorer.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Byte[]}})">
      <summary> Configure une propriété <see cref="T:System.byte[]" /> définie sur ce type. </summary>
      <returns>Objet de configuration qui peut être utilisé pour configurer la propriété.</returns>
      <param name="propertyExpression"> Expression lambda représentant la propriété à configurer. Par exemple, t =&gt; t.MyProperty en C# et Function(t) t.MyProperty en Visual Basic .NET. </param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Data.Spatial.DbGeography}})">
      <summary>   Configure une propriété <see cref="T:DbGeography" /> définie sur ce type. </summary>
      <returns>Objet de configuration qui peut être utilisé pour configurer la propriété.</returns>
      <param name="propertyExpression">   Expression lambda représentant la propriété à configurer.   C# : t =&amp;gt; t.MyProperty      VB.Net : Function(t) t.MyProperty </param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Data.Spatial.DbGeometry}})">
      <summary>   Configure une propriété <see cref="T:DbGeometry" /> définie sur ce type. </summary>
      <returns>Objet de configuration qui peut être utilisé pour configurer la propriété.</returns>
      <param name="propertyExpression">   Expression lambda représentant la propriété à configurer.   C# : t =&amp;gt; t.MyProperty      VB.Net : Function(t) t.MyProperty </param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.DateTime}})">
      <summary> Configure une propriété <see cref="T:System.DateTime" /> définie sur ce type. </summary>
      <returns>Objet de configuration qui peut être utilisé pour configurer la propriété.</returns>
      <param name="propertyExpression"> Expression lambda représentant la propriété à configurer. Par exemple, t =&gt; t.MyProperty en C# et Function(t) t.MyProperty en Visual Basic .NET.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.DateTimeOffset}})">
      <summary> Configure une propriété <see cref="T:System.DateTimeOffset" /> définie sur ce type. </summary>
      <returns>Objet de configuration qui peut être utilisé pour configurer la propriété.</returns>
      <param name="propertyExpression"> Expression lambda représentant la propriété à configurer. Par exemple, t =&gt; t.MyProperty en C# et Function(t) t.MyProperty en Visual Basic .NET. </param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})">
      <summary> Configure une propriété <see cref="T:System.decimal" /> définie sur ce type. </summary>
      <returns>Objet de configuration qui peut être utilisé pour configurer la propriété.</returns>
      <param name="propertyExpression"> Expression lambda représentant la propriété à configurer. Par exemple, t =&gt; t.MyProperty en C# et Function(t) t.MyProperty en Visual Basic .NET. </param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.DateTime}}})">
      <summary> Configure une propriété Nullable(<see cref="T:System.DateTime" />) définie sur ce type. </summary>
      <returns>Objet de configuration qui peut être utilisé pour configurer la propriété.</returns>
      <param name="propertyExpression"> Expression lambda représentant la propriété à configurer. Par exemple, t =&gt; t.MyProperty en C# et Function(t) t.MyProperty en Visual Basic .NET. </param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.DateTimeOffset}}})">
      <summary> Configure une propriété Nullable(<see cref="T:System.DateTimeOffset" />) définie sur ce type. </summary>
      <returns>Objet de configuration qui peut être utilisé pour configurer la propriété.</returns>
      <param name="propertyExpression"> Expression lambda représentant la propriété à configurer. Par exemple, t =&gt; t.MyProperty en C# et Function(t) t.MyProperty en Visual Basic .NET.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})">
      <summary> Configure une propriété Nullable(<see cref="T:System.Decimal" />) définie sur ce type. </summary>
      <returns>Objet de configuration qui peut être utilisé pour configurer la propriété.</returns>
      <param name="propertyExpression"> Expression lambda représentant la propriété à configurer. Par exemple, t =&gt; t.MyProperty en C# et Function(t) t.MyProperty en Visual Basic .NET. </param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.TimeSpan}}})">
      <summary> Configure une propriété Nullable(<see cref="T:System.TimeSpan" />) définie sur ce type. </summary>
      <returns>Objet de configuration qui peut être utilisé pour configurer la propriété.</returns>
      <param name="propertyExpression"> Expression lambda représentant la propriété à configurer. Par exemple, t =&gt; t.MyProperty en C# et Function(t) t.MyProperty en Visual Basic .NET.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property``1(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{``0}}})">
      <summary> Configure une propriété Nullable(<see cref="T:System.struct" />) définie sur ce type. </summary>
      <returns>Objet de configuration qui peut être utilisé pour configurer la propriété.</returns>
      <param name="propertyExpression">Expression lambda représentant la propriété à configurer. Par exemple, t =&gt; t.MyProperty en C# et Function(t) t.MyProperty en Visual Basic .NET. </param>
      <typeparam name="T">Type de la propriété qui est configurée.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.String}})">
      <summary> Configure une propriété <see cref="T:System.string" /> définie sur ce type. </summary>
      <returns>Objet de configuration qui peut être utilisé pour configurer la propriété.</returns>
      <param name="propertyExpression">Expression lambda représentant la propriété à configurer. Par exemple, t =&gt; t.MyProperty en C# et Function(t) t.MyProperty en Visual Basic .NET.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.TimeSpan}})">
      <summary> Configure une propriété <see cref="T:System.TimeSpan" /> définie sur ce type. </summary>
      <returns>Objet de configuration qui peut être utilisé pour configurer la propriété.</returns>
      <param name="propertyExpression"> Expression lambda représentant la propriété à configurer. Par exemple, t =&gt; t.MyProperty en C# et Function(t) t.MyProperty en Visual Basic .NET.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary> Configure une propriété <see cref="T:System.struct" /> définie sur ce type. </summary>
      <returns>Objet de configuration qui peut être utilisé pour configurer la propriété.</returns>
      <param name="propertyExpression"> Expression lambda représentant la propriété à configurer. Par exemple, t =&gt; t.MyProperty en C# et Function(t) t.MyProperty en Visual Basic .NET. </param>
      <typeparam name="T">Type de la propriété qui est configurée.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.ToString">
      <summary>Retourne une chaîne qui représente l'objet actuel. Cette méthode n'apparaît pas dans IntelliSense.</summary>
      <returns>Chaîne qui représente l'objet actuel.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ValueConditionConfiguration">
      <summary> Configure une colonne de discriminateur utilisée pour distinguer les types dans une hiérarchie d'héritage. Cette fonctionnalité de configuration est exposée par l'API Fluent Code First. Pour plus d'informations, voir <see cref="T:System.Data.Entity.DbModelBuilder" />. </summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ValueConditionConfiguration.Equals(System.Object)">
      <summary>Détermine si l'objet spécifié est identique à l'objet actuel. Cette méthode n'apparaît pas dans IntelliSense.</summary>
      <returns>true si les objets sont identiques ; sinon, false.</returns>
      <param name="obj">Objet.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ValueConditionConfiguration.GetHashCode">
      <summary>Sert de fonction de hachage pour un type particulier. Cette méthode n'apparaît pas dans IntelliSense.</summary>
      <returns>Code de hachage pour le type actuel.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ValueConditionConfiguration.GetType">
      <summary>Obtient le type de l'instance actuelle. Cette méthode n'apparaît pas dans IntelliSense.</summary>
      <returns>Type exact de l'instance actuelle au moment de l'exécution.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ValueConditionConfiguration.HasValue``1(System.Nullable{``0})">
      <summary>Configure la valeur de discriminateur utilisée pour identifier le type d'entité configuré à partir d'autres types dans la hiérarchie d'héritage. </summary>
      <returns>Objet de configuration permettant de configurer la colonne utilisée pour stocker les valeurs de discriminateur.</returns>
      <param name="value">Valeur à utiliser pour identifier le type d'entité.</param>
      <typeparam name="T">Type de la valeur de discriminateur.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ValueConditionConfiguration.HasValue(System.String)">
      <summary>Configure la valeur de discriminateur utilisée pour identifier le type d'entité configuré à partir d'autres types dans la hiérarchie d'héritage. </summary>
      <returns>Objet de configuration permettant de configurer la colonne utilisée pour stocker les valeurs de discriminateur.</returns>
      <param name="value">Valeur à utiliser pour identifier le type d'entité.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ValueConditionConfiguration.HasValue``1(``0)">
      <summary> Configure la valeur de discriminateur utilisée pour identifier le type d'entité configuré à partir d'autres types dans la hiérarchie d'héritage. </summary>
      <returns>Objet de configuration permettant de configurer la colonne utilisée pour stocker les valeurs de discriminateur.</returns>
      <param name="value">Valeur à utiliser pour identifier le type d'entité.</param>
      <typeparam name="T">Type de la valeur de discriminateur.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ValueConditionConfiguration.ToString">
      <summary>Retourne une chaîne qui représente l'objet actuel. Cette méthode n'apparaît pas dans IntelliSense.</summary>
      <returns>Chaîne qui représente l'objet actuel.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.AssociationInverseDiscoveryConvention">
      <summary>Convention qui permet de détecter les propriétés de navigation pour qu'elles soient inversées les unes par rapport aux autres lorsqu'une seule paire de propriétés de navigation existe entre les types associés.</summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.ColumnAttributeConvention">
      <summary>Convention qui permet de traiter des instances de <see cref="T:System.ComponentModel.DataAnnotations.ColumnAttribute" /> trouvées dans les propriétés du modèle.</summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.ColumnTypeCasingConvention">
      <summary> Convention qui permet de convertir n'importe quels types de données explicitement spécifiés en minuscules, à l'aide d'annotations de données ou de l'API <see cref="T:System.Data.Entity.DbModelBuilder" />. </summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.ComplexTypeAttributeConvention">
      <summary>Convention qui permet de traiter les instances de <see cref="T:System.ComponentModel.DataAnnotations.ComplexTypeAttribute" /> trouvées dans les types du modèle. </summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.ComplexTypeDiscoveryConvention">
      <summary>Convention qui permet de configurer un type comme type complexe s'il ne possède pas de clé primaire, de type de base mappé et de propriétés de navigation. </summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.ConcurrencyCheckAttributeConvention">
      <summary>Convention qui permet de traiter les instances de <see cref="T:System.ComponentModel.DataAnnotations.ConcurrencyCheckAttribute" /> trouvées dans les propriétés du modèle.</summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.DatabaseGeneratedAttributeConvention">
      <summary> Convention qui permet de traiter les instances de <see cref="T:System.ComponentModel.DataAnnotations.DatabaseGeneratedAttribute" /> trouvées dans les propriétés du modèle. </summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.DecimalPropertyConvention">
      <summary>Convention qui permet de définir la précision à 18 et l'échelle à 2 pour les propriétés décimales. </summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.DeclaredPropertyOrderingConvention">
      <summary>Convention qui permet de déplacer les propriétés de clé primaire pour qu'elles apparaissent en premier. </summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyAssociationMultiplicityConvention">
      <summary>Convention qui permet de distinguer des relations facultatives et obligatoires en fonction de l'acceptation de la valeur Null du CLR de la propriété de clé étrangère. </summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyNavigationPropertyAttributeConvention">
      <summary>Convention qui permet d'exécuter des instances de <see cref="T:System.ComponentModel.DataAnnotations.ForeignKeyAttribute" /> trouvées dans les propriétés de navigation du modèle.</summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyPrimitivePropertyAttributeConvention">
      <summary>Convention qui permet d'exécuter des instances de <see cref="T:System.ComponentModel.DataAnnotations.ForeignKeyAttribute" /> trouvées dans les propriétés de clé étrangère du modèle.</summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.IConvention">
      <summary>Identifie les conventions qui peuvent être supprimées d'une instance <see cref="T:System.Data.Entity.DbModelBuilder" />. </summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.IdKeyDiscoveryConvention">
      <summary>Convention qui permet de détecter les propriétés de clé primaire.  </summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.InversePropertyAttributeConvention">
      <summary>Convention qui permet de traiter les instances de <see cref="T:System.ComponentModel.DataAnnotations.InversePropertyAttribute" /> trouvées dans les propriétés du modèle. </summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.KeyAttributeConvention">
      <summary>Convention qui permet de traiter les instances de <see cref="T:System.ComponentModel.DataAnnotations.KeyAttribute" /> trouvées dans les propriétés du modèle. </summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.ManyToManyCascadeDeleteConvention">
      <summary>Convention qui permet d'ajouter une suppression en cascade à la table de jointures à partir des tables impliquées dans une relation plusieurs-à-plusieurs.</summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.MappingInheritedPropertiesSupportConvention">
      <summary>Garantit que les propriétés héritées du mappage ne créent pas de mappage non valide ou non pris en charge</summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.MaxLengthAttributeConvention">
      <summary>Convention qui permet d'exécuter des instances de <see cref="T:System.ComponentModel.DataAnnotations.MaxLengthAttribute" /> trouvées dans les propriétés du modèle. </summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.NavigationPropertyNameForeignKeyDiscoveryConvention">
      <summary>Convention qui permet de découvrir les propriétés de clé étrangère dont les noms représentent une combinaison du nom de la propriété de navigation dépendante et des noms de propriétés de clé primaire du type principal. </summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.NotMappedPropertyAttributeConvention">
      <summary>Convention qui permet de traiter les instances de <see cref="T:System.ComponentModel.DataAnnotations.NotMappedAttribute" /> trouvées dans les propriétés du modèle. </summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.NotMappedTypeAttributeConvention">
      <summary>Convention qui permet de traiter les instances de <see cref="T:System.ComponentModel.DataAnnotations.NotMappedAttribute" /> trouvées dans les types du modèle. </summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.OneToManyCascadeDeleteConvention">
      <summary>Convention qui permet d'activer la suppression en cascade pour n'importe quelle relation obligatoire. </summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.OneToOneConstraintIntroductionConvention">
      <summary>Convention qui permet de configurer les clés primaires du type d'entité dépendant comme clés étrangères dans une relation un-à-un. </summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.PluralizingEntitySetNameConvention">
      <summary>Convention qui permet de définir le nom du jeu d'entités comme une version pluralisée du nom du type d'entité. </summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.PluralizingTableNameConvention">
      <summary>Convention qui permet de définir le nom de table comme une version pluralisée du nom de type d'entité. </summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.PrimaryKeyNameForeignKeyDiscoveryConvention">
      <summary>Convention qui permet de découvrir les propriétés de clé étrangère dont les noms correspondent aux noms de propriétés de clé primaire du type principal. </summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.PropertyMaxLengthConvention">
      <summary>Convention qui permet de définir les longueurs maximales par défaut pour les types de propriétés qui prennent en charge les facettes de longueur. </summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.RequiredNavigationPropertyAttributeConvention">
      <summary>Convention qui permet d'exécuter des instances de <see cref="T:System.ComponentModel.DataAnnotations.RequiredAttribute" /> trouvées dans les propriétés de navigation du modèle. </summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.RequiredPrimitivePropertyAttributeConvention">
      <summary>Convention qui permet de traiter les instances de <see cref="T:System.ComponentModel.DataAnnotations.RequiredAttribute" /> trouvées dans les propriétés primitives du modèle. </summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.SqlCePropertyMaxLengthConvention">
      <summary>Définit une longueur maximum par défaut de 4 000 pour les propriétés dont le type prend en charge les facettes de longueur lorsque SqlCe est le fournisseur.</summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.StoreGeneratedIdentityKeyConvention">
      <summary>Convention qui permet de configurer les clés primaires d'entiers comme identité. </summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.StringLengthAttributeConvention">
      <summary>Convention qui permet de traiter les instances de <see cref="T:System.ComponentModel.DataAnnotations.StringLengthAttribute" /> trouvées dans les propriétés du modèle. </summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.TableAttributeConvention">
      <summary>Convention qui permet de traiter les instances de <see cref="T:System.ComponentModel.DataAnnotations.TableAttribute" /> trouvées dans les types du modèle. </summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.TimestampAttributeConvention">
      <summary>Convention qui permet de traiter les instances de <see cref="T:System.ComponentModel.DataAnnotations.TimestampAttribute" /> trouvées dans les propriétés du modèle. </summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.TypeNameForeignKeyDiscoveryConvention">
      <summary>Convention qui permet de découvrir les propriétés de clé étrangère dont les noms représentent une combinaison du nom du type principal et des noms de propriétés de clé primaire du type principal. </summary>
    </member>
    <member name="T:System.Data.Entity.Validation.DbEntityValidationException">
      <summary>Exception levée à partir de <see cref="M:System.Data.Entity.DbContext.SaveChanges" /> lorsque la validation de l'entité échoue.</summary>
    </member>
    <member name="M:System.Data.Entity.Validation.DbEntityValidationException.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Validation.DbEntityValidationException" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Validation.DbEntityValidationException.#ctor(System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Validation.DbEntityValidationException" />.</summary>
      <param name="message">Message d'exception.</param>
    </member>
    <member name="M:System.Data.Entity.Validation.DbEntityValidationException.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Data.Entity.Validation.DbEntityValidationResult})">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Validation.DbEntityValidationException" />.</summary>
      <param name="message">Message d'exception.</param>
      <param name="entityValidationResults">Résultats de la validation.</param>
    </member>
    <member name="M:System.Data.Entity.Validation.DbEntityValidationException.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Data.Entity.Validation.DbEntityValidationResult},System.Exception)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Validation.DbEntityValidationException" />.</summary>
      <param name="message">Message d'exception.</param>
      <param name="entityValidationResults">Résultats de la validation.</param>
      <param name="innerException">Exception interne.</param>
    </member>
    <member name="M:System.Data.Entity.Validation.DbEntityValidationException.#ctor(System.String,System.Exception)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Validation.DbEntityValidationException" />.</summary>
      <param name="message">Message d'exception.</param>
      <param name="innerException">Exception interne.</param>
    </member>
    <member name="P:System.Data.Entity.Validation.DbEntityValidationException.EntityValidationErrors">
      <summary>Retourne les erreurs de validation.</summary>
      <returns>Erreurs de validation, le cas échéant.</returns>
    </member>
    <member name="T:System.Data.Entity.Validation.DbEntityValidationResult">
      <summary>Représente les résultats de validation pour une entité unique.</summary>
    </member>
    <member name="M:System.Data.Entity.Validation.DbEntityValidationResult.#ctor(System.Data.Entity.Infrastructure.DbEntityEntry,System.Collections.Generic.IEnumerable{System.Data.Entity.Validation.DbValidationError})">
      <summary>Crée une instance de la classe <see cref="T:System.Data.Entity.Validation.DbEntityValidationResult" />. </summary>
      <param name="entry">Entrée d'entité à laquelle s'appliquent les résultats. Jamais Null.</param>
      <param name="validationErrors">Liste d'instances <see cref="T:System.Data.Entity.Validation.DbValidationError" />. Cette valeur n'est jamais Null, mais elle peut être vide, ce qui signifie que l'entité est valide. </param>
    </member>
    <member name="P:System.Data.Entity.Validation.DbEntityValidationResult.Entry">
      <summary>Obtient l'instance de <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" /> à laquelle s'appliquent les résultats.</summary>
      <returns>
        <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Validation.DbEntityValidationResult.IsValid">
      <summary>Obtient un indicateur si l'entité est valide.</summary>
      <returns>true si l'entité est valide ; sinon, false.</returns>
    </member>
    <member name="P:System.Data.Entity.Validation.DbEntityValidationResult.ValidationErrors">
      <summary>Obtient les erreurs de validation. Cette propriété n'est jamais Null. </summary>
      <returns>Erreurs de validation</returns>
    </member>
    <member name="T:System.Data.Entity.Validation.DbUnexpectedValidationException">
      <summary>Exception levée à partir de <see cref="M:System.Data.Entity.DbContext.GetValidationErrors" /> lorsqu'une exception est levée à partir du code de validation.</summary>
    </member>
    <member name="M:System.Data.Entity.Validation.DbUnexpectedValidationException.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Validation.DbUnexpectedValidationException" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Validation.DbUnexpectedValidationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Validation.DbUnexpectedValidationException" /> avec les informations de sérialisation et le contexte spécifiés. </summary>
      <param name="info">Informations de sérialisation.</param>
      <param name="context">Contexte de diffusion en continu.</param>
    </member>
    <member name="M:System.Data.Entity.Validation.DbUnexpectedValidationException.#ctor(System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Validation.DbUnexpectedValidationException" />.</summary>
      <param name="message">Message d'exception.</param>
    </member>
    <member name="M:System.Data.Entity.Validation.DbUnexpectedValidationException.#ctor(System.String,System.Exception)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Data.Entity.Validation.DbUnexpectedValidationException" />.</summary>
      <param name="message">Message d'exception.</param>
      <param name="innerException">Exception interne.</param>
    </member>
    <member name="T:System.Data.Entity.Validation.DbValidationError">
      <summary>Erreur de validation. Erreur de validation au niveau de la propriété ou de l'entité. </summary>
    </member>
    <member name="M:System.Data.Entity.Validation.DbValidationError.#ctor(System.String,System.String)">
      <summary>Crée une instance de <see cref="T:System.Data.Entity.Validation.DbValidationError" />.</summary>
      <param name="propertyName">Nom de la propriété non valide. Peut être Null.</param>
      <param name="errorMessage">Message d'erreur de validation. Peut être Null.</param>
    </member>
    <member name="P:System.Data.Entity.Validation.DbValidationError.ErrorMessage">
      <summary>Obtient le message d'erreur de validation.</summary>
      <returns>Message d'erreur de validation.</returns>
    </member>
    <member name="P:System.Data.Entity.Validation.DbValidationError.PropertyName">
      <summary>Obtient le nom de la propriété non valide. </summary>
      <returns>Nom de la propriété non valide.</returns>
    </member>
  </members>
</doc>